# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AchievementDefinitionResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_properties': 'dict(str, ModelProperty)',
        'created_date': 'int',
        'description': 'str',
        'hidden': 'bool',
        'name': 'str',
        'required_progress': 'int',
        'rule_id': 'str',
        'tags': 'list[str]',
        'template': 'str',
        'trigger_event_name': 'str',
        'updated_date': 'int'
    }

    attribute_map = {
        'additional_properties': 'additional_properties',
        'created_date': 'created_date',
        'description': 'description',
        'hidden': 'hidden',
        'name': 'name',
        'required_progress': 'required_progress',
        'rule_id': 'rule_id',
        'tags': 'tags',
        'template': 'template',
        'trigger_event_name': 'trigger_event_name',
        'updated_date': 'updated_date'
    }

    def __init__(self, additional_properties=None, created_date=None, description=None, hidden=None, name=None, required_progress=None, rule_id=None, tags=None, template=None, trigger_event_name=None, updated_date=None):
        """
        AchievementDefinitionResource - a model defined in Swagger
        """

        self._additional_properties = None
        self._created_date = None
        self._description = None
        self._hidden = None
        self._name = None
        self._required_progress = None
        self._rule_id = None
        self._tags = None
        self._template = None
        self._trigger_event_name = None
        self._updated_date = None
        self.discriminator = None

        if additional_properties is not None:
          self.additional_properties = additional_properties
        if created_date is not None:
          self.created_date = created_date
        if description is not None:
          self.description = description
        self.hidden = hidden
        self.name = name
        self.required_progress = required_progress
        if rule_id is not None:
          self.rule_id = rule_id
        if tags is not None:
          self.tags = tags
        if template is not None:
          self.template = template
        if trigger_event_name is not None:
          self.trigger_event_name = trigger_event_name
        if updated_date is not None:
          self.updated_date = updated_date

    @property
    def additional_properties(self):
        """
        Gets the additional_properties of this AchievementDefinitionResource.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this resource type

        :return: The additional_properties of this AchievementDefinitionResource.
        :rtype: dict(str, ModelProperty)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """
        Sets the additional_properties of this AchievementDefinitionResource.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this resource type

        :param additional_properties: The additional_properties of this AchievementDefinitionResource.
        :type: dict(str, ModelProperty)
        """

        self._additional_properties = additional_properties

    @property
    def created_date(self):
        """
        Gets the created_date of this AchievementDefinitionResource.
        The date/time this resource was created in seconds since unix epoch

        :return: The created_date of this AchievementDefinitionResource.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this AchievementDefinitionResource.
        The date/time this resource was created in seconds since unix epoch

        :param created_date: The created_date of this AchievementDefinitionResource.
        :type: int
        """

        self._created_date = created_date

    @property
    def description(self):
        """
        Gets the description of this AchievementDefinitionResource.
        The description of the achievement. Must be at least 2 characters in length.

        :return: The description of this AchievementDefinitionResource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AchievementDefinitionResource.
        The description of the achievement. Must be at least 2 characters in length.

        :param description: The description of this AchievementDefinitionResource.
        :type: str
        """

        self._description = description

    @property
    def hidden(self):
        """
        Gets the hidden of this AchievementDefinitionResource.
        Whether the achievement is hidden from the user

        :return: The hidden of this AchievementDefinitionResource.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """
        Sets the hidden of this AchievementDefinitionResource.
        Whether the achievement is hidden from the user

        :param hidden: The hidden of this AchievementDefinitionResource.
        :type: bool
        """
        if hidden is None:
            raise ValueError("Invalid value for `hidden`, must not be `None`")

        self._hidden = hidden

    @property
    def name(self):
        """
        Gets the name of this AchievementDefinitionResource.
        The name of the achievement. Must be at least 6 characters in length. IMMUTABLE

        :return: The name of this AchievementDefinitionResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AchievementDefinitionResource.
        The name of the achievement. Must be at least 6 characters in length. IMMUTABLE

        :param name: The name of this AchievementDefinitionResource.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def required_progress(self):
        """
        Gets the required_progress of this AchievementDefinitionResource.
        The required progress for the achievement definition

        :return: The required_progress of this AchievementDefinitionResource.
        :rtype: int
        """
        return self._required_progress

    @required_progress.setter
    def required_progress(self, required_progress):
        """
        Sets the required_progress of this AchievementDefinitionResource.
        The required progress for the achievement definition

        :param required_progress: The required_progress of this AchievementDefinitionResource.
        :type: int
        """
        if required_progress is None:
            raise ValueError("Invalid value for `required_progress`, must not be `None`")

        self._required_progress = required_progress

    @property
    def rule_id(self):
        """
        Gets the rule_id of this AchievementDefinitionResource.
        The id of the rule generated for this achievement

        :return: The rule_id of this AchievementDefinitionResource.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """
        Sets the rule_id of this AchievementDefinitionResource.
        The id of the rule generated for this achievement

        :param rule_id: The rule_id of this AchievementDefinitionResource.
        :type: str
        """

        self._rule_id = rule_id

    @property
    def tags(self):
        """
        Gets the tags of this AchievementDefinitionResource.
        The tags for the achievement definition

        :return: The tags of this AchievementDefinitionResource.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this AchievementDefinitionResource.
        The tags for the achievement definition

        :param tags: The tags of this AchievementDefinitionResource.
        :type: list[str]
        """

        self._tags = tags

    @property
    def template(self):
        """
        Gets the template of this AchievementDefinitionResource.
        An achievement template this achievement is validated against (private). May be null and no validation of additional_properties will be done

        :return: The template of this AchievementDefinitionResource.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this AchievementDefinitionResource.
        An achievement template this achievement is validated against (private). May be null and no validation of additional_properties will be done

        :param template: The template of this AchievementDefinitionResource.
        :type: str
        """

        self._template = template

    @property
    def trigger_event_name(self):
        """
        Gets the trigger_event_name of this AchievementDefinitionResource.
        The name of the trigger event associated with this achievement

        :return: The trigger_event_name of this AchievementDefinitionResource.
        :rtype: str
        """
        return self._trigger_event_name

    @trigger_event_name.setter
    def trigger_event_name(self, trigger_event_name):
        """
        Sets the trigger_event_name of this AchievementDefinitionResource.
        The name of the trigger event associated with this achievement

        :param trigger_event_name: The trigger_event_name of this AchievementDefinitionResource.
        :type: str
        """

        self._trigger_event_name = trigger_event_name

    @property
    def updated_date(self):
        """
        Gets the updated_date of this AchievementDefinitionResource.
        The date/time this resource was last updated in seconds since unix epoch

        :return: The updated_date of this AchievementDefinitionResource.
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """
        Sets the updated_date of this AchievementDefinitionResource.
        The date/time this resource was last updated in seconds since unix epoch

        :param updated_date: The updated_date of this AchievementDefinitionResource.
        :type: int
        """

        self._updated_date = updated_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AchievementDefinitionResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
