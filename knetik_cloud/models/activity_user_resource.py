# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ActivityUserResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, host=None, id=None, joined_date=None, left_date=None, metric=None, status=None, user=None):
        """
        ActivityUserResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'host': 'bool',
            'id': 'int',
            'joined_date': 'int',
            'left_date': 'int',
            'metric': 'MetricResource',
            'status': 'str',
            'user': 'SimpleUserResource'
        }

        self.attribute_map = {
            'host': 'host',
            'id': 'id',
            'joined_date': 'joined_date',
            'left_date': 'left_date',
            'metric': 'metric',
            'status': 'status',
            'user': 'user'
        }

        self._host = host
        self._id = id
        self._joined_date = joined_date
        self._left_date = left_date
        self._metric = metric
        self._status = status
        self._user = user

    @property
    def host(self):
        """
        Gets the host of this ActivityUserResource.
        Whether this user is the 'host' of the occurrence and has increased access to settings/etc (default: false)

        :return: The host of this ActivityUserResource.
        :rtype: bool
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this ActivityUserResource.
        Whether this user is the 'host' of the occurrence and has increased access to settings/etc (default: false)

        :param host: The host of this ActivityUserResource.
        :type: bool
        """

        self._host = host

    @property
    def id(self):
        """
        Gets the id of this ActivityUserResource.
        The id of the activity user entry

        :return: The id of this ActivityUserResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ActivityUserResource.
        The id of the activity user entry

        :param id: The id of this ActivityUserResource.
        :type: int
        """

        self._id = id

    @property
    def joined_date(self):
        """
        Gets the joined_date of this ActivityUserResource.
        The date this user last joined the occurrence, unix timestamp in seconds

        :return: The joined_date of this ActivityUserResource.
        :rtype: int
        """
        return self._joined_date

    @joined_date.setter
    def joined_date(self, joined_date):
        """
        Sets the joined_date of this ActivityUserResource.
        The date this user last joined the occurrence, unix timestamp in seconds

        :param joined_date: The joined_date of this ActivityUserResource.
        :type: int
        """

        self._joined_date = joined_date

    @property
    def left_date(self):
        """
        Gets the left_date of this ActivityUserResource.
        The date this user last left the occurrence, unix timestamp in seconds. Null if still present

        :return: The left_date of this ActivityUserResource.
        :rtype: int
        """
        return self._left_date

    @left_date.setter
    def left_date(self, left_date):
        """
        Sets the left_date of this ActivityUserResource.
        The date this user last left the occurrence, unix timestamp in seconds. Null if still present

        :param left_date: The left_date of this ActivityUserResource.
        :type: int
        """

        self._left_date = left_date

    @property
    def metric(self):
        """
        Gets the metric of this ActivityUserResource.
        The metric for the user's results, after the game is over

        :return: The metric of this ActivityUserResource.
        :rtype: MetricResource
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """
        Sets the metric of this ActivityUserResource.
        The metric for the user's results, after the game is over

        :param metric: The metric of this ActivityUserResource.
        :type: MetricResource
        """

        self._metric = metric

    @property
    def status(self):
        """
        Gets the status of this ActivityUserResource.
        The current status of the user in the occurrence (default: present)

        :return: The status of this ActivityUserResource.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ActivityUserResource.
        The current status of the user in the occurrence (default: present)

        :param status: The status of this ActivityUserResource.
        :type: str
        """
        allowed_values = ["present", "ready", "left", "surrendered", "disconnected"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def user(self):
        """
        Gets the user of this ActivityUserResource.
        The user

        :return: The user of this ActivityUserResource.
        :rtype: SimpleUserResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this ActivityUserResource.
        The user

        :param user: The user of this ActivityUserResource.
        :type: SimpleUserResource
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ActivityUserResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
