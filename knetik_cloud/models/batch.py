# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Batch(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch': 'list[BatchRequest]',
        'timeout': 'int'
    }

    attribute_map = {
        'batch': 'batch',
        'timeout': 'timeout'
    }

    def __init__(self, batch=None, timeout=None):
        """
        Batch - a model defined in Swagger
        """

        self._batch = None
        self._timeout = None

        self.batch = batch
        self.timeout = timeout

    @property
    def batch(self):
        """
        Gets the batch of this Batch.
        The list of batch requests

        :return: The batch of this Batch.
        :rtype: list[BatchRequest]
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """
        Sets the batch of this Batch.
        The list of batch requests

        :param batch: The batch of this Batch.
        :type: list[BatchRequest]
        """
        if batch is None:
            raise ValueError("Invalid value for `batch`, must not be `None`")

        self._batch = batch

    @property
    def timeout(self):
        """
        Gets the timeout of this Batch.
        The amount of time before a request token is returned instead of the batch result.  Default is 60.  Range is 0-300

        :return: The timeout of this Batch.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this Batch.
        The amount of time before a request token is returned instead of the batch result.  Default is 60.  Range is 0-300

        :param timeout: The timeout of this Batch.
        :type: int
        """
        if timeout is None:
            raise ValueError("Invalid value for `timeout`, must not be `None`")

        self._timeout = timeout

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Batch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
