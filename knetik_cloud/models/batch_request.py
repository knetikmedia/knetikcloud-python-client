# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BatchRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'body': 'object',
        'content_type': 'str',
        'method': 'str',
        'timeout': 'int',
        'token': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'body': 'body',
        'content_type': 'content_type',
        'method': 'method',
        'timeout': 'timeout',
        'token': 'token',
        'uri': 'uri'
    }

    def __init__(self, body=None, content_type=None, method=None, timeout=None, token=None, uri=None):
        """
        BatchRequest - a model defined in Swagger
        """

        self._body = None
        self._content_type = None
        self._method = None
        self._timeout = None
        self._token = None
        self._uri = None
        self.discriminator = None

        self.body = body
        self.content_type = content_type
        self.method = method
        self.timeout = timeout
        if token is not None:
          self.token = token
        self.uri = uri

    @property
    def body(self):
        """
        Gets the body of this BatchRequest.
        The request body as would be passed to the URI

        :return: The body of this BatchRequest.
        :rtype: object
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this BatchRequest.
        The request body as would be passed to the URI

        :param body: The body of this BatchRequest.
        :type: object
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def content_type(self):
        """
        Gets the content_type of this BatchRequest.
        Content type used, Ex:(application/json)

        :return: The content_type of this BatchRequest.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this BatchRequest.
        Content type used, Ex:(application/json)

        :param content_type: The content_type of this BatchRequest.
        :type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def method(self):
        """
        Gets the method of this BatchRequest.
        The HTTP method used, Ex: (GET)

        :return: The method of this BatchRequest.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """
        Sets the method of this BatchRequest.
        The HTTP method used, Ex: (GET)

        :param method: The method of this BatchRequest.
        :type: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def timeout(self):
        """
        Gets the timeout of this BatchRequest.
        Time in seconds before process will timeout.  Default is 60.  Range is 1-300

        :return: The timeout of this BatchRequest.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this BatchRequest.
        Time in seconds before process will timeout.  Default is 60.  Range is 1-300

        :param timeout: The timeout of this BatchRequest.
        :type: int
        """
        if timeout is None:
            raise ValueError("Invalid value for `timeout`, must not be `None`")

        self._timeout = timeout

    @property
    def token(self):
        """
        Gets the token of this BatchRequest.
        The oauth token only

        :return: The token of this BatchRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this BatchRequest.
        The oauth token only

        :param token: The token of this BatchRequest.
        :type: str
        """

        self._token = token

    @property
    def uri(self):
        """
        Gets the uri of this BatchRequest.
        Full URI of REST call

        :return: The uri of this BatchRequest.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this BatchRequest.
        Full URI of REST call

        :param uri: The uri of this BatchRequest.
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
