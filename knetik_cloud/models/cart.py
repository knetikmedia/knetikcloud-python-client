# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Cart(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_shipping_options': 'list[CartShippingOption]',
        'country_tax': 'float',
        'coupons': 'list[CouponDefinition]',
        'created': 'int',
        'currency_code': 'str',
        'discount_total': 'float',
        'error_code': 'int',
        'error_message': 'str',
        'grand_total': 'float',
        'id': 'str',
        'invoice_id': 'float',
        'items': 'list[CartLineItem]',
        'owner': 'int',
        'selected_shipping_options': 'list[CartShippingOption]',
        'shippable': 'bool',
        'shipping_address': 'CartShippingAddressRequest',
        'shipping_cost': 'float',
        'state_tax': 'float',
        'status': 'str',
        'subtotal': 'float',
        'updated': 'int'
    }

    attribute_map = {
        'available_shipping_options': 'available_shipping_options',
        'country_tax': 'country_tax',
        'coupons': 'coupons',
        'created': 'created',
        'currency_code': 'currency_code',
        'discount_total': 'discount_total',
        'error_code': 'error_code',
        'error_message': 'error_message',
        'grand_total': 'grand_total',
        'id': 'id',
        'invoice_id': 'invoice_id',
        'items': 'items',
        'owner': 'owner',
        'selected_shipping_options': 'selected_shipping_options',
        'shippable': 'shippable',
        'shipping_address': 'shipping_address',
        'shipping_cost': 'shipping_cost',
        'state_tax': 'state_tax',
        'status': 'status',
        'subtotal': 'subtotal',
        'updated': 'updated'
    }

    def __init__(self, available_shipping_options=None, country_tax=None, coupons=None, created=None, currency_code=None, discount_total=None, error_code=None, error_message=None, grand_total=None, id=None, invoice_id=None, items=None, owner=None, selected_shipping_options=None, shippable=None, shipping_address=None, shipping_cost=None, state_tax=None, status=None, subtotal=None, updated=None):
        """
        Cart - a model defined in Swagger
        """

        self._available_shipping_options = None
        self._country_tax = None
        self._coupons = None
        self._created = None
        self._currency_code = None
        self._discount_total = None
        self._error_code = None
        self._error_message = None
        self._grand_total = None
        self._id = None
        self._invoice_id = None
        self._items = None
        self._owner = None
        self._selected_shipping_options = None
        self._shippable = None
        self._shipping_address = None
        self._shipping_cost = None
        self._state_tax = None
        self._status = None
        self._subtotal = None
        self._updated = None

        if available_shipping_options is not None:
          self.available_shipping_options = available_shipping_options
        if country_tax is not None:
          self.country_tax = country_tax
        if coupons is not None:
          self.coupons = coupons
        if created is not None:
          self.created = created
        if currency_code is not None:
          self.currency_code = currency_code
        if discount_total is not None:
          self.discount_total = discount_total
        if error_code is not None:
          self.error_code = error_code
        if error_message is not None:
          self.error_message = error_message
        if grand_total is not None:
          self.grand_total = grand_total
        if id is not None:
          self.id = id
        if invoice_id is not None:
          self.invoice_id = invoice_id
        if items is not None:
          self.items = items
        if owner is not None:
          self.owner = owner
        if selected_shipping_options is not None:
          self.selected_shipping_options = selected_shipping_options
        if shippable is not None:
          self.shippable = shippable
        if shipping_address is not None:
          self.shipping_address = shipping_address
        if shipping_cost is not None:
          self.shipping_cost = shipping_cost
        if state_tax is not None:
          self.state_tax = state_tax
        if status is not None:
          self.status = status
        if subtotal is not None:
          self.subtotal = subtotal
        if updated is not None:
          self.updated = updated

    @property
    def available_shipping_options(self):
        """
        Gets the available_shipping_options of this Cart.

        :return: The available_shipping_options of this Cart.
        :rtype: list[CartShippingOption]
        """
        return self._available_shipping_options

    @available_shipping_options.setter
    def available_shipping_options(self, available_shipping_options):
        """
        Sets the available_shipping_options of this Cart.

        :param available_shipping_options: The available_shipping_options of this Cart.
        :type: list[CartShippingOption]
        """

        self._available_shipping_options = available_shipping_options

    @property
    def country_tax(self):
        """
        Gets the country_tax of this Cart.

        :return: The country_tax of this Cart.
        :rtype: float
        """
        return self._country_tax

    @country_tax.setter
    def country_tax(self, country_tax):
        """
        Sets the country_tax of this Cart.

        :param country_tax: The country_tax of this Cart.
        :type: float
        """

        self._country_tax = country_tax

    @property
    def coupons(self):
        """
        Gets the coupons of this Cart.

        :return: The coupons of this Cart.
        :rtype: list[CouponDefinition]
        """
        return self._coupons

    @coupons.setter
    def coupons(self, coupons):
        """
        Sets the coupons of this Cart.

        :param coupons: The coupons of this Cart.
        :type: list[CouponDefinition]
        """

        self._coupons = coupons

    @property
    def created(self):
        """
        Gets the created of this Cart.

        :return: The created of this Cart.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Cart.

        :param created: The created of this Cart.
        :type: int
        """

        self._created = created

    @property
    def currency_code(self):
        """
        Gets the currency_code of this Cart.

        :return: The currency_code of this Cart.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """
        Sets the currency_code of this Cart.

        :param currency_code: The currency_code of this Cart.
        :type: str
        """

        self._currency_code = currency_code

    @property
    def discount_total(self):
        """
        Gets the discount_total of this Cart.

        :return: The discount_total of this Cart.
        :rtype: float
        """
        return self._discount_total

    @discount_total.setter
    def discount_total(self, discount_total):
        """
        Sets the discount_total of this Cart.

        :param discount_total: The discount_total of this Cart.
        :type: float
        """

        self._discount_total = discount_total

    @property
    def error_code(self):
        """
        Gets the error_code of this Cart.

        :return: The error_code of this Cart.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """
        Sets the error_code of this Cart.

        :param error_code: The error_code of this Cart.
        :type: int
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """
        Gets the error_message of this Cart.

        :return: The error_message of this Cart.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this Cart.

        :param error_message: The error_message of this Cart.
        :type: str
        """

        self._error_message = error_message

    @property
    def grand_total(self):
        """
        Gets the grand_total of this Cart.

        :return: The grand_total of this Cart.
        :rtype: float
        """
        return self._grand_total

    @grand_total.setter
    def grand_total(self, grand_total):
        """
        Sets the grand_total of this Cart.

        :param grand_total: The grand_total of this Cart.
        :type: float
        """

        self._grand_total = grand_total

    @property
    def id(self):
        """
        Gets the id of this Cart.

        :return: The id of this Cart.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Cart.

        :param id: The id of this Cart.
        :type: str
        """

        self._id = id

    @property
    def invoice_id(self):
        """
        Gets the invoice_id of this Cart.

        :return: The invoice_id of this Cart.
        :rtype: float
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """
        Sets the invoice_id of this Cart.

        :param invoice_id: The invoice_id of this Cart.
        :type: float
        """

        self._invoice_id = invoice_id

    @property
    def items(self):
        """
        Gets the items of this Cart.

        :return: The items of this Cart.
        :rtype: list[CartLineItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this Cart.

        :param items: The items of this Cart.
        :type: list[CartLineItem]
        """

        self._items = items

    @property
    def owner(self):
        """
        Gets the owner of this Cart.

        :return: The owner of this Cart.
        :rtype: int
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this Cart.

        :param owner: The owner of this Cart.
        :type: int
        """

        self._owner = owner

    @property
    def selected_shipping_options(self):
        """
        Gets the selected_shipping_options of this Cart.

        :return: The selected_shipping_options of this Cart.
        :rtype: list[CartShippingOption]
        """
        return self._selected_shipping_options

    @selected_shipping_options.setter
    def selected_shipping_options(self, selected_shipping_options):
        """
        Sets the selected_shipping_options of this Cart.

        :param selected_shipping_options: The selected_shipping_options of this Cart.
        :type: list[CartShippingOption]
        """

        self._selected_shipping_options = selected_shipping_options

    @property
    def shippable(self):
        """
        Gets the shippable of this Cart.

        :return: The shippable of this Cart.
        :rtype: bool
        """
        return self._shippable

    @shippable.setter
    def shippable(self, shippable):
        """
        Sets the shippable of this Cart.

        :param shippable: The shippable of this Cart.
        :type: bool
        """

        self._shippable = shippable

    @property
    def shipping_address(self):
        """
        Gets the shipping_address of this Cart.

        :return: The shipping_address of this Cart.
        :rtype: CartShippingAddressRequest
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """
        Sets the shipping_address of this Cart.

        :param shipping_address: The shipping_address of this Cart.
        :type: CartShippingAddressRequest
        """

        self._shipping_address = shipping_address

    @property
    def shipping_cost(self):
        """
        Gets the shipping_cost of this Cart.

        :return: The shipping_cost of this Cart.
        :rtype: float
        """
        return self._shipping_cost

    @shipping_cost.setter
    def shipping_cost(self, shipping_cost):
        """
        Sets the shipping_cost of this Cart.

        :param shipping_cost: The shipping_cost of this Cart.
        :type: float
        """

        self._shipping_cost = shipping_cost

    @property
    def state_tax(self):
        """
        Gets the state_tax of this Cart.

        :return: The state_tax of this Cart.
        :rtype: float
        """
        return self._state_tax

    @state_tax.setter
    def state_tax(self, state_tax):
        """
        Sets the state_tax of this Cart.

        :param state_tax: The state_tax of this Cart.
        :type: float
        """

        self._state_tax = state_tax

    @property
    def status(self):
        """
        Gets the status of this Cart.

        :return: The status of this Cart.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Cart.

        :param status: The status of this Cart.
        :type: str
        """
        allowed_values = ["active", "processing", "closed", "onhold"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subtotal(self):
        """
        Gets the subtotal of this Cart.

        :return: The subtotal of this Cart.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """
        Sets the subtotal of this Cart.

        :param subtotal: The subtotal of this Cart.
        :type: float
        """

        self._subtotal = subtotal

    @property
    def updated(self):
        """
        Gets the updated of this Cart.

        :return: The updated of this Cart.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Cart.

        :param updated: The updated of this Cart.
        :type: int
        """

        self._updated = updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Cart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
