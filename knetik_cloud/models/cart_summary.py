# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CartSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_date': 'int',
        'currency_code': 'str',
        'grand_total': 'float',
        'id': 'str',
        'invoice_id': 'float',
        'items_in_cart': 'int',
        'status': 'str',
        'subtotal': 'float'
    }

    attribute_map = {
        'created_date': 'created_date',
        'currency_code': 'currency_code',
        'grand_total': 'grand_total',
        'id': 'id',
        'invoice_id': 'invoice_id',
        'items_in_cart': 'items_in_cart',
        'status': 'status',
        'subtotal': 'subtotal'
    }

    def __init__(self, created_date=None, currency_code=None, grand_total=None, id=None, invoice_id=None, items_in_cart=None, status=None, subtotal=None):
        """
        CartSummary - a model defined in Swagger
        """

        self._created_date = None
        self._currency_code = None
        self._grand_total = None
        self._id = None
        self._invoice_id = None
        self._items_in_cart = None
        self._status = None
        self._subtotal = None

        if created_date is not None:
          self.created_date = created_date
        if currency_code is not None:
          self.currency_code = currency_code
        if grand_total is not None:
          self.grand_total = grand_total
        if id is not None:
          self.id = id
        if invoice_id is not None:
          self.invoice_id = invoice_id
        if items_in_cart is not None:
          self.items_in_cart = items_in_cart
        if status is not None:
          self.status = status
        if subtotal is not None:
          self.subtotal = subtotal

    @property
    def created_date(self):
        """
        Gets the created_date of this CartSummary.
        The date/time this resource was created in seconds since unix epoch

        :return: The created_date of this CartSummary.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this CartSummary.
        The date/time this resource was created in seconds since unix epoch

        :param created_date: The created_date of this CartSummary.
        :type: int
        """

        self._created_date = created_date

    @property
    def currency_code(self):
        """
        Gets the currency_code of this CartSummary.
        The unique id code for the currency used in the cart

        :return: The currency_code of this CartSummary.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """
        Sets the currency_code of this CartSummary.
        The unique id code for the currency used in the cart

        :param currency_code: The currency_code of this CartSummary.
        :type: str
        """

        self._currency_code = currency_code

    @property
    def grand_total(self):
        """
        Gets the grand_total of this CartSummary.
        The grand total for the cart

        :return: The grand_total of this CartSummary.
        :rtype: float
        """
        return self._grand_total

    @grand_total.setter
    def grand_total(self, grand_total):
        """
        Sets the grand_total of this CartSummary.
        The grand total for the cart

        :param grand_total: The grand_total of this CartSummary.
        :type: float
        """

        self._grand_total = grand_total

    @property
    def id(self):
        """
        Gets the id of this CartSummary.
        The unique ID for the cart

        :return: The id of this CartSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CartSummary.
        The unique ID for the cart

        :param id: The id of this CartSummary.
        :type: str
        """

        self._id = id

    @property
    def invoice_id(self):
        """
        Gets the invoice_id of this CartSummary.
        The ID of the invoice associated with this cart

        :return: The invoice_id of this CartSummary.
        :rtype: float
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """
        Sets the invoice_id of this CartSummary.
        The ID of the invoice associated with this cart

        :param invoice_id: The invoice_id of this CartSummary.
        :type: float
        """

        self._invoice_id = invoice_id

    @property
    def items_in_cart(self):
        """
        Gets the items_in_cart of this CartSummary.
        The number of items in the cart

        :return: The items_in_cart of this CartSummary.
        :rtype: int
        """
        return self._items_in_cart

    @items_in_cart.setter
    def items_in_cart(self, items_in_cart):
        """
        Sets the items_in_cart of this CartSummary.
        The number of items in the cart

        :param items_in_cart: The items_in_cart of this CartSummary.
        :type: int
        """

        self._items_in_cart = items_in_cart

    @property
    def status(self):
        """
        Gets the status of this CartSummary.
        The status of the cart

        :return: The status of this CartSummary.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CartSummary.
        The status of the cart

        :param status: The status of this CartSummary.
        :type: str
        """
        allowed_values = ["active", "processing", "closed", "onhold"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subtotal(self):
        """
        Gets the subtotal of this CartSummary.
        The subtotal of all items in the cart

        :return: The subtotal of this CartSummary.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """
        Sets the subtotal of this CartSummary.
        The subtotal of all items in the cart

        :param subtotal: The subtotal of this CartSummary.
        :type: float
        """

        self._subtotal = subtotal

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CartSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
