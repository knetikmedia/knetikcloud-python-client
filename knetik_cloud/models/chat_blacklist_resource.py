# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ChatBlacklistResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blacklisted_user': 'SimpleUserResource',
        'created_date': 'int',
        'id': 'str',
        'user_id': 'int'
    }

    attribute_map = {
        'blacklisted_user': 'blacklisted_user',
        'created_date': 'created_date',
        'id': 'id',
        'user_id': 'user_id'
    }

    def __init__(self, blacklisted_user=None, created_date=None, id=None, user_id=None):
        """
        ChatBlacklistResource - a model defined in Swagger
        """

        self._blacklisted_user = None
        self._created_date = None
        self._id = None
        self._user_id = None
        self.discriminator = None

        if blacklisted_user is not None:
          self.blacklisted_user = blacklisted_user
        if created_date is not None:
          self.created_date = created_date
        if id is not None:
          self.id = id
        if user_id is not None:
          self.user_id = user_id

    @property
    def blacklisted_user(self):
        """
        Gets the blacklisted_user of this ChatBlacklistResource.
        The user that is blacklisted

        :return: The blacklisted_user of this ChatBlacklistResource.
        :rtype: SimpleUserResource
        """
        return self._blacklisted_user

    @blacklisted_user.setter
    def blacklisted_user(self, blacklisted_user):
        """
        Sets the blacklisted_user of this ChatBlacklistResource.
        The user that is blacklisted

        :param blacklisted_user: The blacklisted_user of this ChatBlacklistResource.
        :type: SimpleUserResource
        """

        self._blacklisted_user = blacklisted_user

    @property
    def created_date(self):
        """
        Gets the created_date of this ChatBlacklistResource.
        The date the user was blacklisted

        :return: The created_date of this ChatBlacklistResource.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this ChatBlacklistResource.
        The date the user was blacklisted

        :param created_date: The created_date of this ChatBlacklistResource.
        :type: int
        """

        self._created_date = created_date

    @property
    def id(self):
        """
        Gets the id of this ChatBlacklistResource.
        The unique ID for this chat message blacklist

        :return: The id of this ChatBlacklistResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ChatBlacklistResource.
        The unique ID for this chat message blacklist

        :param id: The id of this ChatBlacklistResource.
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """
        Gets the user_id of this ChatBlacklistResource.
        The user that has blacklisted someone

        :return: The user_id of this ChatBlacklistResource.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ChatBlacklistResource.
        The user that has blacklisted someone

        :param user_id: The user_id of this ChatBlacklistResource.
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ChatBlacklistResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
