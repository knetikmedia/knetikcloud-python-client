# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ChatThreadResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_users': 'int',
        'count': 'int',
        'created_date': 'int',
        'id': 'str',
        'recipient_id': 'str',
        'recipient_type': 'str',
        'subject': 'str',
        'updated_date': 'int'
    }

    attribute_map = {
        'active_users': 'active_users',
        'count': 'count',
        'created_date': 'created_date',
        'id': 'id',
        'recipient_id': 'recipient_id',
        'recipient_type': 'recipient_type',
        'subject': 'subject',
        'updated_date': 'updated_date'
    }

    def __init__(self, active_users=None, count=None, created_date=None, id=None, recipient_id=None, recipient_type=None, subject=None, updated_date=None):
        """
        ChatThreadResource - a model defined in Swagger
        """

        self._active_users = None
        self._count = None
        self._created_date = None
        self._id = None
        self._recipient_id = None
        self._recipient_type = None
        self._subject = None
        self._updated_date = None
        self.discriminator = None

        if active_users is not None:
          self.active_users = active_users
        if count is not None:
          self.count = count
        if created_date is not None:
          self.created_date = created_date
        if id is not None:
          self.id = id
        self.recipient_id = recipient_id
        self.recipient_type = recipient_type
        if subject is not None:
          self.subject = subject
        if updated_date is not None:
          self.updated_date = updated_date

    @property
    def active_users(self):
        """
        Gets the active_users of this ChatThreadResource.
        The number of active users in the thread

        :return: The active_users of this ChatThreadResource.
        :rtype: int
        """
        return self._active_users

    @active_users.setter
    def active_users(self, active_users):
        """
        Sets the active_users of this ChatThreadResource.
        The number of active users in the thread

        :param active_users: The active_users of this ChatThreadResource.
        :type: int
        """

        self._active_users = active_users

    @property
    def count(self):
        """
        Gets the count of this ChatThreadResource.
        The number of messages in the thread

        :return: The count of this ChatThreadResource.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this ChatThreadResource.
        The number of messages in the thread

        :param count: The count of this ChatThreadResource.
        :type: int
        """

        self._count = count

    @property
    def created_date(self):
        """
        Gets the created_date of this ChatThreadResource.
        The date the thread was created

        :return: The created_date of this ChatThreadResource.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this ChatThreadResource.
        The date the thread was created

        :param created_date: The created_date of this ChatThreadResource.
        :type: int
        """

        self._created_date = created_date

    @property
    def id(self):
        """
        Gets the id of this ChatThreadResource.
        The id for this thread

        :return: The id of this ChatThreadResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ChatThreadResource.
        The id for this thread

        :param id: The id of this ChatThreadResource.
        :type: str
        """

        self._id = id

    @property
    def recipient_id(self):
        """
        Gets the recipient_id of this ChatThreadResource.
        The id of the recipient

        :return: The recipient_id of this ChatThreadResource.
        :rtype: str
        """
        return self._recipient_id

    @recipient_id.setter
    def recipient_id(self, recipient_id):
        """
        Sets the recipient_id of this ChatThreadResource.
        The id of the recipient

        :param recipient_id: The recipient_id of this ChatThreadResource.
        :type: str
        """
        if recipient_id is None:
            raise ValueError("Invalid value for `recipient_id`, must not be `None`")

        self._recipient_id = recipient_id

    @property
    def recipient_type(self):
        """
        Gets the recipient_type of this ChatThreadResource.
        The recipient type of the thread

        :return: The recipient_type of this ChatThreadResource.
        :rtype: str
        """
        return self._recipient_type

    @recipient_type.setter
    def recipient_type(self, recipient_type):
        """
        Sets the recipient_type of this ChatThreadResource.
        The recipient type of the thread

        :param recipient_type: The recipient_type of this ChatThreadResource.
        :type: str
        """
        if recipient_type is None:
            raise ValueError("Invalid value for `recipient_type`, must not be `None`")
        allowed_values = ["user", "topic"]
        if recipient_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recipient_type` ({0}), must be one of {1}"
                .format(recipient_type, allowed_values)
            )

        self._recipient_type = recipient_type

    @property
    def subject(self):
        """
        Gets the subject of this ChatThreadResource.
        The subject of the thread

        :return: The subject of this ChatThreadResource.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this ChatThreadResource.
        The subject of the thread

        :param subject: The subject of this ChatThreadResource.
        :type: str
        """

        self._subject = subject

    @property
    def updated_date(self):
        """
        Gets the updated_date of this ChatThreadResource.
        The date the thread was updated

        :return: The updated_date of this ChatThreadResource.
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """
        Sets the updated_date of this ChatThreadResource.
        The date the thread was updated

        :param updated_date: The updated_date of this ChatThreadResource.
        :type: int
        """

        self._updated_date = updated_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ChatThreadResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
