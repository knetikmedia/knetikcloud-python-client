# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CoreActivityOccurrenceSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boot_in_play': 'bool',
        'custom_launch_address': 'str',
        'host_status_control': 'bool',
        'join_in_play': 'bool',
        'leave_in_play': 'bool',
        'max_players': 'int',
        'min_players': 'int',
        'non_host_status_control': 'bool',
        'results_trust': 'str'
    }

    attribute_map = {
        'boot_in_play': 'boot_in_play',
        'custom_launch_address': 'custom_launch_address',
        'host_status_control': 'host_status_control',
        'join_in_play': 'join_in_play',
        'leave_in_play': 'leave_in_play',
        'max_players': 'max_players',
        'min_players': 'min_players',
        'non_host_status_control': 'non_host_status_control',
        'results_trust': 'results_trust'
    }

    def __init__(self, boot_in_play=None, custom_launch_address=None, host_status_control=None, join_in_play=None, leave_in_play=None, max_players=None, min_players=None, non_host_status_control=None, results_trust=None):
        """
        CoreActivityOccurrenceSettings - a model defined in Swagger
        """

        self._boot_in_play = None
        self._custom_launch_address = None
        self._host_status_control = None
        self._join_in_play = None
        self._leave_in_play = None
        self._max_players = None
        self._min_players = None
        self._non_host_status_control = None
        self._results_trust = None
        self.discriminator = None

        if boot_in_play is not None:
          self.boot_in_play = boot_in_play
        if custom_launch_address is not None:
          self.custom_launch_address = custom_launch_address
        if host_status_control is not None:
          self.host_status_control = host_status_control
        if join_in_play is not None:
          self.join_in_play = join_in_play
        if leave_in_play is not None:
          self.leave_in_play = leave_in_play
        if max_players is not None:
          self.max_players = max_players
        if min_players is not None:
          self.min_players = min_players
        if non_host_status_control is not None:
          self.non_host_status_control = non_host_status_control
        if results_trust is not None:
          self.results_trust = results_trust

    @property
    def boot_in_play(self):
        """
        Gets the boot_in_play of this CoreActivityOccurrenceSettings.
        Whether the host can boot another user while the status is PLAYING. Must be false or null unless this setting is true in activity (or challenge if applicable). Null to inherit

        :return: The boot_in_play of this CoreActivityOccurrenceSettings.
        :rtype: bool
        """
        return self._boot_in_play

    @boot_in_play.setter
    def boot_in_play(self, boot_in_play):
        """
        Sets the boot_in_play of this CoreActivityOccurrenceSettings.
        Whether the host can boot another user while the status is PLAYING. Must be false or null unless this setting is true in activity (or challenge if applicable). Null to inherit

        :param boot_in_play: The boot_in_play of this CoreActivityOccurrenceSettings.
        :type: bool
        """

        self._boot_in_play = boot_in_play

    @property
    def custom_launch_address(self):
        """
        Gets the custom_launch_address of this CoreActivityOccurrenceSettings.
        A custom address (url, ip or whatever is needed in your game) that users should connect to to play in this occurrence rather than the usual game server. Could be the ip address of the host for peer-to-peer play. Can only be set if the activity/challenge custom_launch_address_allowed is true. Max length: 255

        :return: The custom_launch_address of this CoreActivityOccurrenceSettings.
        :rtype: str
        """
        return self._custom_launch_address

    @custom_launch_address.setter
    def custom_launch_address(self, custom_launch_address):
        """
        Sets the custom_launch_address of this CoreActivityOccurrenceSettings.
        A custom address (url, ip or whatever is needed in your game) that users should connect to to play in this occurrence rather than the usual game server. Could be the ip address of the host for peer-to-peer play. Can only be set if the activity/challenge custom_launch_address_allowed is true. Max length: 255

        :param custom_launch_address: The custom_launch_address of this CoreActivityOccurrenceSettings.
        :type: str
        """

        self._custom_launch_address = custom_launch_address

    @property
    def host_status_control(self):
        """
        Gets the host_status_control of this CoreActivityOccurrenceSettings.
        Restriction for whether the host has control of the status once the game launches. If false they can only manage the game before (when setup and open). Cannot be true if activity/challenge has it false. Null to inherit

        :return: The host_status_control of this CoreActivityOccurrenceSettings.
        :rtype: bool
        """
        return self._host_status_control

    @host_status_control.setter
    def host_status_control(self, host_status_control):
        """
        Sets the host_status_control of this CoreActivityOccurrenceSettings.
        Restriction for whether the host has control of the status once the game launches. If false they can only manage the game before (when setup and open). Cannot be true if activity/challenge has it false. Null to inherit

        :param host_status_control: The host_status_control of this CoreActivityOccurrenceSettings.
        :type: bool
        """

        self._host_status_control = host_status_control

    @property
    def join_in_play(self):
        """
        Gets the join_in_play of this CoreActivityOccurrenceSettings.
        Whether users can join while the status is PLAYING. Must be false or null unless this setting is true in activity (or challenge if applicable). Null to inherit

        :return: The join_in_play of this CoreActivityOccurrenceSettings.
        :rtype: bool
        """
        return self._join_in_play

    @join_in_play.setter
    def join_in_play(self, join_in_play):
        """
        Sets the join_in_play of this CoreActivityOccurrenceSettings.
        Whether users can join while the status is PLAYING. Must be false or null unless this setting is true in activity (or challenge if applicable). Null to inherit

        :param join_in_play: The join_in_play of this CoreActivityOccurrenceSettings.
        :type: bool
        """

        self._join_in_play = join_in_play

    @property
    def leave_in_play(self):
        """
        Gets the leave_in_play of this CoreActivityOccurrenceSettings.
        Whether users can leave while the status is PLAYING. Must be false or null unless this setting is true in activity (or challenge if applicable). Null to inherit

        :return: The leave_in_play of this CoreActivityOccurrenceSettings.
        :rtype: bool
        """
        return self._leave_in_play

    @leave_in_play.setter
    def leave_in_play(self, leave_in_play):
        """
        Sets the leave_in_play of this CoreActivityOccurrenceSettings.
        Whether users can leave while the status is PLAYING. Must be false or null unless this setting is true in activity (or challenge if applicable). Null to inherit

        :param leave_in_play: The leave_in_play of this CoreActivityOccurrenceSettings.
        :type: bool
        """

        self._leave_in_play = leave_in_play

    @property
    def max_players(self):
        """
        Gets the max_players of this CoreActivityOccurrenceSettings.
        The maximum number of players the game can hold. Must be equal or less than activity (or must match challenge if applicable)

        :return: The max_players of this CoreActivityOccurrenceSettings.
        :rtype: int
        """
        return self._max_players

    @max_players.setter
    def max_players(self, max_players):
        """
        Sets the max_players of this CoreActivityOccurrenceSettings.
        The maximum number of players the game can hold. Must be equal or less than activity (or must match challenge if applicable)

        :param max_players: The max_players of this CoreActivityOccurrenceSettings.
        :type: int
        """

        self._max_players = max_players

    @property
    def min_players(self):
        """
        Gets the min_players of this CoreActivityOccurrenceSettings.
        The minimum number of players the game can hold. Must be equal or greater than activity (or must match challenge if applicable)

        :return: The min_players of this CoreActivityOccurrenceSettings.
        :rtype: int
        """
        return self._min_players

    @min_players.setter
    def min_players(self, min_players):
        """
        Sets the min_players of this CoreActivityOccurrenceSettings.
        The minimum number of players the game can hold. Must be equal or greater than activity (or must match challenge if applicable)

        :param min_players: The min_players of this CoreActivityOccurrenceSettings.
        :type: int
        """

        self._min_players = min_players

    @property
    def non_host_status_control(self):
        """
        Gets the non_host_status_control of this CoreActivityOccurrenceSettings.
        Restriction for whether the non-host players can control of the status in place of the host. Default: false

        :return: The non_host_status_control of this CoreActivityOccurrenceSettings.
        :rtype: bool
        """
        return self._non_host_status_control

    @non_host_status_control.setter
    def non_host_status_control(self, non_host_status_control):
        """
        Sets the non_host_status_control of this CoreActivityOccurrenceSettings.
        Restriction for whether the non-host players can control of the status in place of the host. Default: false

        :param non_host_status_control: The non_host_status_control of this CoreActivityOccurrenceSettings.
        :type: bool
        """

        self._non_host_status_control = non_host_status_control

    @property
    def results_trust(self):
        """
        Gets the results_trust of this CoreActivityOccurrenceSettings.
        Restriction for who is able to report game end and results. Admin is always able to send results as well. Must be equal or more restrictive than activity (or must match challenge if applicable). Default inherits

        :return: The results_trust of this CoreActivityOccurrenceSettings.
        :rtype: str
        """
        return self._results_trust

    @results_trust.setter
    def results_trust(self, results_trust):
        """
        Sets the results_trust of this CoreActivityOccurrenceSettings.
        Restriction for who is able to report game end and results. Admin is always able to send results as well. Must be equal or more restrictive than activity (or must match challenge if applicable). Default inherits

        :param results_trust: The results_trust of this CoreActivityOccurrenceSettings.
        :type: str
        """
        allowed_values = ["none", "host", "all"]
        if results_trust not in allowed_values:
            raise ValueError(
                "Invalid value for `results_trust` ({0}), must be one of {1}"
                .format(results_trust, allowed_values)
            )

        self._results_trust = results_trust

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CoreActivityOccurrenceSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
