# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CoreActivitySettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boot_in_play': 'bool',
        'custom_launch_address_allowed': 'bool',
        'host_option': 'str',
        'host_status_control': 'bool',
        'join_in_play': 'bool',
        'leave_in_play': 'bool',
        'max_players': 'int',
        'min_players': 'int',
        'results_trust': 'str'
    }

    attribute_map = {
        'boot_in_play': 'boot_in_play',
        'custom_launch_address_allowed': 'custom_launch_address_allowed',
        'host_option': 'host_option',
        'host_status_control': 'host_status_control',
        'join_in_play': 'join_in_play',
        'leave_in_play': 'leave_in_play',
        'max_players': 'max_players',
        'min_players': 'min_players',
        'results_trust': 'results_trust'
    }

    def __init__(self, boot_in_play=None, custom_launch_address_allowed=None, host_option=None, host_status_control=None, join_in_play=None, leave_in_play=None, max_players=None, min_players=None, results_trust=None):
        """
        CoreActivitySettings - a model defined in Swagger
        """

        self._boot_in_play = None
        self._custom_launch_address_allowed = None
        self._host_option = None
        self._host_status_control = None
        self._join_in_play = None
        self._leave_in_play = None
        self._max_players = None
        self._min_players = None
        self._results_trust = None
        self.discriminator = None

        if boot_in_play is not None:
          self.boot_in_play = boot_in_play
        if custom_launch_address_allowed is not None:
          self.custom_launch_address_allowed = custom_launch_address_allowed
        if host_option is not None:
          self.host_option = host_option
        if host_status_control is not None:
          self.host_status_control = host_status_control
        if join_in_play is not None:
          self.join_in_play = join_in_play
        if leave_in_play is not None:
          self.leave_in_play = leave_in_play
        if max_players is not None:
          self.max_players = max_players
        if min_players is not None:
          self.min_players = min_players
        if results_trust is not None:
          self.results_trust = results_trust

    @property
    def boot_in_play(self):
        """
        Gets the boot_in_play of this CoreActivitySettings.
        Whether the host can boot a user while the status is PLAYING. Default false

        :return: The boot_in_play of this CoreActivitySettings.
        :rtype: bool
        """
        return self._boot_in_play

    @boot_in_play.setter
    def boot_in_play(self, boot_in_play):
        """
        Sets the boot_in_play of this CoreActivitySettings.
        Whether the host can boot a user while the status is PLAYING. Default false

        :param boot_in_play: The boot_in_play of this CoreActivitySettings.
        :type: bool
        """

        self._boot_in_play = boot_in_play

    @property
    def custom_launch_address_allowed(self):
        """
        Gets the custom_launch_address_allowed of this CoreActivitySettings.
        Restriction for whether the host creating an occurrence can specify a custom launch address (such as their own ip address). Default 'false'

        :return: The custom_launch_address_allowed of this CoreActivitySettings.
        :rtype: bool
        """
        return self._custom_launch_address_allowed

    @custom_launch_address_allowed.setter
    def custom_launch_address_allowed(self, custom_launch_address_allowed):
        """
        Sets the custom_launch_address_allowed of this CoreActivitySettings.
        Restriction for whether the host creating an occurrence can specify a custom launch address (such as their own ip address). Default 'false'

        :param custom_launch_address_allowed: The custom_launch_address_allowed of this CoreActivitySettings.
        :type: bool
        """

        self._custom_launch_address_allowed = custom_launch_address_allowed

    @property
    def host_option(self):
        """
        Gets the host_option of this CoreActivitySettings.
        Restriction for who can host an occurrence. admin disallows regular users, player means the user must also be a player in the occurrence if not admin, non-player means the user has the option to host without being a player. Default 'player'

        :return: The host_option of this CoreActivitySettings.
        :rtype: str
        """
        return self._host_option

    @host_option.setter
    def host_option(self, host_option):
        """
        Sets the host_option of this CoreActivitySettings.
        Restriction for who can host an occurrence. admin disallows regular users, player means the user must also be a player in the occurrence if not admin, non-player means the user has the option to host without being a player. Default 'player'

        :param host_option: The host_option of this CoreActivitySettings.
        :type: str
        """
        allowed_values = ["admin_only", "player", "non_player"]
        if host_option not in allowed_values:
            raise ValueError(
                "Invalid value for `host_option` ({0}), must be one of {1}"
                .format(host_option, allowed_values)
            )

        self._host_option = host_option

    @property
    def host_status_control(self):
        """
        Gets the host_status_control of this CoreActivitySettings.
        Restriction for whether the host has control of the status once the game launches. If false they can only manage the game before (when setup and open). Default 'false'

        :return: The host_status_control of this CoreActivitySettings.
        :rtype: bool
        """
        return self._host_status_control

    @host_status_control.setter
    def host_status_control(self, host_status_control):
        """
        Sets the host_status_control of this CoreActivitySettings.
        Restriction for whether the host has control of the status once the game launches. If false they can only manage the game before (when setup and open). Default 'false'

        :param host_status_control: The host_status_control of this CoreActivitySettings.
        :type: bool
        """

        self._host_status_control = host_status_control

    @property
    def join_in_play(self):
        """
        Gets the join_in_play of this CoreActivitySettings.
        Whether users can join while the status is PLAYING. Default false

        :return: The join_in_play of this CoreActivitySettings.
        :rtype: bool
        """
        return self._join_in_play

    @join_in_play.setter
    def join_in_play(self, join_in_play):
        """
        Sets the join_in_play of this CoreActivitySettings.
        Whether users can join while the status is PLAYING. Default false

        :param join_in_play: The join_in_play of this CoreActivitySettings.
        :type: bool
        """

        self._join_in_play = join_in_play

    @property
    def leave_in_play(self):
        """
        Gets the leave_in_play of this CoreActivitySettings.
        Whether users can leave while the status is PLAYING. Default false

        :return: The leave_in_play of this CoreActivitySettings.
        :rtype: bool
        """
        return self._leave_in_play

    @leave_in_play.setter
    def leave_in_play(self, leave_in_play):
        """
        Sets the leave_in_play of this CoreActivitySettings.
        Whether users can leave while the status is PLAYING. Default false

        :param leave_in_play: The leave_in_play of this CoreActivitySettings.
        :type: bool
        """

        self._leave_in_play = leave_in_play

    @property
    def max_players(self):
        """
        Gets the max_players of this CoreActivitySettings.
        The maximum number of players the game can hold

        :return: The max_players of this CoreActivitySettings.
        :rtype: int
        """
        return self._max_players

    @max_players.setter
    def max_players(self, max_players):
        """
        Sets the max_players of this CoreActivitySettings.
        The maximum number of players the game can hold

        :param max_players: The max_players of this CoreActivitySettings.
        :type: int
        """

        self._max_players = max_players

    @property
    def min_players(self):
        """
        Gets the min_players of this CoreActivitySettings.
        The minimum number of players the game can hold

        :return: The min_players of this CoreActivitySettings.
        :rtype: int
        """
        return self._min_players

    @min_players.setter
    def min_players(self, min_players):
        """
        Sets the min_players of this CoreActivitySettings.
        The minimum number of players the game can hold

        :param min_players: The min_players of this CoreActivitySettings.
        :type: int
        """

        self._min_players = min_players

    @property
    def results_trust(self):
        """
        Gets the results_trust of this CoreActivitySettings.
        Restriction for who is able to report game end and results. Admin is always able to send results as well. Default 'none'

        :return: The results_trust of this CoreActivitySettings.
        :rtype: str
        """
        return self._results_trust

    @results_trust.setter
    def results_trust(self, results_trust):
        """
        Sets the results_trust of this CoreActivitySettings.
        Restriction for who is able to report game end and results. Admin is always able to send results as well. Default 'none'

        :param results_trust: The results_trust of this CoreActivitySettings.
        :type: str
        """
        allowed_values = ["none", "host", "all"]
        if results_trust not in allowed_values:
            raise ValueError(
                "Invalid value for `results_trust` ({0}), must be one of {1}"
                .format(results_trust, allowed_values)
            )

        self._results_trust = results_trust

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CoreActivitySettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
