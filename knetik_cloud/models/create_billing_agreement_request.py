# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CreateBillingAgreementRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cancel_url=None, return_url=None, user_id=None):
        """
        CreateBillingAgreementRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cancel_url': 'str',
            'return_url': 'str',
            'user_id': 'int'
        }

        self.attribute_map = {
            'cancel_url': 'cancel_url',
            'return_url': 'return_url',
            'user_id': 'user_id'
        }

        self._cancel_url = cancel_url
        self._return_url = return_url
        self._user_id = user_id

    @property
    def cancel_url(self):
        """
        Gets the cancel_url of this CreateBillingAgreementRequest.
        The endpoint URL to which PayPal should forward the user if they cancel (do not accept) the agreement

        :return: The cancel_url of this CreateBillingAgreementRequest.
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """
        Sets the cancel_url of this CreateBillingAgreementRequest.
        The endpoint URL to which PayPal should forward the user if they cancel (do not accept) the agreement

        :param cancel_url: The cancel_url of this CreateBillingAgreementRequest.
        :type: str
        """
        if cancel_url is None:
            raise ValueError("Invalid value for `cancel_url`, must not be `None`")

        self._cancel_url = cancel_url

    @property
    def return_url(self):
        """
        Gets the return_url of this CreateBillingAgreementRequest.
        The endpoint URL to which PayPal should forward the user after they accept the agreement. This endpoint will receive information needed for the next step

        :return: The return_url of this CreateBillingAgreementRequest.
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """
        Sets the return_url of this CreateBillingAgreementRequest.
        The endpoint URL to which PayPal should forward the user after they accept the agreement. This endpoint will receive information needed for the next step

        :param return_url: The return_url of this CreateBillingAgreementRequest.
        :type: str
        """
        if return_url is None:
            raise ValueError("Invalid value for `return_url`, must not be `None`")

        self._return_url = return_url

    @property
    def user_id(self):
        """
        Gets the user_id of this CreateBillingAgreementRequest.
        The ID of the user. Defaults to the logged in user

        :return: The user_id of this CreateBillingAgreementRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this CreateBillingAgreementRequest.
        The ID of the user. Defaults to the logged in user

        :param user_id: The user_id of this CreateBillingAgreementRequest.
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CreateBillingAgreementRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
