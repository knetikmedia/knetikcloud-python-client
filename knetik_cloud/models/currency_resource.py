# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CurrencyResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'code': 'str',
        'created_date': 'int',
        'factor': 'float',
        'icon': 'str',
        'name': 'str',
        'type': 'str',
        'updated_date': 'int'
    }

    attribute_map = {
        'active': 'active',
        'code': 'code',
        'created_date': 'created_date',
        'factor': 'factor',
        'icon': 'icon',
        'name': 'name',
        'type': 'type',
        'updated_date': 'updated_date'
    }

    def __init__(self, active=None, code=None, created_date=None, factor=None, icon=None, name=None, type=None, updated_date=None):
        """
        CurrencyResource - a model defined in Swagger
        """

        self._active = None
        self._code = None
        self._created_date = None
        self._factor = None
        self._icon = None
        self._name = None
        self._type = None
        self._updated_date = None
        self.discriminator = None

        if active is not None:
          self.active = active
        self.code = code
        if created_date is not None:
          self.created_date = created_date
        self.factor = factor
        if icon is not None:
          self.icon = icon
        self.name = name
        if type is not None:
          self.type = type
        if updated_date is not None:
          self.updated_date = updated_date

    @property
    def active(self):
        """
        Gets the active of this CurrencyResource.
        Whether the currency is active. Default true

        :return: The active of this CurrencyResource.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this CurrencyResource.
        Whether the currency is active. Default true

        :param active: The active of this CurrencyResource.
        :type: bool
        """

        self._active = active

    @property
    def code(self):
        """
        Gets the code of this CurrencyResource.
        The unique id code for the currency. Maximum 5 characters

        :return: The code of this CurrencyResource.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this CurrencyResource.
        The unique id code for the currency. Maximum 5 characters

        :param code: The code of this CurrencyResource.
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def created_date(self):
        """
        Gets the created_date of this CurrencyResource.
        The unix timestamp in seconds the currency was added to the system

        :return: The created_date of this CurrencyResource.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this CurrencyResource.
        The unix timestamp in seconds the currency was added to the system

        :param created_date: The created_date of this CurrencyResource.
        :type: int
        """

        self._created_date = created_date

    @property
    def factor(self):
        """
        Gets the factor of this CurrencyResource.
        The decimal to multiply the system base currency (from config 'currency') to localize to this one. Should be 1 for the base currency itself.

        :return: The factor of this CurrencyResource.
        :rtype: float
        """
        return self._factor

    @factor.setter
    def factor(self, factor):
        """
        Sets the factor of this CurrencyResource.
        The decimal to multiply the system base currency (from config 'currency') to localize to this one. Should be 1 for the base currency itself.

        :param factor: The factor of this CurrencyResource.
        :type: float
        """
        if factor is None:
            raise ValueError("Invalid value for `factor`, must not be `None`")

        self._factor = factor

    @property
    def icon(self):
        """
        Gets the icon of this CurrencyResource.
        The url for an icon of the currency

        :return: The icon of this CurrencyResource.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """
        Sets the icon of this CurrencyResource.
        The url for an icon of the currency

        :param icon: The icon of this CurrencyResource.
        :type: str
        """

        self._icon = icon

    @property
    def name(self):
        """
        Gets the name of this CurrencyResource.
        The name of the currency

        :return: The name of this CurrencyResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CurrencyResource.
        The name of the currency

        :param name: The name of this CurrencyResource.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this CurrencyResource.
        The type of currency. Default 'real'

        :return: The type of this CurrencyResource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CurrencyResource.
        The type of currency. Default 'real'

        :param type: The type of this CurrencyResource.
        :type: str
        """
        allowed_values = ["real", "virtual"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_date(self):
        """
        Gets the updated_date of this CurrencyResource.
        The unix timestamp in seconds the currency was last updated in the system.

        :return: The updated_date of this CurrencyResource.
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """
        Sets the updated_date of this CurrencyResource.
        The unix timestamp in seconds the currency was last updated in the system.

        :param updated_date: The updated_date of this CurrencyResource.
        :type: int
        """

        self._updated_date = updated_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CurrencyResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
