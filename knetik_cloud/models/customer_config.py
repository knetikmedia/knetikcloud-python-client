# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomerConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aliases': 'str',
        'database': 'DatabaseConfig',
        'name': 'str',
        's3_config': 'S3Config'
    }

    attribute_map = {
        'aliases': 'aliases',
        'database': 'database',
        'name': 'name',
        's3_config': 's3_config'
    }

    def __init__(self, aliases=None, database=None, name=None, s3_config=None):
        """
        CustomerConfig - a model defined in Swagger
        """

        self._aliases = None
        self._database = None
        self._name = None
        self._s3_config = None
        self.discriminator = None

        if aliases is not None:
          self.aliases = aliases
        if database is not None:
          self.database = database
        if name is not None:
          self.name = name
        if s3_config is not None:
          self.s3_config = s3_config

    @property
    def aliases(self):
        """
        Gets the aliases of this CustomerConfig.

        :return: The aliases of this CustomerConfig.
        :rtype: str
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """
        Sets the aliases of this CustomerConfig.

        :param aliases: The aliases of this CustomerConfig.
        :type: str
        """

        self._aliases = aliases

    @property
    def database(self):
        """
        Gets the database of this CustomerConfig.

        :return: The database of this CustomerConfig.
        :rtype: DatabaseConfig
        """
        return self._database

    @database.setter
    def database(self, database):
        """
        Sets the database of this CustomerConfig.

        :param database: The database of this CustomerConfig.
        :type: DatabaseConfig
        """

        self._database = database

    @property
    def name(self):
        """
        Gets the name of this CustomerConfig.

        :return: The name of this CustomerConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CustomerConfig.

        :param name: The name of this CustomerConfig.
        :type: str
        """

        self._name = name

    @property
    def s3_config(self):
        """
        Gets the s3_config of this CustomerConfig.

        :return: The s3_config of this CustomerConfig.
        :rtype: S3Config
        """
        return self._s3_config

    @s3_config.setter
    def s3_config(self, s3_config):
        """
        Sets the s3_config of this CustomerConfig.

        :param s3_config: The s3_config of this CustomerConfig.
        :type: S3Config
        """

        self._s3_config = s3_config

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomerConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
