# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DispositionResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'str',
        'context_id': 'str',
        'created_date': 'int',
        'id': 'int',
        'name': 'str',
        'user': 'SimpleUserResource'
    }

    attribute_map = {
        'context': 'context',
        'context_id': 'context_id',
        'created_date': 'created_date',
        'id': 'id',
        'name': 'name',
        'user': 'user'
    }

    def __init__(self, context=None, context_id=None, created_date=None, id=None, name=None, user=None):
        """
        DispositionResource - a model defined in Swagger
        """

        self._context = None
        self._context_id = None
        self._created_date = None
        self._id = None
        self._name = None
        self._user = None

        if context is not None:
          self.context = context
        if context_id is not None:
          self.context_id = context_id
        if created_date is not None:
          self.created_date = created_date
        if id is not None:
          self.id = id
        self.name = name
        if user is not None:
          self.user = user

    @property
    def context(self):
        """
        Gets the context of this DispositionResource.
        The context of that resource. Required when passed to /dispositions rather than context specific endpoint

        :return: The context of this DispositionResource.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this DispositionResource.
        The context of that resource. Required when passed to /dispositions rather than context specific endpoint

        :param context: The context of this DispositionResource.
        :type: str
        """

        self._context = context

    @property
    def context_id(self):
        """
        Gets the context_id of this DispositionResource.
        The context_id of that resource. Required when passed to /dispositions rather than context specific endpoint

        :return: The context_id of this DispositionResource.
        :rtype: str
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """
        Sets the context_id of this DispositionResource.
        The context_id of that resource. Required when passed to /dispositions rather than context specific endpoint

        :param context_id: The context_id of this DispositionResource.
        :type: str
        """

        self._context_id = context_id

    @property
    def created_date(self):
        """
        Gets the created_date of this DispositionResource.
        The date/time this resource was created in seconds since unix epoch

        :return: The created_date of this DispositionResource.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this DispositionResource.
        The date/time this resource was created in seconds since unix epoch

        :param created_date: The created_date of this DispositionResource.
        :type: int
        """

        self._created_date = created_date

    @property
    def id(self):
        """
        Gets the id of this DispositionResource.
        The unique ID for that resource

        :return: The id of this DispositionResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DispositionResource.
        The unique ID for that resource

        :param id: The id of this DispositionResource.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this DispositionResource.
        The name of the disposition, 1-20 characters. (ex: like/dislike/favorite, etc)

        :return: The name of this DispositionResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DispositionResource.
        The name of the disposition, 1-20 characters. (ex: like/dislike/favorite, etc)

        :param name: The name of this DispositionResource.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def user(self):
        """
        Gets the user of this DispositionResource.
        The user

        :return: The user of this DispositionResource.
        :rtype: SimpleUserResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this DispositionResource.
        The user

        :param user: The user of this DispositionResource.
        :type: SimpleUserResource
        """

        self._user = user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DispositionResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
