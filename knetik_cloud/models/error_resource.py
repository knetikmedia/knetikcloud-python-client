# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ErrorResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'details': 'object',
        'field': 'object',
        'message': 'str'
    }

    attribute_map = {
        'details': 'details',
        'field': 'field',
        'message': 'message'
    }

    def __init__(self, details=None, field=None, message=None):
        """
        ErrorResource - a model defined in Swagger
        """

        self._details = None
        self._field = None
        self._message = None
        self.discriminator = None

        if details is not None:
          self.details = details
        if field is not None:
          self.field = field
        if message is not None:
          self.message = message

    @property
    def details(self):
        """
        Gets the details of this ErrorResource.
        Extra details about the error, if needed

        :return: The details of this ErrorResource.
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this ErrorResource.
        Extra details about the error, if needed

        :param details: The details of this ErrorResource.
        :type: object
        """

        self._details = details

    @property
    def field(self):
        """
        Gets the field of this ErrorResource.
        The JSON key the message pertains to

        :return: The field of this ErrorResource.
        :rtype: object
        """
        return self._field

    @field.setter
    def field(self, field):
        """
        Sets the field of this ErrorResource.
        The JSON key the message pertains to

        :param field: The field of this ErrorResource.
        :type: object
        """

        self._field = field

    @property
    def message(self):
        """
        Gets the message of this ErrorResource.
        The message explaining the error

        :return: The message of this ErrorResource.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this ErrorResource.
        The message explaining the error

        :param message: The message of this ErrorResource.
        :type: str
        """

        self._message = message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ErrorResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
