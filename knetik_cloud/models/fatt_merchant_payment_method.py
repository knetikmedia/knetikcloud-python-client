# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FattMerchantPaymentMethod(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address1': 'str',
        'address2': 'str',
        'address_city': 'str',
        'address_country': 'str',
        'address_state': 'str',
        'address_zip': 'str',
        'card_last_four': 'str',
        'created_at': 'str',
        'customer_id': 'str',
        'deleted_at': 'str',
        'id': 'str',
        'nickname': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'address1': 'address1',
        'address2': 'address2',
        'address_city': 'address_city',
        'address_country': 'address_country',
        'address_state': 'address_state',
        'address_zip': 'address_zip',
        'card_last_four': 'card_last_four',
        'created_at': 'created_at',
        'customer_id': 'customer_id',
        'deleted_at': 'deleted_at',
        'id': 'id',
        'nickname': 'nickname',
        'updated_at': 'updated_at'
    }

    def __init__(self, address1=None, address2=None, address_city=None, address_country=None, address_state=None, address_zip=None, card_last_four=None, created_at=None, customer_id=None, deleted_at=None, id=None, nickname=None, updated_at=None):
        """
        FattMerchantPaymentMethod - a model defined in Swagger
        """

        self._address1 = None
        self._address2 = None
        self._address_city = None
        self._address_country = None
        self._address_state = None
        self._address_zip = None
        self._card_last_four = None
        self._created_at = None
        self._customer_id = None
        self._deleted_at = None
        self._id = None
        self._nickname = None
        self._updated_at = None
        self.discriminator = None

        if address1 is not None:
          self.address1 = address1
        if address2 is not None:
          self.address2 = address2
        if address_city is not None:
          self.address_city = address_city
        if address_country is not None:
          self.address_country = address_country
        if address_state is not None:
          self.address_state = address_state
        if address_zip is not None:
          self.address_zip = address_zip
        self.card_last_four = card_last_four
        if created_at is not None:
          self.created_at = created_at
        self.customer_id = customer_id
        if deleted_at is not None:
          self.deleted_at = deleted_at
        if id is not None:
          self.id = id
        self.nickname = nickname
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def address1(self):
        """
        Gets the address1 of this FattMerchantPaymentMethod.

        :return: The address1 of this FattMerchantPaymentMethod.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """
        Sets the address1 of this FattMerchantPaymentMethod.

        :param address1: The address1 of this FattMerchantPaymentMethod.
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """
        Gets the address2 of this FattMerchantPaymentMethod.

        :return: The address2 of this FattMerchantPaymentMethod.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """
        Sets the address2 of this FattMerchantPaymentMethod.

        :param address2: The address2 of this FattMerchantPaymentMethod.
        :type: str
        """

        self._address2 = address2

    @property
    def address_city(self):
        """
        Gets the address_city of this FattMerchantPaymentMethod.

        :return: The address_city of this FattMerchantPaymentMethod.
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """
        Sets the address_city of this FattMerchantPaymentMethod.

        :param address_city: The address_city of this FattMerchantPaymentMethod.
        :type: str
        """

        self._address_city = address_city

    @property
    def address_country(self):
        """
        Gets the address_country of this FattMerchantPaymentMethod.

        :return: The address_country of this FattMerchantPaymentMethod.
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """
        Sets the address_country of this FattMerchantPaymentMethod.

        :param address_country: The address_country of this FattMerchantPaymentMethod.
        :type: str
        """

        self._address_country = address_country

    @property
    def address_state(self):
        """
        Gets the address_state of this FattMerchantPaymentMethod.

        :return: The address_state of this FattMerchantPaymentMethod.
        :rtype: str
        """
        return self._address_state

    @address_state.setter
    def address_state(self, address_state):
        """
        Sets the address_state of this FattMerchantPaymentMethod.

        :param address_state: The address_state of this FattMerchantPaymentMethod.
        :type: str
        """

        self._address_state = address_state

    @property
    def address_zip(self):
        """
        Gets the address_zip of this FattMerchantPaymentMethod.

        :return: The address_zip of this FattMerchantPaymentMethod.
        :rtype: str
        """
        return self._address_zip

    @address_zip.setter
    def address_zip(self, address_zip):
        """
        Sets the address_zip of this FattMerchantPaymentMethod.

        :param address_zip: The address_zip of this FattMerchantPaymentMethod.
        :type: str
        """

        self._address_zip = address_zip

    @property
    def card_last_four(self):
        """
        Gets the card_last_four of this FattMerchantPaymentMethod.
        Last four digits of the credit card

        :return: The card_last_four of this FattMerchantPaymentMethod.
        :rtype: str
        """
        return self._card_last_four

    @card_last_four.setter
    def card_last_four(self, card_last_four):
        """
        Sets the card_last_four of this FattMerchantPaymentMethod.
        Last four digits of the credit card

        :param card_last_four: The card_last_four of this FattMerchantPaymentMethod.
        :type: str
        """
        if card_last_four is None:
            raise ValueError("Invalid value for `card_last_four`, must not be `None`")

        self._card_last_four = card_last_four

    @property
    def created_at(self):
        """
        Gets the created_at of this FattMerchantPaymentMethod.

        :return: The created_at of this FattMerchantPaymentMethod.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this FattMerchantPaymentMethod.

        :param created_at: The created_at of this FattMerchantPaymentMethod.
        :type: str
        """

        self._created_at = created_at

    @property
    def customer_id(self):
        """
        Gets the customer_id of this FattMerchantPaymentMethod.
        Unique FattMerchant customer ID

        :return: The customer_id of this FattMerchantPaymentMethod.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """
        Sets the customer_id of this FattMerchantPaymentMethod.
        Unique FattMerchant customer ID

        :param customer_id: The customer_id of this FattMerchantPaymentMethod.
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")

        self._customer_id = customer_id

    @property
    def deleted_at(self):
        """
        Gets the deleted_at of this FattMerchantPaymentMethod.

        :return: The deleted_at of this FattMerchantPaymentMethod.
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """
        Sets the deleted_at of this FattMerchantPaymentMethod.

        :param deleted_at: The deleted_at of this FattMerchantPaymentMethod.
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def id(self):
        """
        Gets the id of this FattMerchantPaymentMethod.

        :return: The id of this FattMerchantPaymentMethod.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FattMerchantPaymentMethod.

        :param id: The id of this FattMerchantPaymentMethod.
        :type: str
        """

        self._id = id

    @property
    def nickname(self):
        """
        Gets the nickname of this FattMerchantPaymentMethod.
        Nickname given to the FattMerchant payment method

        :return: The nickname of this FattMerchantPaymentMethod.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """
        Sets the nickname of this FattMerchantPaymentMethod.
        Nickname given to the FattMerchant payment method

        :param nickname: The nickname of this FattMerchantPaymentMethod.
        :type: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")

        self._nickname = nickname

    @property
    def updated_at(self):
        """
        Gets the updated_at of this FattMerchantPaymentMethod.

        :return: The updated_at of this FattMerchantPaymentMethod.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this FattMerchantPaymentMethod.

        :param updated_at: The updated_at of this FattMerchantPaymentMethod.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FattMerchantPaymentMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
