# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FileGroupPropertyDefinitionResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_type': 'str',
        'max_count': 'int',
        'max_file_size': 'int',
        'min_count': 'int'
    }

    attribute_map = {
        'file_type': 'file_type',
        'max_count': 'max_count',
        'max_file_size': 'max_file_size',
        'min_count': 'min_count'
    }

    def __init__(self, file_type=None, max_count=None, max_file_size=None, min_count=None):
        """
        FileGroupPropertyDefinitionResource - a model defined in Swagger
        """

        self._file_type = None
        self._max_count = None
        self._max_file_size = None
        self._min_count = None
        self.discriminator = None

        if file_type is not None:
          self.file_type = file_type
        if max_count is not None:
          self.max_count = max_count
        if max_file_size is not None:
          self.max_file_size = max_file_size
        if min_count is not None:
          self.min_count = min_count

    @property
    def file_type(self):
        """
        Gets the file_type of this FileGroupPropertyDefinitionResource.
        If provided, a file type that the property must match

        :return: The file_type of this FileGroupPropertyDefinitionResource.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """
        Sets the file_type of this FileGroupPropertyDefinitionResource.
        If provided, a file type that the property must match

        :param file_type: The file_type of this FileGroupPropertyDefinitionResource.
        :type: str
        """

        self._file_type = file_type

    @property
    def max_count(self):
        """
        Gets the max_count of this FileGroupPropertyDefinitionResource.
        If provided, the maximum number of files in the group

        :return: The max_count of this FileGroupPropertyDefinitionResource.
        :rtype: int
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """
        Sets the max_count of this FileGroupPropertyDefinitionResource.
        If provided, the maximum number of files in the group

        :param max_count: The max_count of this FileGroupPropertyDefinitionResource.
        :type: int
        """

        self._max_count = max_count

    @property
    def max_file_size(self):
        """
        Gets the max_file_size of this FileGroupPropertyDefinitionResource.
        If provided, the maximum allowed size per file in bytes

        :return: The max_file_size of this FileGroupPropertyDefinitionResource.
        :rtype: int
        """
        return self._max_file_size

    @max_file_size.setter
    def max_file_size(self, max_file_size):
        """
        Sets the max_file_size of this FileGroupPropertyDefinitionResource.
        If provided, the maximum allowed size per file in bytes

        :param max_file_size: The max_file_size of this FileGroupPropertyDefinitionResource.
        :type: int
        """

        self._max_file_size = max_file_size

    @property
    def min_count(self):
        """
        Gets the min_count of this FileGroupPropertyDefinitionResource.
        If provided, the minimum number of files in the group

        :return: The min_count of this FileGroupPropertyDefinitionResource.
        :rtype: int
        """
        return self._min_count

    @min_count.setter
    def min_count(self, min_count):
        """
        Sets the min_count of this FileGroupPropertyDefinitionResource.
        If provided, the minimum number of files in the group

        :param min_count: The min_count of this FileGroupPropertyDefinitionResource.
        :type: int
        """

        self._min_count = min_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FileGroupPropertyDefinitionResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
