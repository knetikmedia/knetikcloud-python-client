# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ForwardLog(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date': 'int',
        'error_msg': 'str',
        'event_id': 'str',
        'headers': 'str',
        'http_status_code': 'int',
        'id': 'str',
        'method': 'str',
        'payload': 'object',
        'response': 'str',
        'retry_count': 'int',
        'retryable': 'bool',
        'rule_id': 'str',
        'start_date': 'int',
        'success': 'bool',
        'url': 'str'
    }

    attribute_map = {
        'end_date': 'end_date',
        'error_msg': 'error_msg',
        'event_id': 'event_id',
        'headers': 'headers',
        'http_status_code': 'http_status_code',
        'id': 'id',
        'method': 'method',
        'payload': 'payload',
        'response': 'response',
        'retry_count': 'retry_count',
        'retryable': 'retryable',
        'rule_id': 'rule_id',
        'start_date': 'start_date',
        'success': 'success',
        'url': 'url'
    }

    def __init__(self, end_date=None, error_msg=None, event_id=None, headers=None, http_status_code=None, id=None, method=None, payload=None, response=None, retry_count=None, retryable=None, rule_id=None, start_date=None, success=None, url=None):
        """
        ForwardLog - a model defined in Swagger
        """

        self._end_date = None
        self._error_msg = None
        self._event_id = None
        self._headers = None
        self._http_status_code = None
        self._id = None
        self._method = None
        self._payload = None
        self._response = None
        self._retry_count = None
        self._retryable = None
        self._rule_id = None
        self._start_date = None
        self._success = None
        self._url = None
        self.discriminator = None

        if end_date is not None:
          self.end_date = end_date
        if error_msg is not None:
          self.error_msg = error_msg
        if event_id is not None:
          self.event_id = event_id
        if headers is not None:
          self.headers = headers
        if http_status_code is not None:
          self.http_status_code = http_status_code
        if id is not None:
          self.id = id
        if method is not None:
          self.method = method
        if payload is not None:
          self.payload = payload
        if response is not None:
          self.response = response
        if retry_count is not None:
          self.retry_count = retry_count
        if retryable is not None:
          self.retryable = retryable
        if rule_id is not None:
          self.rule_id = rule_id
        if start_date is not None:
          self.start_date = start_date
        if success is not None:
          self.success = success
        if url is not None:
          self.url = url

    @property
    def end_date(self):
        """
        Gets the end_date of this ForwardLog.
        The end date of the forward log entry

        :return: The end_date of this ForwardLog.
        :rtype: int
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this ForwardLog.
        The end date of the forward log entry

        :param end_date: The end_date of this ForwardLog.
        :type: int
        """

        self._end_date = end_date

    @property
    def error_msg(self):
        """
        Gets the error_msg of this ForwardLog.

        :return: The error_msg of this ForwardLog.
        :rtype: str
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """
        Sets the error_msg of this ForwardLog.

        :param error_msg: The error_msg of this ForwardLog.
        :type: str
        """

        self._error_msg = error_msg

    @property
    def event_id(self):
        """
        Gets the event_id of this ForwardLog.

        :return: The event_id of this ForwardLog.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """
        Sets the event_id of this ForwardLog.

        :param event_id: The event_id of this ForwardLog.
        :type: str
        """

        self._event_id = event_id

    @property
    def headers(self):
        """
        Gets the headers of this ForwardLog.

        :return: The headers of this ForwardLog.
        :rtype: str
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """
        Sets the headers of this ForwardLog.

        :param headers: The headers of this ForwardLog.
        :type: str
        """

        self._headers = headers

    @property
    def http_status_code(self):
        """
        Gets the http_status_code of this ForwardLog.
        The http status code the forward log entry

        :return: The http_status_code of this ForwardLog.
        :rtype: int
        """
        return self._http_status_code

    @http_status_code.setter
    def http_status_code(self, http_status_code):
        """
        Sets the http_status_code of this ForwardLog.
        The http status code the forward log entry

        :param http_status_code: The http_status_code of this ForwardLog.
        :type: int
        """

        self._http_status_code = http_status_code

    @property
    def id(self):
        """
        Gets the id of this ForwardLog.
        The id of the forward log entry

        :return: The id of this ForwardLog.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ForwardLog.
        The id of the forward log entry

        :param id: The id of this ForwardLog.
        :type: str
        """

        self._id = id

    @property
    def method(self):
        """
        Gets the method of this ForwardLog.

        :return: The method of this ForwardLog.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """
        Sets the method of this ForwardLog.

        :param method: The method of this ForwardLog.
        :type: str
        """

        self._method = method

    @property
    def payload(self):
        """
        Gets the payload of this ForwardLog.
        The payload of the forward log entry

        :return: The payload of this ForwardLog.
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """
        Sets the payload of this ForwardLog.
        The payload of the forward log entry

        :param payload: The payload of this ForwardLog.
        :type: object
        """

        self._payload = payload

    @property
    def response(self):
        """
        Gets the response of this ForwardLog.
        The response string of the forward log entry

        :return: The response of this ForwardLog.
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """
        Sets the response of this ForwardLog.
        The response string of the forward log entry

        :param response: The response of this ForwardLog.
        :type: str
        """

        self._response = response

    @property
    def retry_count(self):
        """
        Gets the retry_count of this ForwardLog.
        The retry count of the forward log entry

        :return: The retry_count of this ForwardLog.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """
        Sets the retry_count of this ForwardLog.
        The retry count of the forward log entry

        :param retry_count: The retry_count of this ForwardLog.
        :type: int
        """

        self._retry_count = retry_count

    @property
    def retryable(self):
        """
        Gets the retryable of this ForwardLog.

        :return: The retryable of this ForwardLog.
        :rtype: bool
        """
        return self._retryable

    @retryable.setter
    def retryable(self, retryable):
        """
        Sets the retryable of this ForwardLog.

        :param retryable: The retryable of this ForwardLog.
        :type: bool
        """

        self._retryable = retryable

    @property
    def rule_id(self):
        """
        Gets the rule_id of this ForwardLog.

        :return: The rule_id of this ForwardLog.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """
        Sets the rule_id of this ForwardLog.

        :param rule_id: The rule_id of this ForwardLog.
        :type: str
        """

        self._rule_id = rule_id

    @property
    def start_date(self):
        """
        Gets the start_date of this ForwardLog.
        The start date of the forward log entry

        :return: The start_date of this ForwardLog.
        :rtype: int
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this ForwardLog.
        The start date of the forward log entry

        :param start_date: The start_date of this ForwardLog.
        :type: int
        """

        self._start_date = start_date

    @property
    def success(self):
        """
        Gets the success of this ForwardLog.

        :return: The success of this ForwardLog.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """
        Sets the success of this ForwardLog.

        :param success: The success of this ForwardLog.
        :type: bool
        """

        self._success = success

    @property
    def url(self):
        """
        Gets the url of this ForwardLog.
        The endpoint url of the forward log entry

        :return: The url of this ForwardLog.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ForwardLog.
        The endpoint url of the forward log entry

        :param url: The url of this ForwardLog.
        :type: str
        """

        self._url = url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ForwardLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
