# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GooglePaymentRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'json_payload': 'str',
        'signature': 'str'
    }

    attribute_map = {
        'json_payload': 'json_payload',
        'signature': 'signature'
    }

    def __init__(self, json_payload=None, signature=None):
        """
        GooglePaymentRequest - a model defined in Swagger
        """

        self._json_payload = None
        self._signature = None

        self.json_payload = json_payload
        self.signature = signature

    @property
    def json_payload(self):
        """
        Gets the json_payload of this GooglePaymentRequest.
        The json payload exactly as sent from Google

        :return: The json_payload of this GooglePaymentRequest.
        :rtype: str
        """
        return self._json_payload

    @json_payload.setter
    def json_payload(self, json_payload):
        """
        Sets the json_payload of this GooglePaymentRequest.
        The json payload exactly as sent from Google

        :param json_payload: The json_payload of this GooglePaymentRequest.
        :type: str
        """
        if json_payload is None:
            raise ValueError("Invalid value for `json_payload`, must not be `None`")

        self._json_payload = json_payload

    @property
    def signature(self):
        """
        Gets the signature of this GooglePaymentRequest.
        The signature from Google to verify the payload

        :return: The signature of this GooglePaymentRequest.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """
        Sets the signature of this GooglePaymentRequest.
        The signature from Google to verify the payload

        :param signature: The signature of this GooglePaymentRequest.
        :type: str
        """
        if signature is None:
            raise ValueError("Invalid value for `signature`, must not be `None`")

        self._signature = signature

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GooglePaymentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
