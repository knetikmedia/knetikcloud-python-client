# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GroupMemberResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_properties': 'dict(str, ModelProperty)',
        'group': 'SimpleGroupResource',
        'implicit': 'bool',
        'membership_id': 'int',
        'order': 'str',
        'status': 'str',
        'template': 'str',
        'user': 'SimpleUserResource'
    }

    attribute_map = {
        'additional_properties': 'additional_properties',
        'group': 'group',
        'implicit': 'implicit',
        'membership_id': 'membership_id',
        'order': 'order',
        'status': 'status',
        'template': 'template',
        'user': 'user'
    }

    def __init__(self, additional_properties=None, group=None, implicit=None, membership_id=None, order=None, status=None, template=None, user=None):
        """
        GroupMemberResource - a model defined in Swagger
        """

        self._additional_properties = None
        self._group = None
        self._implicit = None
        self._membership_id = None
        self._order = None
        self._status = None
        self._template = None
        self._user = None
        self.discriminator = None

        if additional_properties is not None:
          self.additional_properties = additional_properties
        if group is not None:
          self.group = group
        if implicit is not None:
          self.implicit = implicit
        if membership_id is not None:
          self.membership_id = membership_id
        if order is not None:
          self.order = order
        if status is not None:
          self.status = status
        if template is not None:
          self.template = template
        self.user = user

    @property
    def additional_properties(self):
        """
        Gets the additional_properties of this GroupMemberResource.
        A map of additional properties, keyed on the property name (private). Must match the names and types defined in the template for this type, or be an extra not from the template

        :return: The additional_properties of this GroupMemberResource.
        :rtype: dict(str, ModelProperty)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """
        Sets the additional_properties of this GroupMemberResource.
        A map of additional properties, keyed on the property name (private). Must match the names and types defined in the template for this type, or be an extra not from the template

        :param additional_properties: The additional_properties of this GroupMemberResource.
        :type: dict(str, ModelProperty)
        """

        self._additional_properties = additional_properties

    @property
    def group(self):
        """
        Gets the group of this GroupMemberResource.
        The group. Id is the unique name

        :return: The group of this GroupMemberResource.
        :rtype: SimpleGroupResource
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this GroupMemberResource.
        The group. Id is the unique name

        :param group: The group of this GroupMemberResource.
        :type: SimpleGroupResource
        """

        self._group = group

    @property
    def implicit(self):
        """
        Gets the implicit of this GroupMemberResource.
        Whether this membership is explicit (the user was added directly to the group) or implicit (the user was added only to one or more child groups)

        :return: The implicit of this GroupMemberResource.
        :rtype: bool
        """
        return self._implicit

    @implicit.setter
    def implicit(self, implicit):
        """
        Sets the implicit of this GroupMemberResource.
        Whether this membership is explicit (the user was added directly to the group) or implicit (the user was added only to one or more child groups)

        :param implicit: The implicit of this GroupMemberResource.
        :type: bool
        """

        self._implicit = implicit

    @property
    def membership_id(self):
        """
        Gets the membership_id of this GroupMemberResource.
        The id of the membership entry

        :return: The membership_id of this GroupMemberResource.
        :rtype: int
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """
        Sets the membership_id of this GroupMemberResource.
        The id of the membership entry

        :param membership_id: The membership_id of this GroupMemberResource.
        :type: int
        """

        self._membership_id = membership_id

    @property
    def order(self):
        """
        Gets the order of this GroupMemberResource.
        The position of the member in the group if applicable. Read notes for details

        :return: The order of this GroupMemberResource.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this GroupMemberResource.
        The position of the member in the group if applicable. Read notes for details

        :param order: The order of this GroupMemberResource.
        :type: str
        """

        self._order = order

    @property
    def status(self):
        """
        Gets the status of this GroupMemberResource.
        The member's access level. Default: member

        :return: The status of this GroupMemberResource.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this GroupMemberResource.
        The member's access level. Default: member

        :param status: The status of this GroupMemberResource.
        :type: str
        """
        allowed_values = ["moderator", "member"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def template(self):
        """
        Gets the template of this GroupMemberResource.
        A template this member additional properties are validated against (private). May be null and no validation of properties will be done

        :return: The template of this GroupMemberResource.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this GroupMemberResource.
        A template this member additional properties are validated against (private). May be null and no validation of properties will be done

        :param template: The template of this GroupMemberResource.
        :type: str
        """

        self._template = template

    @property
    def user(self):
        """
        Gets the user of this GroupMemberResource.
        The user

        :return: The user of this GroupMemberResource.
        :rtype: SimpleUserResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this GroupMemberResource.
        The user

        :param user: The user of this GroupMemberResource.
        :type: SimpleUserResource
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GroupMemberResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
