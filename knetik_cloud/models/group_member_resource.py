# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GroupMemberResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_properties': 'dict(str, ModelProperty)',
        'avatar_url': 'str',
        'display_name': 'str',
        'id': 'int',
        'order': 'str',
        'status': 'str',
        'template': 'str',
        'username': 'str'
    }

    attribute_map = {
        'additional_properties': 'additional_properties',
        'avatar_url': 'avatar_url',
        'display_name': 'display_name',
        'id': 'id',
        'order': 'order',
        'status': 'status',
        'template': 'template',
        'username': 'username'
    }

    def __init__(self, additional_properties=None, avatar_url=None, display_name=None, id=None, order=None, status=None, template=None, username=None):
        """
        GroupMemberResource - a model defined in Swagger
        """

        self._additional_properties = None
        self._avatar_url = None
        self._display_name = None
        self._id = None
        self._order = None
        self._status = None
        self._template = None
        self._username = None
        self.discriminator = None

        if additional_properties is not None:
          self.additional_properties = additional_properties
        if avatar_url is not None:
          self.avatar_url = avatar_url
        if display_name is not None:
          self.display_name = display_name
        self.id = id
        if order is not None:
          self.order = order
        if status is not None:
          self.status = status
        if template is not None:
          self.template = template
        if username is not None:
          self.username = username

    @property
    def additional_properties(self):
        """
        Gets the additional_properties of this GroupMemberResource.
        A map of additional properties, keyed on the property name (private). Must match the names and types defined in the template for this type, or be an extra not from the template

        :return: The additional_properties of this GroupMemberResource.
        :rtype: dict(str, ModelProperty)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """
        Sets the additional_properties of this GroupMemberResource.
        A map of additional properties, keyed on the property name (private). Must match the names and types defined in the template for this type, or be an extra not from the template

        :param additional_properties: The additional_properties of this GroupMemberResource.
        :type: dict(str, ModelProperty)
        """

        self._additional_properties = additional_properties

    @property
    def avatar_url(self):
        """
        Gets the avatar_url of this GroupMemberResource.
        The url of the user's avatar image

        :return: The avatar_url of this GroupMemberResource.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """
        Sets the avatar_url of this GroupMemberResource.
        The url of the user's avatar image

        :param avatar_url: The avatar_url of this GroupMemberResource.
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def display_name(self):
        """
        Gets the display_name of this GroupMemberResource.
        The public username of the user

        :return: The display_name of this GroupMemberResource.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this GroupMemberResource.
        The public username of the user

        :param display_name: The display_name of this GroupMemberResource.
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """
        Gets the id of this GroupMemberResource.
        The id of the user

        :return: The id of this GroupMemberResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GroupMemberResource.
        The id of the user

        :param id: The id of this GroupMemberResource.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def order(self):
        """
        Gets the order of this GroupMemberResource.
        The position of the member in the group if applicable. Read notes for details

        :return: The order of this GroupMemberResource.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this GroupMemberResource.
        The position of the member in the group if applicable. Read notes for details

        :param order: The order of this GroupMemberResource.
        :type: str
        """

        self._order = order

    @property
    def status(self):
        """
        Gets the status of this GroupMemberResource.
        The member's access level. Default: member

        :return: The status of this GroupMemberResource.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this GroupMemberResource.
        The member's access level. Default: member

        :param status: The status of this GroupMemberResource.
        :type: str
        """
        allowed_values = ["moderator", "member"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def template(self):
        """
        Gets the template of this GroupMemberResource.
        A template this member additional properties are validated against (private). May be null and no validation of properties will be done

        :return: The template of this GroupMemberResource.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this GroupMemberResource.
        A template this member additional properties are validated against (private). May be null and no validation of properties will be done

        :param template: The template of this GroupMemberResource.
        :type: str
        """

        self._template = template

    @property
    def username(self):
        """
        Gets the username of this GroupMemberResource.
        The username of the user

        :return: The username of this GroupMemberResource.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this GroupMemberResource.
        The username of the user

        :param username: The username of this GroupMemberResource.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GroupMemberResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
