# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ImageGroupPropertyDefinitionResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, field_list=None, name=None, required=None, type=None, file_type=None, max_count=None, max_file_size=None, min_count=None, max_height=None, max_width=None, min_height=None, min_width=None):
        """
        ImageGroupPropertyDefinitionResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'field_list': 'PropertyFieldListResource',
            'name': 'str',
            'required': 'bool',
            'type': 'str',
            'file_type': 'str',
            'max_count': 'int',
            'max_file_size': 'int',
            'min_count': 'int',
            'max_height': 'int',
            'max_width': 'int',
            'min_height': 'int',
            'min_width': 'int'
        }

        self.attribute_map = {
            'field_list': 'field_list',
            'name': 'name',
            'required': 'required',
            'type': 'type',
            'file_type': 'file_type',
            'max_count': 'max_count',
            'max_file_size': 'max_file_size',
            'min_count': 'min_count',
            'max_height': 'max_height',
            'max_width': 'max_width',
            'min_height': 'min_height',
            'min_width': 'min_width'
        }

        self._field_list = field_list
        self._name = name
        self._required = required
        self._type = type
        self._file_type = file_type
        self._max_count = max_count
        self._max_file_size = max_file_size
        self._min_count = min_count
        self._max_height = max_height
        self._max_width = max_width
        self._min_height = min_height
        self._min_width = min_width

    @property
    def field_list(self):
        """
        Gets the field_list of this ImageGroupPropertyDefinitionResource.
        A list of the fields on both the property definition and property of this type

        :return: The field_list of this ImageGroupPropertyDefinitionResource.
        :rtype: PropertyFieldListResource
        """
        return self._field_list

    @field_list.setter
    def field_list(self, field_list):
        """
        Sets the field_list of this ImageGroupPropertyDefinitionResource.
        A list of the fields on both the property definition and property of this type

        :param field_list: The field_list of this ImageGroupPropertyDefinitionResource.
        :type: PropertyFieldListResource
        """

        self._field_list = field_list

    @property
    def name(self):
        """
        Gets the name of this ImageGroupPropertyDefinitionResource.
        The name of the property

        :return: The name of this ImageGroupPropertyDefinitionResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ImageGroupPropertyDefinitionResource.
        The name of the property

        :param name: The name of this ImageGroupPropertyDefinitionResource.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def required(self):
        """
        Gets the required of this ImageGroupPropertyDefinitionResource.
        Whether the property is required

        :return: The required of this ImageGroupPropertyDefinitionResource.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this ImageGroupPropertyDefinitionResource.
        Whether the property is required

        :param required: The required of this ImageGroupPropertyDefinitionResource.
        :type: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def type(self):
        """
        Gets the type of this ImageGroupPropertyDefinitionResource.
        The type of the property. Used for polymorphic type recognition and thus must match an expected type with additional properties.

        :return: The type of this ImageGroupPropertyDefinitionResource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ImageGroupPropertyDefinitionResource.
        The type of the property. Used for polymorphic type recognition and thus must match an expected type with additional properties.

        :param type: The type of this ImageGroupPropertyDefinitionResource.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def file_type(self):
        """
        Gets the file_type of this ImageGroupPropertyDefinitionResource.
        If provided, a file type that the property must match

        :return: The file_type of this ImageGroupPropertyDefinitionResource.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """
        Sets the file_type of this ImageGroupPropertyDefinitionResource.
        If provided, a file type that the property must match

        :param file_type: The file_type of this ImageGroupPropertyDefinitionResource.
        :type: str
        """

        self._file_type = file_type

    @property
    def max_count(self):
        """
        Gets the max_count of this ImageGroupPropertyDefinitionResource.
        If provided, the maximum number of files in the group

        :return: The max_count of this ImageGroupPropertyDefinitionResource.
        :rtype: int
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """
        Sets the max_count of this ImageGroupPropertyDefinitionResource.
        If provided, the maximum number of files in the group

        :param max_count: The max_count of this ImageGroupPropertyDefinitionResource.
        :type: int
        """

        self._max_count = max_count

    @property
    def max_file_size(self):
        """
        Gets the max_file_size of this ImageGroupPropertyDefinitionResource.
        If provided, the maximum allowed size per file in bytes

        :return: The max_file_size of this ImageGroupPropertyDefinitionResource.
        :rtype: int
        """
        return self._max_file_size

    @max_file_size.setter
    def max_file_size(self, max_file_size):
        """
        Sets the max_file_size of this ImageGroupPropertyDefinitionResource.
        If provided, the maximum allowed size per file in bytes

        :param max_file_size: The max_file_size of this ImageGroupPropertyDefinitionResource.
        :type: int
        """

        self._max_file_size = max_file_size

    @property
    def min_count(self):
        """
        Gets the min_count of this ImageGroupPropertyDefinitionResource.
        If provided, the minimum number of files in the group

        :return: The min_count of this ImageGroupPropertyDefinitionResource.
        :rtype: int
        """
        return self._min_count

    @min_count.setter
    def min_count(self, min_count):
        """
        Sets the min_count of this ImageGroupPropertyDefinitionResource.
        If provided, the minimum number of files in the group

        :param min_count: The min_count of this ImageGroupPropertyDefinitionResource.
        :type: int
        """

        self._min_count = min_count

    @property
    def max_height(self):
        """
        Gets the max_height of this ImageGroupPropertyDefinitionResource.
        If provided, the maximum height of each image

        :return: The max_height of this ImageGroupPropertyDefinitionResource.
        :rtype: int
        """
        return self._max_height

    @max_height.setter
    def max_height(self, max_height):
        """
        Sets the max_height of this ImageGroupPropertyDefinitionResource.
        If provided, the maximum height of each image

        :param max_height: The max_height of this ImageGroupPropertyDefinitionResource.
        :type: int
        """

        self._max_height = max_height

    @property
    def max_width(self):
        """
        Gets the max_width of this ImageGroupPropertyDefinitionResource.
        If provided, the maximum width of each image

        :return: The max_width of this ImageGroupPropertyDefinitionResource.
        :rtype: int
        """
        return self._max_width

    @max_width.setter
    def max_width(self, max_width):
        """
        Sets the max_width of this ImageGroupPropertyDefinitionResource.
        If provided, the maximum width of each image

        :param max_width: The max_width of this ImageGroupPropertyDefinitionResource.
        :type: int
        """

        self._max_width = max_width

    @property
    def min_height(self):
        """
        Gets the min_height of this ImageGroupPropertyDefinitionResource.
        If provided, the minimum height of each image

        :return: The min_height of this ImageGroupPropertyDefinitionResource.
        :rtype: int
        """
        return self._min_height

    @min_height.setter
    def min_height(self, min_height):
        """
        Sets the min_height of this ImageGroupPropertyDefinitionResource.
        If provided, the minimum height of each image

        :param min_height: The min_height of this ImageGroupPropertyDefinitionResource.
        :type: int
        """

        self._min_height = min_height

    @property
    def min_width(self):
        """
        Gets the min_width of this ImageGroupPropertyDefinitionResource.
        If provided, the minumum width of each image

        :return: The min_width of this ImageGroupPropertyDefinitionResource.
        :rtype: int
        """
        return self._min_width

    @min_width.setter
    def min_width(self, min_width):
        """
        Sets the min_width of this ImageGroupPropertyDefinitionResource.
        If provided, the minumum width of each image

        :param min_width: The min_width of this ImageGroupPropertyDefinitionResource.
        :type: int
        """

        self._min_width = min_width

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ImageGroupPropertyDefinitionResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
