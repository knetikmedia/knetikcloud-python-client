# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ImageProperty(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'crc': 'str',
        'description': 'str',
        'file_type': 'str',
        'url': 'str'
    }

    attribute_map = {
        'type': 'type',
        'crc': 'crc',
        'description': 'description',
        'file_type': 'file_type',
        'url': 'url'
    }

    def __init__(self, type=None, crc=None, description=None, file_type=None, url=None):
        """
        ImageProperty - a model defined in Swagger
        """

        self._type = None
        self._crc = None
        self._description = None
        self._file_type = None
        self._url = None

        self.type = type
        if crc is not None:
          self.crc = crc
        if description is not None:
          self.description = description
        if file_type is not None:
          self.file_type = file_type
        if url is not None:
          self.url = url

    @property
    def type(self):
        """
        Gets the type of this ImageProperty.
        The type of the property. Used for polymorphic type recognition and thus must match an expected type with additional properties.

        :return: The type of this ImageProperty.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ImageProperty.
        The type of the property. Used for polymorphic type recognition and thus must match an expected type with additional properties.

        :param type: The type of this ImageProperty.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def crc(self):
        """
        Gets the crc of this ImageProperty.
        A crc value for file integrity verification

        :return: The crc of this ImageProperty.
        :rtype: str
        """
        return self._crc

    @crc.setter
    def crc(self, crc):
        """
        Sets the crc of this ImageProperty.
        A crc value for file integrity verification

        :param crc: The crc of this ImageProperty.
        :type: str
        """

        self._crc = crc

    @property
    def description(self):
        """
        Gets the description of this ImageProperty.
        A description of the file

        :return: The description of this ImageProperty.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ImageProperty.
        A description of the file

        :param description: The description of this ImageProperty.
        :type: str
        """

        self._description = description

    @property
    def file_type(self):
        """
        Gets the file_type of this ImageProperty.
        The type of file such as txt, mp3, mov or csv

        :return: The file_type of this ImageProperty.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """
        Sets the file_type of this ImageProperty.
        The type of file such as txt, mp3, mov or csv

        :param file_type: The file_type of this ImageProperty.
        :type: str
        """

        self._file_type = file_type

    @property
    def url(self):
        """
        Gets the url of this ImageProperty.
        The url of the file

        :return: The url of this ImageProperty.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ImageProperty.
        The url of the file

        :param url: The url of this ImageProperty.
        :type: str
        """

        self._url = url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ImageProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
