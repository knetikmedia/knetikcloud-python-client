# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ImportJobResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'str',
        'created_date': 'int',
        'id': 'int',
        'name': 'str',
        'output': 'list[ImportJobOutputResource]',
        'record_count': 'int',
        'status': 'str',
        'updated_date': 'int',
        'url': 'str',
        'vendor': 'str'
    }

    attribute_map = {
        'category_id': 'category_id',
        'created_date': 'created_date',
        'id': 'id',
        'name': 'name',
        'output': 'output',
        'record_count': 'record_count',
        'status': 'status',
        'updated_date': 'updated_date',
        'url': 'url',
        'vendor': 'vendor'
    }

    def __init__(self, category_id=None, created_date=None, id=None, name=None, output=None, record_count=None, status=None, updated_date=None, url=None, vendor=None):
        """
        ImportJobResource - a model defined in Swagger
        """

        self._category_id = None
        self._created_date = None
        self._id = None
        self._name = None
        self._output = None
        self._record_count = None
        self._status = None
        self._updated_date = None
        self._url = None
        self._vendor = None

        self.category_id = category_id
        if created_date is not None:
          self.created_date = created_date
        if id is not None:
          self.id = id
        self.name = name
        if output is not None:
          self.output = output
        if record_count is not None:
          self.record_count = record_count
        if status is not None:
          self.status = status
        if updated_date is not None:
          self.updated_date = updated_date
        self.url = url
        self.vendor = vendor

    @property
    def category_id(self):
        """
        Gets the category_id of this ImportJobResource.
        The id of the category to assign all questions in the import to

        :return: The category_id of this ImportJobResource.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this ImportJobResource.
        The id of the category to assign all questions in the import to

        :param category_id: The category_id of this ImportJobResource.
        :type: str
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def created_date(self):
        """
        Gets the created_date of this ImportJobResource.
        The date the job was created in seconds since unix epoc

        :return: The created_date of this ImportJobResource.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this ImportJobResource.
        The date the job was created in seconds since unix epoc

        :param created_date: The created_date of this ImportJobResource.
        :type: int
        """

        self._created_date = created_date

    @property
    def id(self):
        """
        Gets the id of this ImportJobResource.
        The id of the job

        :return: The id of this ImportJobResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ImportJobResource.
        The id of the job

        :param id: The id of this ImportJobResource.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this ImportJobResource.
        A name for this import for later reference

        :return: The name of this ImportJobResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ImportJobResource.
        A name for this import for later reference

        :param name: The name of this ImportJobResource.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def output(self):
        """
        Gets the output of this ImportJobResource.
        Error information from validation

        :return: The output of this ImportJobResource.
        :rtype: list[ImportJobOutputResource]
        """
        return self._output

    @output.setter
    def output(self, output):
        """
        Sets the output of this ImportJobResource.
        Error information from validation

        :param output: The output of this ImportJobResource.
        :type: list[ImportJobOutputResource]
        """

        self._output = output

    @property
    def record_count(self):
        """
        Gets the record_count of this ImportJobResource.
        The number of questions form the CSV file. Filled in after validation

        :return: The record_count of this ImportJobResource.
        :rtype: int
        """
        return self._record_count

    @record_count.setter
    def record_count(self, record_count):
        """
        Sets the record_count of this ImportJobResource.
        The number of questions form the CSV file. Filled in after validation

        :param record_count: The record_count of this ImportJobResource.
        :type: int
        """

        self._record_count = record_count

    @property
    def status(self):
        """
        Gets the status of this ImportJobResource.
        The status of the job

        :return: The status of this ImportJobResource.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ImportJobResource.
        The status of the job

        :param status: The status of this ImportJobResource.
        :type: str
        """
        allowed_values = ["PENDING_VALIDATION", "VALIDATING", "VALID", "INVALID", "PENDING_PROCESS", "PROCESSING", "PROCESSED", "FAILED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_date(self):
        """
        Gets the updated_date of this ImportJobResource.
        The date the job was last updated in seconds since unix epoc

        :return: The updated_date of this ImportJobResource.
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """
        Sets the updated_date of this ImportJobResource.
        The date the job was last updated in seconds since unix epoc

        :param updated_date: The updated_date of this ImportJobResource.
        :type: int
        """

        self._updated_date = updated_date

    @property
    def url(self):
        """
        Gets the url of this ImportJobResource.
        The url of a CSV file to pull trivia questions from. Cannot be changed after initial POST

        :return: The url of this ImportJobResource.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ImportJobResource.
        The url of a CSV file to pull trivia questions from. Cannot be changed after initial POST

        :param url: The url of this ImportJobResource.
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def vendor(self):
        """
        Gets the vendor of this ImportJobResource.
        The vendor who supplied this set of questions

        :return: The vendor of this ImportJobResource.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this ImportJobResource.
        The vendor who supplied this set of questions

        :param vendor: The vendor of this ImportJobResource.
        :type: str
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")

        self._vendor = vendor

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ImportJobResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
