# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InventorySubscriptionResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bill_date': 'int',
        'credit': 'float',
        'credit_log': 'list[SubscriptionCreditResource]',
        'grace_end': 'int',
        'inventory_id': 'int',
        'inventory_status': 'str',
        'item_id': 'int',
        'payment_method': 'PaymentMethodResource',
        'price_override': 'float',
        'price_override_reason': 'str',
        'recurring_price': 'float',
        'sku': 'str',
        'start_date': 'int',
        'subscription_status': 'int',
        'user': 'SimpleUserResource'
    }

    attribute_map = {
        'bill_date': 'bill_date',
        'credit': 'credit',
        'credit_log': 'credit_log',
        'grace_end': 'grace_end',
        'inventory_id': 'inventory_id',
        'inventory_status': 'inventory_status',
        'item_id': 'item_id',
        'payment_method': 'payment_method',
        'price_override': 'price_override',
        'price_override_reason': 'price_override_reason',
        'recurring_price': 'recurring_price',
        'sku': 'sku',
        'start_date': 'start_date',
        'subscription_status': 'subscription_status',
        'user': 'user'
    }

    def __init__(self, bill_date=None, credit=None, credit_log=None, grace_end=None, inventory_id=None, inventory_status=None, item_id=None, payment_method=None, price_override=None, price_override_reason=None, recurring_price=None, sku=None, start_date=None, subscription_status=None, user=None):
        """
        InventorySubscriptionResource - a model defined in Swagger
        """

        self._bill_date = None
        self._credit = None
        self._credit_log = None
        self._grace_end = None
        self._inventory_id = None
        self._inventory_status = None
        self._item_id = None
        self._payment_method = None
        self._price_override = None
        self._price_override_reason = None
        self._recurring_price = None
        self._sku = None
        self._start_date = None
        self._subscription_status = None
        self._user = None
        self.discriminator = None

        if bill_date is not None:
          self.bill_date = bill_date
        if credit is not None:
          self.credit = credit
        if credit_log is not None:
          self.credit_log = credit_log
        if grace_end is not None:
          self.grace_end = grace_end
        if inventory_id is not None:
          self.inventory_id = inventory_id
        if inventory_status is not None:
          self.inventory_status = inventory_status
        if item_id is not None:
          self.item_id = item_id
        if payment_method is not None:
          self.payment_method = payment_method
        if price_override is not None:
          self.price_override = price_override
        if price_override_reason is not None:
          self.price_override_reason = price_override_reason
        if recurring_price is not None:
          self.recurring_price = recurring_price
        if sku is not None:
          self.sku = sku
        if start_date is not None:
          self.start_date = start_date
        if subscription_status is not None:
          self.subscription_status = subscription_status
        if user is not None:
          self.user = user

    @property
    def bill_date(self):
        """
        Gets the bill_date of this InventorySubscriptionResource.
        The date the subscription will be billed

        :return: The bill_date of this InventorySubscriptionResource.
        :rtype: int
        """
        return self._bill_date

    @bill_date.setter
    def bill_date(self, bill_date):
        """
        Sets the bill_date of this InventorySubscriptionResource.
        The date the subscription will be billed

        :param bill_date: The bill_date of this InventorySubscriptionResource.
        :type: int
        """

        self._bill_date = bill_date

    @property
    def credit(self):
        """
        Gets the credit of this InventorySubscriptionResource.
        A credit of money already applied to a subscription for the next bill, or a debt if negative

        :return: The credit of this InventorySubscriptionResource.
        :rtype: float
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """
        Sets the credit of this InventorySubscriptionResource.
        A credit of money already applied to a subscription for the next bill, or a debt if negative

        :param credit: The credit of this InventorySubscriptionResource.
        :type: float
        """

        self._credit = credit

    @property
    def credit_log(self):
        """
        Gets the credit_log of this InventorySubscriptionResource.
        A record of past and present credit/debt changes

        :return: The credit_log of this InventorySubscriptionResource.
        :rtype: list[SubscriptionCreditResource]
        """
        return self._credit_log

    @credit_log.setter
    def credit_log(self, credit_log):
        """
        Sets the credit_log of this InventorySubscriptionResource.
        A record of past and present credit/debt changes

        :param credit_log: The credit_log of this InventorySubscriptionResource.
        :type: list[SubscriptionCreditResource]
        """

        self._credit_log = credit_log

    @property
    def grace_end(self):
        """
        Gets the grace_end of this InventorySubscriptionResource.
        The date the grace period ends

        :return: The grace_end of this InventorySubscriptionResource.
        :rtype: int
        """
        return self._grace_end

    @grace_end.setter
    def grace_end(self, grace_end):
        """
        Sets the grace_end of this InventorySubscriptionResource.
        The date the grace period ends

        :param grace_end: The grace_end of this InventorySubscriptionResource.
        :type: int
        """

        self._grace_end = grace_end

    @property
    def inventory_id(self):
        """
        Gets the inventory_id of this InventorySubscriptionResource.
        The id of the inventory

        :return: The inventory_id of this InventorySubscriptionResource.
        :rtype: int
        """
        return self._inventory_id

    @inventory_id.setter
    def inventory_id(self, inventory_id):
        """
        Sets the inventory_id of this InventorySubscriptionResource.
        The id of the inventory

        :param inventory_id: The inventory_id of this InventorySubscriptionResource.
        :type: int
        """

        self._inventory_id = inventory_id

    @property
    def inventory_status(self):
        """
        Gets the inventory_status of this InventorySubscriptionResource.
        The inventory status object

        :return: The inventory_status of this InventorySubscriptionResource.
        :rtype: str
        """
        return self._inventory_status

    @inventory_status.setter
    def inventory_status(self, inventory_status):
        """
        Sets the inventory_status of this InventorySubscriptionResource.
        The inventory status object

        :param inventory_status: The inventory_status of this InventorySubscriptionResource.
        :type: str
        """
        allowed_values = ["pending", "active", "inactive"]
        if inventory_status not in allowed_values:
            raise ValueError(
                "Invalid value for `inventory_status` ({0}), must be one of {1}"
                .format(inventory_status, allowed_values)
            )

        self._inventory_status = inventory_status

    @property
    def item_id(self):
        """
        Gets the item_id of this InventorySubscriptionResource.
        The id of the item

        :return: The item_id of this InventorySubscriptionResource.
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this InventorySubscriptionResource.
        The id of the item

        :param item_id: The item_id of this InventorySubscriptionResource.
        :type: int
        """

        self._item_id = item_id

    @property
    def payment_method(self):
        """
        Gets the payment_method of this InventorySubscriptionResource.
        The payment method object

        :return: The payment_method of this InventorySubscriptionResource.
        :rtype: PaymentMethodResource
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """
        Sets the payment_method of this InventorySubscriptionResource.
        The payment method object

        :param payment_method: The payment_method of this InventorySubscriptionResource.
        :type: PaymentMethodResource
        """

        self._payment_method = payment_method

    @property
    def price_override(self):
        """
        Gets the price_override of this InventorySubscriptionResource.
        The recurring price that has been set to override the base price. Null if not overriding

        :return: The price_override of this InventorySubscriptionResource.
        :rtype: float
        """
        return self._price_override

    @price_override.setter
    def price_override(self, price_override):
        """
        Sets the price_override of this InventorySubscriptionResource.
        The recurring price that has been set to override the base price. Null if not overriding

        :param price_override: The price_override of this InventorySubscriptionResource.
        :type: float
        """

        self._price_override = price_override

    @property
    def price_override_reason(self):
        """
        Gets the price_override_reason of this InventorySubscriptionResource.
        An explanation for the reason the price is being overridden

        :return: The price_override_reason of this InventorySubscriptionResource.
        :rtype: str
        """
        return self._price_override_reason

    @price_override_reason.setter
    def price_override_reason(self, price_override_reason):
        """
        Sets the price_override_reason of this InventorySubscriptionResource.
        An explanation for the reason the price is being overridden

        :param price_override_reason: The price_override_reason of this InventorySubscriptionResource.
        :type: str
        """

        self._price_override_reason = price_override_reason

    @property
    def recurring_price(self):
        """
        Gets the recurring_price of this InventorySubscriptionResource.
        The default recurring price

        :return: The recurring_price of this InventorySubscriptionResource.
        :rtype: float
        """
        return self._recurring_price

    @recurring_price.setter
    def recurring_price(self, recurring_price):
        """
        Sets the recurring_price of this InventorySubscriptionResource.
        The default recurring price

        :param recurring_price: The recurring_price of this InventorySubscriptionResource.
        :type: float
        """

        self._recurring_price = recurring_price

    @property
    def sku(self):
        """
        Gets the sku of this InventorySubscriptionResource.
        The recurring sku of the subscription

        :return: The sku of this InventorySubscriptionResource.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this InventorySubscriptionResource.
        The recurring sku of the subscription

        :param sku: The sku of this InventorySubscriptionResource.
        :type: str
        """

        self._sku = sku

    @property
    def start_date(self):
        """
        Gets the start_date of this InventorySubscriptionResource.
        The date the subscription will start

        :return: The start_date of this InventorySubscriptionResource.
        :rtype: int
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this InventorySubscriptionResource.
        The date the subscription will start

        :param start_date: The start_date of this InventorySubscriptionResource.
        :type: int
        """

        self._start_date = start_date

    @property
    def subscription_status(self):
        """
        Gets the subscription_status of this InventorySubscriptionResource.
        The status of the subscription

        :return: The subscription_status of this InventorySubscriptionResource.
        :rtype: int
        """
        return self._subscription_status

    @subscription_status.setter
    def subscription_status(self, subscription_status):
        """
        Sets the subscription_status of this InventorySubscriptionResource.
        The status of the subscription

        :param subscription_status: The subscription_status of this InventorySubscriptionResource.
        :type: int
        """

        self._subscription_status = subscription_status

    @property
    def user(self):
        """
        Gets the user of this InventorySubscriptionResource.
        The user

        :return: The user of this InventorySubscriptionResource.
        :rtype: SimpleUserResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this InventorySubscriptionResource.
        The user

        :param user: The user of this InventorySubscriptionResource.
        :type: SimpleUserResource
        """

        self._user = user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InventorySubscriptionResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
