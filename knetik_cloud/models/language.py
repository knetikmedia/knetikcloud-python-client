# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Language(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, code=None, date_created=None, date_updated=None, description=None, direction=None, id=None, is_primary=None, name=None):
        """
        Language - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code': 'str',
            'date_created': 'int',
            'date_updated': 'int',
            'description': 'str',
            'direction': 'str',
            'id': 'int',
            'is_primary': 'bool',
            'name': 'str'
        }

        self.attribute_map = {
            'code': 'code',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'description': 'description',
            'direction': 'direction',
            'id': 'id',
            'is_primary': 'is_primary',
            'name': 'name'
        }

        self._code = code
        self._date_created = date_created
        self._date_updated = date_updated
        self._description = description
        self._direction = direction
        self._id = id
        self._is_primary = is_primary
        self._name = name

    @property
    def code(self):
        """
        Gets the code of this Language.

        :return: The code of this Language.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Language.

        :param code: The code of this Language.
        :type: str
        """

        self._code = code

    @property
    def date_created(self):
        """
        Gets the date_created of this Language.

        :return: The date_created of this Language.
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this Language.

        :param date_created: The date_created of this Language.
        :type: int
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """
        Gets the date_updated of this Language.

        :return: The date_updated of this Language.
        :rtype: int
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """
        Sets the date_updated of this Language.

        :param date_updated: The date_updated of this Language.
        :type: int
        """

        self._date_updated = date_updated

    @property
    def description(self):
        """
        Gets the description of this Language.

        :return: The description of this Language.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Language.

        :param description: The description of this Language.
        :type: str
        """

        self._description = description

    @property
    def direction(self):
        """
        Gets the direction of this Language.

        :return: The direction of this Language.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this Language.

        :param direction: The direction of this Language.
        :type: str
        """

        self._direction = direction

    @property
    def id(self):
        """
        Gets the id of this Language.

        :return: The id of this Language.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Language.

        :param id: The id of this Language.
        :type: int
        """

        self._id = id

    @property
    def is_primary(self):
        """
        Gets the is_primary of this Language.

        :return: The is_primary of this Language.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """
        Sets the is_primary of this Language.

        :param is_primary: The is_primary of this Language.
        :type: bool
        """

        self._is_primary = is_primary

    @property
    def name(self):
        """
        Gets the name of this Language.

        :return: The name of this Language.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Language.

        :param name: The name of this Language.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Language):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
