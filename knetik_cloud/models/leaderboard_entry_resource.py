# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LeaderboardEntryResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rank': 'int',
        'score': 'int',
        'updated_date': 'int',
        'user': 'SimpleUserResource'
    }

    attribute_map = {
        'rank': 'rank',
        'score': 'score',
        'updated_date': 'updated_date',
        'user': 'user'
    }

    def __init__(self, rank=None, score=None, updated_date=None, user=None):
        """
        LeaderboardEntryResource - a model defined in Swagger
        """

        self._rank = None
        self._score = None
        self._updated_date = None
        self._user = None
        self.discriminator = None

        if rank is not None:
          self.rank = rank
        if score is not None:
          self.score = score
        if updated_date is not None:
          self.updated_date = updated_date
        self.user = user

    @property
    def rank(self):
        """
        Gets the rank of this LeaderboardEntryResource.
        The position of the user in the leaderboard. Null means non-compete or disqualification

        :return: The rank of this LeaderboardEntryResource.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """
        Sets the rank of this LeaderboardEntryResource.
        The position of the user in the leaderboard. Null means non-compete or disqualification

        :param rank: The rank of this LeaderboardEntryResource.
        :type: int
        """

        self._rank = rank

    @property
    def score(self):
        """
        Gets the score of this LeaderboardEntryResource.
        The raw score in this leaderboard. Null means non-compete or disqualification

        :return: The score of this LeaderboardEntryResource.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """
        Sets the score of this LeaderboardEntryResource.
        The raw score in this leaderboard. Null means non-compete or disqualification

        :param score: The score of this LeaderboardEntryResource.
        :type: int
        """

        self._score = score

    @property
    def updated_date(self):
        """
        Gets the updated_date of this LeaderboardEntryResource.
        The date this score was recorded or updated. Unix timestamp in seconds

        :return: The updated_date of this LeaderboardEntryResource.
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """
        Sets the updated_date of this LeaderboardEntryResource.
        The date this score was recorded or updated. Unix timestamp in seconds

        :param updated_date: The updated_date of this LeaderboardEntryResource.
        :type: int
        """

        self._updated_date = updated_date

    @property
    def user(self):
        """
        Gets the user of this LeaderboardEntryResource.
        The player for this entry

        :return: The user of this LeaderboardEntryResource.
        :rtype: SimpleUserResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this LeaderboardEntryResource.
        The player for this entry

        :param user: The user of this LeaderboardEntryResource.
        :type: SimpleUserResource
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LeaderboardEntryResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
