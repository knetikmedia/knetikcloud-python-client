# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LimitedGettableGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_only': 'bool',
        'name': 'str',
        'owned_limit': 'int'
    }

    attribute_map = {
        'active_only': 'active_only',
        'name': 'name',
        'owned_limit': 'owned_limit'
    }

    def __init__(self, active_only=None, name=None, owned_limit=None):
        """
        LimitedGettableGroup - a model defined in Swagger
        """

        self._active_only = None
        self._name = None
        self._owned_limit = None

        self.active_only = active_only
        if name is not None:
          self.name = name
        self.owned_limit = owned_limit

    @property
    def active_only(self):
        """
        Gets the active_only of this LimitedGettableGroup.
        Whether to get active items only

        :return: The active_only of this LimitedGettableGroup.
        :rtype: bool
        """
        return self._active_only

    @active_only.setter
    def active_only(self, active_only):
        """
        Sets the active_only of this LimitedGettableGroup.
        Whether to get active items only

        :param active_only: The active_only of this LimitedGettableGroup.
        :type: bool
        """
        if active_only is None:
            raise ValueError("Invalid value for `active_only`, must not be `None`")

        self._active_only = active_only

    @property
    def name(self):
        """
        Gets the name of this LimitedGettableGroup.
        The name of the group. Multiple items with the same group name will be limited together, leave null to be assigned a random unique name. It is typical that owned_limit and active_only will be the same for all, but this is not enforced and the item being recieved will use its settings.

        :return: The name of this LimitedGettableGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LimitedGettableGroup.
        The name of the group. Multiple items with the same group name will be limited together, leave null to be assigned a random unique name. It is typical that owned_limit and active_only will be the same for all, but this is not enforced and the item being recieved will use its settings.

        :param name: The name of this LimitedGettableGroup.
        :type: str
        """

        self._name = name

    @property
    def owned_limit(self):
        """
        Gets the owned_limit of this LimitedGettableGroup.
        The max number of items that can be purchased

        :return: The owned_limit of this LimitedGettableGroup.
        :rtype: int
        """
        return self._owned_limit

    @owned_limit.setter
    def owned_limit(self, owned_limit):
        """
        Sets the owned_limit of this LimitedGettableGroup.
        The max number of items that can be purchased

        :param owned_limit: The owned_limit of this LimitedGettableGroup.
        :type: int
        """
        if owned_limit is None:
            raise ValueError("Invalid value for `owned_limit`, must not be `None`")

        self._owned_limit = owned_limit

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LimitedGettableGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
