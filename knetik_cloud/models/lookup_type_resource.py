# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LookupTypeResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, description=None, key_type=None, name=None, value_type=None):
        """
        LookupTypeResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'key_type': 'str',
            'name': 'str',
            'value_type': 'str'
        }

        self.attribute_map = {
            'description': 'description',
            'key_type': 'key_type',
            'name': 'name',
            'value_type': 'value_type'
        }

        self._description = description
        self._key_type = key_type
        self._name = name
        self._value_type = value_type

    @property
    def description(self):
        """
        Gets the description of this LookupTypeResource.
        The description of the expression type

        :return: The description of this LookupTypeResource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this LookupTypeResource.
        The description of the expression type

        :param description: The description of this LookupTypeResource.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def key_type(self):
        """
        Gets the key_type of this LookupTypeResource.
        The variable type the key expression must be, or null if it's dependent (see description for explanation in this case)

        :return: The key_type of this LookupTypeResource.
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """
        Sets the key_type of this LookupTypeResource.
        The variable type the key expression must be, or null if it's dependent (see description for explanation in this case)

        :param key_type: The key_type of this LookupTypeResource.
        :type: str
        """
        if key_type is None:
            raise ValueError("Invalid value for `key_type`, must not be `None`")

        self._key_type = key_type

    @property
    def name(self):
        """
        Gets the name of this LookupTypeResource.
        The name of the expression type

        :return: The name of this LookupTypeResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LookupTypeResource.
        The name of the expression type

        :param name: The name of this LookupTypeResource.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value_type(self):
        """
        Gets the value_type of this LookupTypeResource.
        The variable type of the value this expression returns, or null if it's dependent (see description for explanation in this case)

        :return: The value_type of this LookupTypeResource.
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """
        Sets the value_type of this LookupTypeResource.
        The variable type of the value this expression returns, or null if it's dependent (see description for explanation in this case)

        :param value_type: The value_type of this LookupTypeResource.
        :type: str
        """
        if value_type is None:
            raise ValueError("Invalid value for `value_type`, must not be `None`")

        self._value_type = value_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LookupTypeResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
