# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MessageContentResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'push': 'str',
        'sms': 'str',
        'templated_email': 'TemplatedEmail',
        'websocket': 'object'
    }

    attribute_map = {
        'email': 'email',
        'push': 'push',
        'sms': 'sms',
        'templated_email': 'templated_email',
        'websocket': 'websocket'
    }

    def __init__(self, email=None, push=None, sms=None, templated_email=None, websocket=None):
        """
        MessageContentResource - a model defined in Swagger
        """

        self._email = None
        self._push = None
        self._sms = None
        self._templated_email = None
        self._websocket = None
        self.discriminator = None

        if email is not None:
          self.email = email
        if push is not None:
          self.push = push
        if sms is not None:
          self.sms = sms
        if templated_email is not None:
          self.templated_email = templated_email
        if websocket is not None:
          self.websocket = websocket

    @property
    def email(self):
        """
        Gets the email of this MessageContentResource.
        The content of the email

        :return: The email of this MessageContentResource.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this MessageContentResource.
        The content of the email

        :param email: The email of this MessageContentResource.
        :type: str
        """

        self._email = email

    @property
    def push(self):
        """
        Gets the push of this MessageContentResource.
        The content of the mobile app push notification

        :return: The push of this MessageContentResource.
        :rtype: str
        """
        return self._push

    @push.setter
    def push(self, push):
        """
        Sets the push of this MessageContentResource.
        The content of the mobile app push notification

        :param push: The push of this MessageContentResource.
        :type: str
        """

        self._push = push

    @property
    def sms(self):
        """
        Gets the sms of this MessageContentResource.
        The content of the sms

        :return: The sms of this MessageContentResource.
        :rtype: str
        """
        return self._sms

    @sms.setter
    def sms(self, sms):
        """
        Sets the sms of this MessageContentResource.
        The content of the sms

        :param sms: The sms of this MessageContentResource.
        :type: str
        """

        self._sms = sms

    @property
    def templated_email(self):
        """
        Gets the templated_email of this MessageContentResource.
        The content of the templated email

        :return: The templated_email of this MessageContentResource.
        :rtype: TemplatedEmail
        """
        return self._templated_email

    @templated_email.setter
    def templated_email(self, templated_email):
        """
        Sets the templated_email of this MessageContentResource.
        The content of the templated email

        :param templated_email: The templated_email of this MessageContentResource.
        :type: TemplatedEmail
        """

        self._templated_email = templated_email

    @property
    def websocket(self):
        """
        Gets the websocket of this MessageContentResource.
        The content of the websocket message

        :return: The websocket of this MessageContentResource.
        :rtype: object
        """
        return self._websocket

    @websocket.setter
    def websocket(self, websocket):
        """
        Sets the websocket of this MessageContentResource.
        The content of the websocket message

        :param websocket: The websocket of this MessageContentResource.
        :type: object
        """

        self._websocket = websocket

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MessageContentResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
