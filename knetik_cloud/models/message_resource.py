# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MessageResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'MessageContentResource',
        'recipient': 'str',
        'recipient_type': 'str',
        'subject': 'str',
        'type': 'str'
    }

    attribute_map = {
        'content': 'content',
        'recipient': 'recipient',
        'recipient_type': 'recipient_type',
        'subject': 'subject',
        'type': 'type'
    }

    def __init__(self, content=None, recipient=None, recipient_type=None, subject=None, type=None):
        """
        MessageResource - a model defined in Swagger
        """

        self._content = None
        self._recipient = None
        self._recipient_type = None
        self._subject = None
        self._type = None
        self.discriminator = None

        self.content = content
        if recipient is not None:
          self.recipient = recipient
        if recipient_type is not None:
          self.recipient_type = recipient_type
        if subject is not None:
          self.subject = subject
        if type is not None:
          self.type = type

    @property
    def content(self):
        """
        Gets the content of this MessageResource.
        The content of the message in various formats

        :return: The content of this MessageResource.
        :rtype: MessageContentResource
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this MessageResource.
        The content of the message in various formats

        :param content: The content of this MessageResource.
        :type: MessageContentResource
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def recipient(self):
        """
        Gets the recipient of this MessageResource.
        The id of the recipient, dependent on the recipient_type. The user's id or the topic's id. Required if sending directly to messaging service

        :return: The recipient of this MessageResource.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """
        Sets the recipient of this MessageResource.
        The id of the recipient, dependent on the recipient_type. The user's id or the topic's id. Required if sending directly to messaging service

        :param recipient: The recipient of this MessageResource.
        :type: str
        """

        self._recipient = recipient

    @property
    def recipient_type(self):
        """
        Gets the recipient_type of this MessageResource.
        The type of recipient for the message. Either a user, or all users in a topic. Required if sending directly to messaging service

        :return: The recipient_type of this MessageResource.
        :rtype: str
        """
        return self._recipient_type

    @recipient_type.setter
    def recipient_type(self, recipient_type):
        """
        Sets the recipient_type of this MessageResource.
        The type of recipient for the message. Either a user, or all users in a topic. Required if sending directly to messaging service

        :param recipient_type: The recipient_type of this MessageResource.
        :type: str
        """
        allowed_values = ["user", "topic"]
        if recipient_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recipient_type` ({0}), must be one of {1}"
                .format(recipient_type, allowed_values)
            )

        self._recipient_type = recipient_type

    @property
    def subject(self):
        """
        Gets the subject of this MessageResource.
        The subject of the message. Required for email messages

        :return: The subject of this MessageResource.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this MessageResource.
        The subject of the message. Required for email messages

        :param subject: The subject of this MessageResource.
        :type: str
        """

        self._subject = subject

    @property
    def type(self):
        """
        Gets the type of this MessageResource.
        The type of message for websocket type hinting. will be added to the payload with the key _type

        :return: The type of this MessageResource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this MessageResource.
        The type of message for websocket type hinting. will be added to the payload with the key _type

        :param type: The type of this MessageResource.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MessageResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
