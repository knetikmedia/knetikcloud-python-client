# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MobileDeviceResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization': 'str',
        'imei': 'str',
        'notification_platform': 'str',
        'number': 'str'
    }

    attribute_map = {
        'authorization': 'authorization',
        'imei': 'imei',
        'notification_platform': 'notification_platform',
        'number': 'number'
    }

    def __init__(self, authorization=None, imei=None, notification_platform=None, number=None):
        """
        MobileDeviceResource - a model defined in Swagger
        """

        self._authorization = None
        self._imei = None
        self._notification_platform = None
        self._number = None
        self.discriminator = None

        if authorization is not None:
          self.authorization = authorization
        if imei is not None:
          self.imei = imei
        if notification_platform is not None:
          self.notification_platform = notification_platform
        if number is not None:
          self.number = number

    @property
    def authorization(self):
        """
        Gets the authorization of this MobileDeviceResource.
        The authorization code for push notifications provided by the provider platform (APNS, GCM, etc).

        :return: The authorization of this MobileDeviceResource.
        :rtype: str
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """
        Sets the authorization of this MobileDeviceResource.
        The authorization code for push notifications provided by the provider platform (APNS, GCM, etc).

        :param authorization: The authorization of this MobileDeviceResource.
        :type: str
        """

        self._authorization = authorization

    @property
    def imei(self):
        """
        Gets the imei of this MobileDeviceResource.

        :return: The imei of this MobileDeviceResource.
        :rtype: str
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """
        Sets the imei of this MobileDeviceResource.

        :param imei: The imei of this MobileDeviceResource.
        :type: str
        """

        self._imei = imei

    @property
    def notification_platform(self):
        """
        Gets the notification_platform of this MobileDeviceResource.
        The platform used for push notifications. Only Apple and Android are supported at the moment.

        :return: The notification_platform of this MobileDeviceResource.
        :rtype: str
        """
        return self._notification_platform

    @notification_platform.setter
    def notification_platform(self, notification_platform):
        """
        Sets the notification_platform of this MobileDeviceResource.
        The platform used for push notifications. Only Apple and Android are supported at the moment.

        :param notification_platform: The notification_platform of this MobileDeviceResource.
        :type: str
        """
        allowed_values = ["APNS", "GCM"]
        if notification_platform not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_platform` ({0}), must be one of {1}"
                .format(notification_platform, allowed_values)
            )

        self._notification_platform = notification_platform

    @property
    def number(self):
        """
        Gets the number of this MobileDeviceResource.
        The phone number associated with this device if applicable, in international format

        :return: The number of this MobileDeviceResource.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this MobileDeviceResource.
        The phone number associated with this device if applicable, in international format

        :param number: The number of this MobileDeviceResource.
        :type: str
        """

        self._number = number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MobileDeviceResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
