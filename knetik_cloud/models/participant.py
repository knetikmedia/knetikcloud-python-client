# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Participant(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'bool',
        'status': 'str',
        'user': 'IdRef'
    }

    attribute_map = {
        'host': 'host',
        'status': 'status',
        'user': 'user'
    }

    def __init__(self, host=None, status=None, user=None):
        """
        Participant - a model defined in Swagger
        """

        self._host = None
        self._status = None
        self._user = None
        self.discriminator = None

        if host is not None:
          self.host = host
        if status is not None:
          self.status = status
        self.user = user

    @property
    def host(self):
        """
        Gets the host of this Participant.
        Whether this user is the 'host' of the occurrence and has increased access to settings/etc (default: false)

        :return: The host of this Participant.
        :rtype: bool
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this Participant.
        Whether this user is the 'host' of the occurrence and has increased access to settings/etc (default: false)

        :param host: The host of this Participant.
        :type: bool
        """

        self._host = host

    @property
    def status(self):
        """
        Gets the status of this Participant.
        The current status of the user in the occurrence (default: present)

        :return: The status of this Participant.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Participant.
        The current status of the user in the occurrence (default: present)

        :param status: The status of this Participant.
        :type: str
        """
        allowed_values = ["present", "ready", "left", "surrendered", "disconnected"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def user(self):
        """
        Gets the user of this Participant.
        The user

        :return: The user of this Participant.
        :rtype: IdRef
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this Participant.
        The user

        :param user: The user of this Participant.
        :type: IdRef
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Participant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
