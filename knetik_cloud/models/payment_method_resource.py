# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PaymentMethodResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_date': 'int',
        'default': 'bool',
        'disabled': 'bool',
        'expiration_date': 'int',
        'expiration_month': 'int',
        'expiration_year': 'int',
        'id': 'int',
        'last4': 'str',
        'name': 'str',
        'payment_method_type': 'PaymentMethodTypeResource',
        'payment_type': 'str',
        'sort': 'int',
        'token': 'str',
        'unique_key': 'str',
        'updated_date': 'int',
        'user_id': 'int',
        'verified': 'bool'
    }

    attribute_map = {
        'created_date': 'created_date',
        'default': 'default',
        'disabled': 'disabled',
        'expiration_date': 'expiration_date',
        'expiration_month': 'expiration_month',
        'expiration_year': 'expiration_year',
        'id': 'id',
        'last4': 'last4',
        'name': 'name',
        'payment_method_type': 'payment_method_type',
        'payment_type': 'payment_type',
        'sort': 'sort',
        'token': 'token',
        'unique_key': 'unique_key',
        'updated_date': 'updated_date',
        'user_id': 'user_id',
        'verified': 'verified'
    }

    def __init__(self, created_date=None, default=None, disabled=None, expiration_date=None, expiration_month=None, expiration_year=None, id=None, last4=None, name=None, payment_method_type=None, payment_type=None, sort=None, token=None, unique_key=None, updated_date=None, user_id=None, verified=None):
        """
        PaymentMethodResource - a model defined in Swagger
        """

        self._created_date = None
        self._default = None
        self._disabled = None
        self._expiration_date = None
        self._expiration_month = None
        self._expiration_year = None
        self._id = None
        self._last4 = None
        self._name = None
        self._payment_method_type = None
        self._payment_type = None
        self._sort = None
        self._token = None
        self._unique_key = None
        self._updated_date = None
        self._user_id = None
        self._verified = None
        self.discriminator = None

        if created_date is not None:
          self.created_date = created_date
        if default is not None:
          self.default = default
        if disabled is not None:
          self.disabled = disabled
        if expiration_date is not None:
          self.expiration_date = expiration_date
        if expiration_month is not None:
          self.expiration_month = expiration_month
        if expiration_year is not None:
          self.expiration_year = expiration_year
        if id is not None:
          self.id = id
        if last4 is not None:
          self.last4 = last4
        self.name = name
        self.payment_method_type = payment_method_type
        if payment_type is not None:
          self.payment_type = payment_type
        if sort is not None:
          self.sort = sort
        if token is not None:
          self.token = token
        if unique_key is not None:
          self.unique_key = unique_key
        if updated_date is not None:
          self.updated_date = updated_date
        if user_id is not None:
          self.user_id = user_id
        if verified is not None:
          self.verified = verified

    @property
    def created_date(self):
        """
        Gets the created_date of this PaymentMethodResource.
        The date/time this resource was created in seconds since unix epoch

        :return: The created_date of this PaymentMethodResource.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this PaymentMethodResource.
        The date/time this resource was created in seconds since unix epoch

        :param created_date: The created_date of this PaymentMethodResource.
        :type: int
        """

        self._created_date = created_date

    @property
    def default(self):
        """
        Gets the default of this PaymentMethodResource.

        :return: The default of this PaymentMethodResource.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """
        Sets the default of this PaymentMethodResource.

        :param default: The default of this PaymentMethodResource.
        :type: bool
        """

        self._default = default

    @property
    def disabled(self):
        """
        Gets the disabled of this PaymentMethodResource.
        Whether this payment method is disabled or not

        :return: The disabled of this PaymentMethodResource.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """
        Sets the disabled of this PaymentMethodResource.
        Whether this payment method is disabled or not

        :param disabled: The disabled of this PaymentMethodResource.
        :type: bool
        """

        self._disabled = disabled

    @property
    def expiration_date(self):
        """
        Gets the expiration_date of this PaymentMethodResource.
        The expiration date for the payment method, expressed as seconds since epoch. Typically used for credit card payment methods

        :return: The expiration_date of this PaymentMethodResource.
        :rtype: int
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """
        Sets the expiration_date of this PaymentMethodResource.
        The expiration date for the payment method, expressed as seconds since epoch. Typically used for credit card payment methods

        :param expiration_date: The expiration_date of this PaymentMethodResource.
        :type: int
        """

        self._expiration_date = expiration_date

    @property
    def expiration_month(self):
        """
        Gets the expiration_month of this PaymentMethodResource.
        The expiration month (1 - 12) for the payment method. Typically used for credit card payment methods

        :return: The expiration_month of this PaymentMethodResource.
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """
        Sets the expiration_month of this PaymentMethodResource.
        The expiration month (1 - 12) for the payment method. Typically used for credit card payment methods

        :param expiration_month: The expiration_month of this PaymentMethodResource.
        :type: int
        """

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """
        Gets the expiration_year of this PaymentMethodResource.
        The expiration year for the payment method. Typically used for credit card payment methods

        :return: The expiration_year of this PaymentMethodResource.
        :rtype: int
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """
        Sets the expiration_year of this PaymentMethodResource.
        The expiration year for the payment method. Typically used for credit card payment methods

        :param expiration_year: The expiration_year of this PaymentMethodResource.
        :type: int
        """

        self._expiration_year = expiration_year

    @property
    def id(self):
        """
        Gets the id of this PaymentMethodResource.
        The unique ID of the resource

        :return: The id of this PaymentMethodResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PaymentMethodResource.
        The unique ID of the resource

        :param id: The id of this PaymentMethodResource.
        :type: int
        """

        self._id = id

    @property
    def last4(self):
        """
        Gets the last4 of this PaymentMethodResource.
        The last 4 digits of the account number for the payment method. Typically used for credit card payment methods

        :return: The last4 of this PaymentMethodResource.
        :rtype: str
        """
        return self._last4

    @last4.setter
    def last4(self, last4):
        """
        Sets the last4 of this PaymentMethodResource.
        The last 4 digits of the account number for the payment method. Typically used for credit card payment methods

        :param last4: The last4 of this PaymentMethodResource.
        :type: str
        """

        self._last4 = last4

    @property
    def name(self):
        """
        Gets the name of this PaymentMethodResource.
        The user friendly name of the resource

        :return: The name of this PaymentMethodResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PaymentMethodResource.
        The user friendly name of the resource

        :param name: The name of this PaymentMethodResource.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def payment_method_type(self):
        """
        Gets the payment_method_type of this PaymentMethodResource.
        The type of payment method. Must be a pre-existing value

        :return: The payment_method_type of this PaymentMethodResource.
        :rtype: PaymentMethodTypeResource
        """
        return self._payment_method_type

    @payment_method_type.setter
    def payment_method_type(self, payment_method_type):
        """
        Sets the payment_method_type of this PaymentMethodResource.
        The type of payment method. Must be a pre-existing value

        :param payment_method_type: The payment_method_type of this PaymentMethodResource.
        :type: PaymentMethodTypeResource
        """
        if payment_method_type is None:
            raise ValueError("Invalid value for `payment_method_type`, must not be `None`")

        self._payment_method_type = payment_method_type

    @property
    def payment_type(self):
        """
        Gets the payment_type of this PaymentMethodResource.
        The generic payment type. Default is card

        :return: The payment_type of this PaymentMethodResource.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """
        Sets the payment_type of this PaymentMethodResource.
        The generic payment type. Default is card

        :param payment_type: The payment_type of this PaymentMethodResource.
        :type: str
        """
        allowed_values = ["card", "bank_account"]
        if payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_type` ({0}), must be one of {1}"
                .format(payment_type, allowed_values)
            )

        self._payment_type = payment_type

    @property
    def sort(self):
        """
        Gets the sort of this PaymentMethodResource.
        The sort value for the payment method

        :return: The sort of this PaymentMethodResource.
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """
        Sets the sort of this PaymentMethodResource.
        The sort value for the payment method

        :param sort: The sort of this PaymentMethodResource.
        :type: int
        """

        self._sort = sort

    @property
    def token(self):
        """
        Gets the token of this PaymentMethodResource.
        The unique token for the payment method

        :return: The token of this PaymentMethodResource.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this PaymentMethodResource.
        The unique token for the payment method

        :param token: The token of this PaymentMethodResource.
        :type: str
        """

        self._token = token

    @property
    def unique_key(self):
        """
        Gets the unique_key of this PaymentMethodResource.
        An optional unique identifier

        :return: The unique_key of this PaymentMethodResource.
        :rtype: str
        """
        return self._unique_key

    @unique_key.setter
    def unique_key(self, unique_key):
        """
        Sets the unique_key of this PaymentMethodResource.
        An optional unique identifier

        :param unique_key: The unique_key of this PaymentMethodResource.
        :type: str
        """

        self._unique_key = unique_key

    @property
    def updated_date(self):
        """
        Gets the updated_date of this PaymentMethodResource.
        The date/time this resource was last updated in seconds since unix epoch

        :return: The updated_date of this PaymentMethodResource.
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """
        Sets the updated_date of this PaymentMethodResource.
        The date/time this resource was last updated in seconds since unix epoch

        :param updated_date: The updated_date of this PaymentMethodResource.
        :type: int
        """

        self._updated_date = updated_date

    @property
    def user_id(self):
        """
        Gets the user_id of this PaymentMethodResource.
        The user's id. If null, indicates a shared payment method that any user can use (i.e., 'wallet')

        :return: The user_id of this PaymentMethodResource.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this PaymentMethodResource.
        The user's id. If null, indicates a shared payment method that any user can use (i.e., 'wallet')

        :param user_id: The user_id of this PaymentMethodResource.
        :type: int
        """

        self._user_id = user_id

    @property
    def verified(self):
        """
        Gets the verified of this PaymentMethodResource.

        :return: The verified of this PaymentMethodResource.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """
        Sets the verified of this PaymentMethodResource.

        :param verified: The verified of this PaymentMethodResource.
        :type: bool
        """

        self._verified = verified

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PaymentMethodResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
