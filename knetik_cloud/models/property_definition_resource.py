# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PropertyDefinitionResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'field_list': 'PropertyFieldListResource',
        'friendly_name': 'str',
        'name': 'str',
        'option_label_path': 'str',
        'option_value_path': 'str',
        'options_url': 'str',
        'required': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'description': 'description',
        'field_list': 'field_list',
        'friendly_name': 'friendly_name',
        'name': 'name',
        'option_label_path': 'option_label_path',
        'option_value_path': 'option_value_path',
        'options_url': 'options_url',
        'required': 'required',
        'type': 'type'
    }

    discriminator_value_class_map = {
        'text': 'TextPropertyDefinitionResource',
        'image': 'ImagePropertyDefinitionResource',
        'audio': 'AudioPropertyDefinitionResource',
        'file_group': 'FileGroupPropertyDefinitionResource',
        'long': 'LongPropertyDefinitionResource',
        'boolean': 'BooleanPropertyDefinitionResource',
        'video': 'VideoPropertyDefinitionResource',
        'image_group': 'ImageGroupPropertyDefinitionResource',
        'formatted_text': 'FormattedTextPropertyDefinitionResource',
        'list': 'ListPropertyDefinitionResource',
        'audio_group': 'AudioGroupPropertyDefinitionResource',
        'double': 'DoublePropertyDefinitionResource',
        'date': 'DatePropertyDefinitionResource',
        'video_group': 'VideoGroupPropertyDefinitionResource',
        'file': 'FilePropertyDefinitionResource',
        'map': 'MapPropertyDefinitionResource',
        'integer': 'IntegerPropertyDefinitionResource'
    }

    def __init__(self, description=None, field_list=None, friendly_name=None, name=None, option_label_path=None, option_value_path=None, options_url=None, required=None, type=None):
        """
        PropertyDefinitionResource - a model defined in Swagger
        """

        self._description = None
        self._field_list = None
        self._friendly_name = None
        self._name = None
        self._option_label_path = None
        self._option_value_path = None
        self._options_url = None
        self._required = None
        self._type = None
        self.discriminator = 'type'

        if description is not None:
          self.description = description
        if field_list is not None:
          self.field_list = field_list
        if friendly_name is not None:
          self.friendly_name = friendly_name
        self.name = name
        if option_label_path is not None:
          self.option_label_path = option_label_path
        if option_value_path is not None:
          self.option_value_path = option_value_path
        if options_url is not None:
          self.options_url = options_url
        self.required = required
        self.type = type

    @property
    def description(self):
        """
        Gets the description of this PropertyDefinitionResource.
        The description of the property

        :return: The description of this PropertyDefinitionResource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this PropertyDefinitionResource.
        The description of the property

        :param description: The description of this PropertyDefinitionResource.
        :type: str
        """

        self._description = description

    @property
    def field_list(self):
        """
        Gets the field_list of this PropertyDefinitionResource.
        A list of the fields on both the property definition and property of this type

        :return: The field_list of this PropertyDefinitionResource.
        :rtype: PropertyFieldListResource
        """
        return self._field_list

    @field_list.setter
    def field_list(self, field_list):
        """
        Sets the field_list of this PropertyDefinitionResource.
        A list of the fields on both the property definition and property of this type

        :param field_list: The field_list of this PropertyDefinitionResource.
        :type: PropertyFieldListResource
        """

        self._field_list = field_list

    @property
    def friendly_name(self):
        """
        Gets the friendly_name of this PropertyDefinitionResource.
        The friendly front-facing name of the property

        :return: The friendly_name of this PropertyDefinitionResource.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """
        Sets the friendly_name of this PropertyDefinitionResource.
        The friendly front-facing name of the property

        :param friendly_name: The friendly_name of this PropertyDefinitionResource.
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def name(self):
        """
        Gets the name of this PropertyDefinitionResource.
        The name of the property

        :return: The name of this PropertyDefinitionResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PropertyDefinitionResource.
        The name of the property

        :param name: The name of this PropertyDefinitionResource.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def option_label_path(self):
        """
        Gets the option_label_path of this PropertyDefinitionResource.
        The JSON path to the option label

        :return: The option_label_path of this PropertyDefinitionResource.
        :rtype: str
        """
        return self._option_label_path

    @option_label_path.setter
    def option_label_path(self, option_label_path):
        """
        Sets the option_label_path of this PropertyDefinitionResource.
        The JSON path to the option label

        :param option_label_path: The option_label_path of this PropertyDefinitionResource.
        :type: str
        """

        self._option_label_path = option_label_path

    @property
    def option_value_path(self):
        """
        Gets the option_value_path of this PropertyDefinitionResource.
        The JSON path to the option value

        :return: The option_value_path of this PropertyDefinitionResource.
        :rtype: str
        """
        return self._option_value_path

    @option_value_path.setter
    def option_value_path(self, option_value_path):
        """
        Sets the option_value_path of this PropertyDefinitionResource.
        The JSON path to the option value

        :param option_value_path: The option_value_path of this PropertyDefinitionResource.
        :type: str
        """

        self._option_value_path = option_value_path

    @property
    def options_url(self):
        """
        Gets the options_url of this PropertyDefinitionResource.
        URL of service containing the property options (assumed JSON array)

        :return: The options_url of this PropertyDefinitionResource.
        :rtype: str
        """
        return self._options_url

    @options_url.setter
    def options_url(self, options_url):
        """
        Sets the options_url of this PropertyDefinitionResource.
        URL of service containing the property options (assumed JSON array)

        :param options_url: The options_url of this PropertyDefinitionResource.
        :type: str
        """

        self._options_url = options_url

    @property
    def required(self):
        """
        Gets the required of this PropertyDefinitionResource.
        Whether the property is required

        :return: The required of this PropertyDefinitionResource.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this PropertyDefinitionResource.
        Whether the property is required

        :param required: The required of this PropertyDefinitionResource.
        :type: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def type(self):
        """
        Gets the type of this PropertyDefinitionResource.
        The type of the property. Used for polymorphic type recognition and thus must match an expected type with additional properties.

        :return: The type of this PropertyDefinitionResource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PropertyDefinitionResource.
        The type of the property. Used for polymorphic type recognition and thus must match an expected type with additional properties.

        :param type: The type of this PropertyDefinitionResource.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    def get_real_child_model(self, data):
        """
        Returns the real base class specified by the discriminator
        """
        discriminator_value = data[self.discriminator].lower()
        if self.discriminator_value_class_map.has_key(discriminator_value):
            return self.discriminator_value_class_map[discriminator_value]
        else:
            return None

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PropertyDefinitionResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
