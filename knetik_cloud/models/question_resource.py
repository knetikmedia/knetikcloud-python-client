# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class QuestionResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, additional_properties=None, answers=None, category=None, created_date=None, difficulty=None, id=None, import_id=None, published_date=None, question=None, source1=None, source2=None, tags=None, template=None, updated_date=None, vendor=None):
        """
        QuestionResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'additional_properties': 'dict(str, ModelProperty)',
            'answers': 'list[AnswerResource]',
            'category': 'NestedCategory',
            'created_date': 'int',
            'difficulty': 'int',
            'id': 'str',
            'import_id': 'int',
            'published_date': 'int',
            'question': 'ModelProperty',
            'source1': 'str',
            'source2': 'str',
            'tags': 'list[str]',
            'template': 'str',
            'updated_date': 'int',
            'vendor': 'str'
        }

        self.attribute_map = {
            'additional_properties': 'additional_properties',
            'answers': 'answers',
            'category': 'category',
            'created_date': 'created_date',
            'difficulty': 'difficulty',
            'id': 'id',
            'import_id': 'import_id',
            'published_date': 'published_date',
            'question': 'question',
            'source1': 'source1',
            'source2': 'source2',
            'tags': 'tags',
            'template': 'template',
            'updated_date': 'updated_date',
            'vendor': 'vendor'
        }

        self._additional_properties = additional_properties
        self._answers = answers
        self._category = category
        self._created_date = created_date
        self._difficulty = difficulty
        self._id = id
        self._import_id = import_id
        self._published_date = published_date
        self._question = question
        self._source1 = source1
        self._source2 = source2
        self._tags = tags
        self._template = template
        self._updated_date = updated_date
        self._vendor = vendor

    @property
    def additional_properties(self):
        """
        Gets the additional_properties of this QuestionResource.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type

        :return: The additional_properties of this QuestionResource.
        :rtype: dict(str, ModelProperty)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """
        Sets the additional_properties of this QuestionResource.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type

        :param additional_properties: The additional_properties of this QuestionResource.
        :type: dict(str, ModelProperty)
        """

        self._additional_properties = additional_properties

    @property
    def answers(self):
        """
        Gets the answers of this QuestionResource.
        The list of available answers

        :return: The answers of this QuestionResource.
        :rtype: list[AnswerResource]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """
        Sets the answers of this QuestionResource.
        The list of available answers

        :param answers: The answers of this QuestionResource.
        :type: list[AnswerResource]
        """

        self._answers = answers

    @property
    def category(self):
        """
        Gets the category of this QuestionResource.
        The category for the question

        :return: The category of this QuestionResource.
        :rtype: NestedCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this QuestionResource.
        The category for the question

        :param category: The category of this QuestionResource.
        :type: NestedCategory
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def created_date(self):
        """
        Gets the created_date of this QuestionResource.
        The date/time this resource was created in seconds since unix epoch

        :return: The created_date of this QuestionResource.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this QuestionResource.
        The date/time this resource was created in seconds since unix epoch

        :param created_date: The created_date of this QuestionResource.
        :type: int
        """

        self._created_date = created_date

    @property
    def difficulty(self):
        """
        Gets the difficulty of this QuestionResource.
        The difficulty of the question

        :return: The difficulty of this QuestionResource.
        :rtype: int
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """
        Sets the difficulty of this QuestionResource.
        The difficulty of the question

        :param difficulty: The difficulty of this QuestionResource.
        :type: int
        """
        if difficulty is None:
            raise ValueError("Invalid value for `difficulty`, must not be `None`")

        self._difficulty = difficulty

    @property
    def id(self):
        """
        Gets the id of this QuestionResource.
        The unique ID for that resource

        :return: The id of this QuestionResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this QuestionResource.
        The unique ID for that resource

        :param id: The id of this QuestionResource.
        :type: str
        """

        self._id = id

    @property
    def import_id(self):
        """
        Gets the import_id of this QuestionResource.
        The id of the import job that created the question, or null if not from an import

        :return: The import_id of this QuestionResource.
        :rtype: int
        """
        return self._import_id

    @import_id.setter
    def import_id(self, import_id):
        """
        Sets the import_id of this QuestionResource.
        The id of the import job that created the question, or null if not from an import

        :param import_id: The import_id of this QuestionResource.
        :type: int
        """

        self._import_id = import_id

    @property
    def published_date(self):
        """
        Gets the published_date of this QuestionResource.
        When the question becomes available, null for never, in seconds since epoch

        :return: The published_date of this QuestionResource.
        :rtype: int
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date):
        """
        Sets the published_date of this QuestionResource.
        When the question becomes available, null for never, in seconds since epoch

        :param published_date: The published_date of this QuestionResource.
        :type: int
        """

        self._published_date = published_date

    @property
    def question(self):
        """
        Gets the question of this QuestionResource.
        The question. Different 'type' values indicate different structures as the question may be test, image, etc. See information on additional properties for the list and their structures

        :return: The question of this QuestionResource.
        :rtype: ModelProperty
        """
        return self._question

    @question.setter
    def question(self, question):
        """
        Sets the question of this QuestionResource.
        The question. Different 'type' values indicate different structures as the question may be test, image, etc. See information on additional properties for the list and their structures

        :param question: The question of this QuestionResource.
        :type: ModelProperty
        """
        if question is None:
            raise ValueError("Invalid value for `question`, must not be `None`")

        self._question = question

    @property
    def source1(self):
        """
        Gets the source1 of this QuestionResource.
        The first source of the question

        :return: The source1 of this QuestionResource.
        :rtype: str
        """
        return self._source1

    @source1.setter
    def source1(self, source1):
        """
        Sets the source1 of this QuestionResource.
        The first source of the question

        :param source1: The source1 of this QuestionResource.
        :type: str
        """

        self._source1 = source1

    @property
    def source2(self):
        """
        Gets the source2 of this QuestionResource.
        The second source of the question

        :return: The source2 of this QuestionResource.
        :rtype: str
        """
        return self._source2

    @source2.setter
    def source2(self, source2):
        """
        Sets the source2 of this QuestionResource.
        The second source of the question

        :param source2: The source2 of this QuestionResource.
        :type: str
        """

        self._source2 = source2

    @property
    def tags(self):
        """
        Gets the tags of this QuestionResource.
        The list of tags

        :return: The tags of this QuestionResource.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this QuestionResource.
        The list of tags

        :param tags: The tags of this QuestionResource.
        :type: list[str]
        """

        self._tags = tags

    @property
    def template(self):
        """
        Gets the template of this QuestionResource.
        A question template this question is validated against (private). May be null and no validation of additional_properties will be done

        :return: The template of this QuestionResource.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this QuestionResource.
        A question template this question is validated against (private). May be null and no validation of additional_properties will be done

        :param template: The template of this QuestionResource.
        :type: str
        """

        self._template = template

    @property
    def updated_date(self):
        """
        Gets the updated_date of this QuestionResource.
        The date/time this resource was last updated in seconds since unix epoch

        :return: The updated_date of this QuestionResource.
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """
        Sets the updated_date of this QuestionResource.
        The date/time this resource was last updated in seconds since unix epoch

        :param updated_date: The updated_date of this QuestionResource.
        :type: int
        """

        self._updated_date = updated_date

    @property
    def vendor(self):
        """
        Gets the vendor of this QuestionResource.
        The supplier of the question

        :return: The vendor of this QuestionResource.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this QuestionResource.
        The supplier of the question

        :param vendor: The vendor of this QuestionResource.
        :type: str
        """

        self._vendor = vendor

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, QuestionResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
