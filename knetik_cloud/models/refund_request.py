# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RefundRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'bundle_sku': 'str',
        'notes': 'str',
        'sku': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'bundle_sku': 'bundle_sku',
        'notes': 'notes',
        'sku': 'sku'
    }

    def __init__(self, amount=None, bundle_sku=None, notes=None, sku=None):
        """
        RefundRequest - a model defined in Swagger
        """

        self._amount = None
        self._bundle_sku = None
        self._notes = None
        self._sku = None
        self.discriminator = None

        if amount is not None:
          self.amount = amount
        if bundle_sku is not None:
          self.bundle_sku = bundle_sku
        self.notes = notes
        if sku is not None:
          self.sku = sku

    @property
    def amount(self):
        """
        Gets the amount of this RefundRequest.
        The amount to refund. If left off, will refund the remaining balance of the transaction or specific item balance (if SKU provided), whichever is less.

        :return: The amount of this RefundRequest.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this RefundRequest.
        The amount to refund. If left off, will refund the remaining balance of the transaction or specific item balance (if SKU provided), whichever is less.

        :param amount: The amount of this RefundRequest.
        :type: float
        """

        self._amount = amount

    @property
    def bundle_sku(self):
        """
        Gets the bundle_sku of this RefundRequest.
        The SKU of a bundle item from the invoice that the target item is within.

        :return: The bundle_sku of this RefundRequest.
        :rtype: str
        """
        return self._bundle_sku

    @bundle_sku.setter
    def bundle_sku(self, bundle_sku):
        """
        Sets the bundle_sku of this RefundRequest.
        The SKU of a bundle item from the invoice that the target item is within.

        :param bundle_sku: The bundle_sku of this RefundRequest.
        :type: str
        """

        self._bundle_sku = bundle_sku

    @property
    def notes(self):
        """
        Gets the notes of this RefundRequest.
        Notes about or reason for the refund

        :return: The notes of this RefundRequest.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this RefundRequest.
        Notes about or reason for the refund

        :param notes: The notes of this RefundRequest.
        :type: str
        """
        if notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")

        self._notes = notes

    @property
    def sku(self):
        """
        Gets the sku of this RefundRequest.
        The SKU of a specific item from the invoice to refund. Affects the maximum refund amount (not to exceed the price of this item times quantity on invoice). Transaction must be tied to an invoice if used.

        :return: The sku of this RefundRequest.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this RefundRequest.
        The SKU of a specific item from the invoice to refund. Affects the maximum refund amount (not to exceed the price of this item times quantity on invoice). Transaction must be tied to an invoice if used.

        :param sku: The sku of this RefundRequest.
        :type: str
        """

        self._sku = sku

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RefundRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
