# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResourceTypeDescription(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_field': 'str',
        'name': 'str',
        'service_path': 'str'
    }

    attribute_map = {
        'id_field': 'id_field',
        'name': 'name',
        'service_path': 'service_path'
    }

    def __init__(self, id_field=None, name=None, service_path=None):
        """
        ResourceTypeDescription - a model defined in Swagger
        """

        self._id_field = None
        self._name = None
        self._service_path = None
        self.discriminator = None

        self.id_field = id_field
        self.name = name
        self.service_path = service_path

    @property
    def id_field(self):
        """
        Gets the id_field of this ResourceTypeDescription.
        The field on the resource that the id is in

        :return: The id_field of this ResourceTypeDescription.
        :rtype: str
        """
        return self._id_field

    @id_field.setter
    def id_field(self, id_field):
        """
        Sets the id_field of this ResourceTypeDescription.
        The field on the resource that the id is in

        :param id_field: The id_field of this ResourceTypeDescription.
        :type: str
        """
        if id_field is None:
            raise ValueError("Invalid value for `id_field`, must not be `None`")

        self._id_field = id_field

    @property
    def name(self):
        """
        Gets the name of this ResourceTypeDescription.
        The unique name for the resource in swagger. This serves as the unique identifier. Cannot be changed after creation

        :return: The name of this ResourceTypeDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ResourceTypeDescription.
        The unique name for the resource in swagger. This serves as the unique identifier. Cannot be changed after creation

        :param name: The name of this ResourceTypeDescription.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def service_path(self):
        """
        Gets the service_path of this ResourceTypeDescription.
        The base path of the service

        :return: The service_path of this ResourceTypeDescription.
        :rtype: str
        """
        return self._service_path

    @service_path.setter
    def service_path(self, service_path):
        """
        Sets the service_path of this ResourceTypeDescription.
        The base path of the service

        :param service_path: The service_path of this ResourceTypeDescription.
        :type: str
        """
        if service_path is None:
            raise ValueError("Invalid value for `service_path`, must not be `None`")

        self._service_path = service_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResourceTypeDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
