# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SearchReferenceMapping(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'ref_id_field': 'str',
        'ref_type': 'str',
        'source_field_to_destination_field': 'dict(str, str)',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'ref_id_field': 'ref_id_field',
        'ref_type': 'ref_type',
        'source_field_to_destination_field': 'source_field_to_destination_field',
        'type': 'type'
    }

    def __init__(self, id=None, ref_id_field=None, ref_type=None, source_field_to_destination_field=None, type=None):
        """
        SearchReferenceMapping - a model defined in Swagger
        """

        self._id = None
        self._ref_id_field = None
        self._ref_type = None
        self._source_field_to_destination_field = None
        self._type = None

        self.id = id
        self.ref_id_field = ref_id_field
        self.ref_type = ref_type
        self.source_field_to_destination_field = source_field_to_destination_field
        self.type = type

    @property
    def id(self):
        """
        Gets the id of this SearchReferenceMapping.
        Unique identifier for the mapping to protect against duplicates

        :return: The id of this SearchReferenceMapping.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SearchReferenceMapping.
        Unique identifier for the mapping to protect against duplicates

        :param id: The id of this SearchReferenceMapping.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ref_id_field(self):
        """
        Gets the ref_id_field of this SearchReferenceMapping.
        The field within the type that contains the id from the refType

        :return: The ref_id_field of this SearchReferenceMapping.
        :rtype: str
        """
        return self._ref_id_field

    @ref_id_field.setter
    def ref_id_field(self, ref_id_field):
        """
        Sets the ref_id_field of this SearchReferenceMapping.
        The field within the type that contains the id from the refType

        :param ref_id_field: The ref_id_field of this SearchReferenceMapping.
        :type: str
        """
        if ref_id_field is None:
            raise ValueError("Invalid value for `ref_id_field`, must not be `None`")

        self._ref_id_field = ref_id_field

    @property
    def ref_type(self):
        """
        Gets the ref_type of this SearchReferenceMapping.
        The index type that the mapping pulls data from

        :return: The ref_type of this SearchReferenceMapping.
        :rtype: str
        """
        return self._ref_type

    @ref_type.setter
    def ref_type(self, ref_type):
        """
        Sets the ref_type of this SearchReferenceMapping.
        The index type that the mapping pulls data from

        :param ref_type: The ref_type of this SearchReferenceMapping.
        :type: str
        """
        if ref_type is None:
            raise ValueError("Invalid value for `ref_type`, must not be `None`")

        self._ref_type = ref_type

    @property
    def source_field_to_destination_field(self):
        """
        Gets the source_field_to_destination_field of this SearchReferenceMapping.
        A map whose keys are the field names in the refType and values are the field name in the type

        :return: The source_field_to_destination_field of this SearchReferenceMapping.
        :rtype: dict(str, str)
        """
        return self._source_field_to_destination_field

    @source_field_to_destination_field.setter
    def source_field_to_destination_field(self, source_field_to_destination_field):
        """
        Sets the source_field_to_destination_field of this SearchReferenceMapping.
        A map whose keys are the field names in the refType and values are the field name in the type

        :param source_field_to_destination_field: The source_field_to_destination_field of this SearchReferenceMapping.
        :type: dict(str, str)
        """
        if source_field_to_destination_field is None:
            raise ValueError("Invalid value for `source_field_to_destination_field`, must not be `None`")

        self._source_field_to_destination_field = source_field_to_destination_field

    @property
    def type(self):
        """
        Gets the type of this SearchReferenceMapping.
        The index type that the mapping is for

        :return: The type of this SearchReferenceMapping.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SearchReferenceMapping.
        The index type that the mapping is for

        :param type: The type of this SearchReferenceMapping.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SearchReferenceMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
