# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ServiceDeployedEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'events': 'list[BreTriggerResource]',
        'resources': 'list[ResourceTypeDescription]',
        'service_name': 'str',
        'swagger_url': 'str'
    }

    attribute_map = {
        'events': 'events',
        'resources': 'resources',
        'service_name': 'service_name',
        'swagger_url': 'swagger_url'
    }

    def __init__(self, events=None, resources=None, service_name=None, swagger_url=None):
        """
        ServiceDeployedEvent - a model defined in Swagger
        """

        self._events = None
        self._resources = None
        self._service_name = None
        self._swagger_url = None
        self.discriminator = None

        self.events = events
        self.resources = resources
        self.service_name = service_name
        self.swagger_url = swagger_url

    @property
    def events(self):
        """
        Gets the events of this ServiceDeployedEvent.
        The events fired by this service

        :return: The events of this ServiceDeployedEvent.
        :rtype: list[BreTriggerResource]
        """
        return self._events

    @events.setter
    def events(self, events):
        """
        Sets the events of this ServiceDeployedEvent.
        The events fired by this service

        :param events: The events of this ServiceDeployedEvent.
        :type: list[BreTriggerResource]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")

        self._events = events

    @property
    def resources(self):
        """
        Gets the resources of this ServiceDeployedEvent.
        The resources managed by this service

        :return: The resources of this ServiceDeployedEvent.
        :rtype: list[ResourceTypeDescription]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """
        Sets the resources of this ServiceDeployedEvent.
        The resources managed by this service

        :param resources: The resources of this ServiceDeployedEvent.
        :type: list[ResourceTypeDescription]
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")

        self._resources = resources

    @property
    def service_name(self):
        """
        Gets the service_name of this ServiceDeployedEvent.
        The unique name for the service. This serves as the unique identifier. Cannot be changed after creation

        :return: The service_name of this ServiceDeployedEvent.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """
        Sets the service_name of this ServiceDeployedEvent.
        The unique name for the service. This serves as the unique identifier. Cannot be changed after creation

        :param service_name: The service_name of this ServiceDeployedEvent.
        :type: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name

    @property
    def swagger_url(self):
        """
        Gets the swagger_url of this ServiceDeployedEvent.
        The url of the swagger doc

        :return: The swagger_url of this ServiceDeployedEvent.
        :rtype: str
        """
        return self._swagger_url

    @swagger_url.setter
    def swagger_url(self, swagger_url):
        """
        Sets the swagger_url of this ServiceDeployedEvent.
        The url of the swagger doc

        :param swagger_url: The swagger_url of this ServiceDeployedEvent.
        :type: str
        """
        if swagger_url is None:
            raise ValueError("Invalid value for `swagger_url`, must not be `None`")

        self._swagger_url = swagger_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ServiceDeployedEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
