# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SqlDatabaseConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_pool_size': 'int',
        'db_name': 'str',
        'hostname': 'str',
        'password': 'str',
        'port': 'int',
        'username': 'str'
    }

    attribute_map = {
        'connection_pool_size': 'connection_pool_size',
        'db_name': 'db_name',
        'hostname': 'hostname',
        'password': 'password',
        'port': 'port',
        'username': 'username'
    }

    def __init__(self, connection_pool_size=None, db_name=None, hostname=None, password=None, port=None, username=None):
        """
        SqlDatabaseConfig - a model defined in Swagger
        """

        self._connection_pool_size = None
        self._db_name = None
        self._hostname = None
        self._password = None
        self._port = None
        self._username = None
        self.discriminator = None

        if connection_pool_size is not None:
          self.connection_pool_size = connection_pool_size
        if db_name is not None:
          self.db_name = db_name
        if hostname is not None:
          self.hostname = hostname
        if password is not None:
          self.password = password
        if port is not None:
          self.port = port
        if username is not None:
          self.username = username

    @property
    def connection_pool_size(self):
        """
        Gets the connection_pool_size of this SqlDatabaseConfig.

        :return: The connection_pool_size of this SqlDatabaseConfig.
        :rtype: int
        """
        return self._connection_pool_size

    @connection_pool_size.setter
    def connection_pool_size(self, connection_pool_size):
        """
        Sets the connection_pool_size of this SqlDatabaseConfig.

        :param connection_pool_size: The connection_pool_size of this SqlDatabaseConfig.
        :type: int
        """

        self._connection_pool_size = connection_pool_size

    @property
    def db_name(self):
        """
        Gets the db_name of this SqlDatabaseConfig.

        :return: The db_name of this SqlDatabaseConfig.
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """
        Sets the db_name of this SqlDatabaseConfig.

        :param db_name: The db_name of this SqlDatabaseConfig.
        :type: str
        """

        self._db_name = db_name

    @property
    def hostname(self):
        """
        Gets the hostname of this SqlDatabaseConfig.

        :return: The hostname of this SqlDatabaseConfig.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """
        Sets the hostname of this SqlDatabaseConfig.

        :param hostname: The hostname of this SqlDatabaseConfig.
        :type: str
        """

        self._hostname = hostname

    @property
    def password(self):
        """
        Gets the password of this SqlDatabaseConfig.

        :return: The password of this SqlDatabaseConfig.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this SqlDatabaseConfig.

        :param password: The password of this SqlDatabaseConfig.
        :type: str
        """

        self._password = password

    @property
    def port(self):
        """
        Gets the port of this SqlDatabaseConfig.

        :return: The port of this SqlDatabaseConfig.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this SqlDatabaseConfig.

        :param port: The port of this SqlDatabaseConfig.
        :type: int
        """

        self._port = port

    @property
    def username(self):
        """
        Gets the username of this SqlDatabaseConfig.

        :return: The username of this SqlDatabaseConfig.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this SqlDatabaseConfig.

        :param username: The username of this SqlDatabaseConfig.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SqlDatabaseConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
