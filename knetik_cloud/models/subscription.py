# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Subscription(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'availability': 'str',
        'consolidation_day_of_month': 'int',
        'subscription_plans': 'list[SubscriptionPlan]'
    }

    attribute_map = {
        'availability': 'availability',
        'consolidation_day_of_month': 'consolidation_day_of_month',
        'subscription_plans': 'subscription_plans'
    }

    def __init__(self, availability=None, consolidation_day_of_month=None, subscription_plans=None):
        """
        Subscription - a model defined in Swagger
        """

        self._availability = None
        self._consolidation_day_of_month = None
        self._subscription_plans = None
        self.discriminator = None

        if availability is not None:
          self.availability = availability
        if consolidation_day_of_month is not None:
          self.consolidation_day_of_month = consolidation_day_of_month
        if subscription_plans is not None:
          self.subscription_plans = subscription_plans

    @property
    def availability(self):
        """
        Gets the availability of this Subscription.

        :return: The availability of this Subscription.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """
        Sets the availability of this Subscription.

        :param availability: The availability of this Subscription.
        :type: str
        """
        allowed_values = ["all", "new_subscribers"]
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"
                .format(availability, allowed_values)
            )

        self._availability = availability

    @property
    def consolidation_day_of_month(self):
        """
        Gets the consolidation_day_of_month of this Subscription.

        :return: The consolidation_day_of_month of this Subscription.
        :rtype: int
        """
        return self._consolidation_day_of_month

    @consolidation_day_of_month.setter
    def consolidation_day_of_month(self, consolidation_day_of_month):
        """
        Sets the consolidation_day_of_month of this Subscription.

        :param consolidation_day_of_month: The consolidation_day_of_month of this Subscription.
        :type: int
        """

        self._consolidation_day_of_month = consolidation_day_of_month

    @property
    def subscription_plans(self):
        """
        Gets the subscription_plans of this Subscription.

        :return: The subscription_plans of this Subscription.
        :rtype: list[SubscriptionPlan]
        """
        return self._subscription_plans

    @subscription_plans.setter
    def subscription_plans(self, subscription_plans):
        """
        Sets the subscription_plans of this Subscription.

        :param subscription_plans: The subscription_plans of this Subscription.
        :type: list[SubscriptionPlan]
        """

        self._subscription_plans = subscription_plans

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Subscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
