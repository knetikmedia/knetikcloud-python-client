# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Subscription(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, additional_properties=None, behaviors=None, category=None, created_date=None, id=None, long_description=None, name=None, short_description=None, sort=None, tags=None, template=None, type_hint=None, unique_key=None, updated_date=None, displayable=None, geo_country_list=None, geo_policy_type=None, shipping_tier=None, skus=None, store_end=None, store_start=None, vendor_id=None, availability=None, consolidation_day_of_month=None, subscription_plans=None):
        """
        Subscription - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'additional_properties': 'dict(str, ModelProperty)',
            'behaviors': 'list[Behavior]',
            'category': 'str',
            'created_date': 'int',
            'id': 'int',
            'long_description': 'str',
            'name': 'str',
            'short_description': 'str',
            'sort': 'int',
            'tags': 'list[str]',
            'template': 'str',
            'type_hint': 'str',
            'unique_key': 'str',
            'updated_date': 'int',
            'displayable': 'bool',
            'geo_country_list': 'list[str]',
            'geo_policy_type': 'str',
            'shipping_tier': 'int',
            'skus': 'list[Sku]',
            'store_end': 'int',
            'store_start': 'int',
            'vendor_id': 'int',
            'availability': 'str',
            'consolidation_day_of_month': 'int',
            'subscription_plans': 'list[SubscriptionPlan]'
        }

        self.attribute_map = {
            'additional_properties': 'additional_properties',
            'behaviors': 'behaviors',
            'category': 'category',
            'created_date': 'created_date',
            'id': 'id',
            'long_description': 'long_description',
            'name': 'name',
            'short_description': 'short_description',
            'sort': 'sort',
            'tags': 'tags',
            'template': 'template',
            'type_hint': 'type_hint',
            'unique_key': 'unique_key',
            'updated_date': 'updated_date',
            'displayable': 'displayable',
            'geo_country_list': 'geo_country_list',
            'geo_policy_type': 'geo_policy_type',
            'shipping_tier': 'shipping_tier',
            'skus': 'skus',
            'store_end': 'store_end',
            'store_start': 'store_start',
            'vendor_id': 'vendor_id',
            'availability': 'availability',
            'consolidation_day_of_month': 'consolidation_day_of_month',
            'subscription_plans': 'subscription_plans'
        }

        self._additional_properties = additional_properties
        self._behaviors = behaviors
        self._category = category
        self._created_date = created_date
        self._id = id
        self._long_description = long_description
        self._name = name
        self._short_description = short_description
        self._sort = sort
        self._tags = tags
        self._template = template
        self._type_hint = type_hint
        self._unique_key = unique_key
        self._updated_date = updated_date
        self._displayable = displayable
        self._geo_country_list = geo_country_list
        self._geo_policy_type = geo_policy_type
        self._shipping_tier = shipping_tier
        self._skus = skus
        self._store_end = store_end
        self._store_start = store_start
        self._vendor_id = vendor_id
        self._availability = availability
        self._consolidation_day_of_month = consolidation_day_of_month
        self._subscription_plans = subscription_plans

    @property
    def additional_properties(self):
        """
        Gets the additional_properties of this Subscription.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type, or be an extra not from the template

        :return: The additional_properties of this Subscription.
        :rtype: dict(str, ModelProperty)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """
        Sets the additional_properties of this Subscription.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type, or be an extra not from the template

        :param additional_properties: The additional_properties of this Subscription.
        :type: dict(str, ModelProperty)
        """

        self._additional_properties = additional_properties

    @property
    def behaviors(self):
        """
        Gets the behaviors of this Subscription.
        The behaviors linked to the item, describing various options and interactions. May not be included in item lists

        :return: The behaviors of this Subscription.
        :rtype: list[Behavior]
        """
        return self._behaviors

    @behaviors.setter
    def behaviors(self, behaviors):
        """
        Sets the behaviors of this Subscription.
        The behaviors linked to the item, describing various options and interactions. May not be included in item lists

        :param behaviors: The behaviors of this Subscription.
        :type: list[Behavior]
        """

        self._behaviors = behaviors

    @property
    def category(self):
        """
        Gets the category of this Subscription.
        A category for filtering items

        :return: The category of this Subscription.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this Subscription.
        A category for filtering items

        :param category: The category of this Subscription.
        :type: str
        """

        self._category = category

    @property
    def created_date(self):
        """
        Gets the created_date of this Subscription.
        The date the item was created, unix timestamp in seconds

        :return: The created_date of this Subscription.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this Subscription.
        The date the item was created, unix timestamp in seconds

        :param created_date: The created_date of this Subscription.
        :type: int
        """

        self._created_date = created_date

    @property
    def id(self):
        """
        Gets the id of this Subscription.
        The id of the item

        :return: The id of this Subscription.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Subscription.
        The id of the item

        :param id: The id of this Subscription.
        :type: int
        """

        self._id = id

    @property
    def long_description(self):
        """
        Gets the long_description of this Subscription.
        A long description of the item

        :return: The long_description of this Subscription.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """
        Sets the long_description of this Subscription.
        A long description of the item

        :param long_description: The long_description of this Subscription.
        :type: str
        """

        self._long_description = long_description

    @property
    def name(self):
        """
        Gets the name of this Subscription.
        The name of the item

        :return: The name of this Subscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Subscription.
        The name of the item

        :param name: The name of this Subscription.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def short_description(self):
        """
        Gets the short_description of this Subscription.
        A short description of the item, max 255 chars

        :return: The short_description of this Subscription.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """
        Sets the short_description of this Subscription.
        A short description of the item, max 255 chars

        :param short_description: The short_description of this Subscription.
        :type: str
        """

        self._short_description = short_description

    @property
    def sort(self):
        """
        Gets the sort of this Subscription.
        A number to use in sorting items.  Default 500

        :return: The sort of this Subscription.
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """
        Sets the sort of this Subscription.
        A number to use in sorting items.  Default 500

        :param sort: The sort of this Subscription.
        :type: int
        """

        self._sort = sort

    @property
    def tags(self):
        """
        Gets the tags of this Subscription.
        List of tags used for filtering items

        :return: The tags of this Subscription.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Subscription.
        List of tags used for filtering items

        :param tags: The tags of this Subscription.
        :type: list[str]
        """

        self._tags = tags

    @property
    def template(self):
        """
        Gets the template of this Subscription.
        An item template this item is validated against.  May be null and no validation of additional_properties will be done.  Default = null

        :return: The template of this Subscription.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this Subscription.
        An item template this item is validated against.  May be null and no validation of additional_properties will be done.  Default = null

        :param template: The template of this Subscription.
        :type: str
        """

        self._template = template

    @property
    def type_hint(self):
        """
        Gets the type_hint of this Subscription.
        The type of the item

        :return: The type_hint of this Subscription.
        :rtype: str
        """
        return self._type_hint

    @type_hint.setter
    def type_hint(self, type_hint):
        """
        Sets the type_hint of this Subscription.
        The type of the item

        :param type_hint: The type_hint of this Subscription.
        :type: str
        """
        if type_hint is None:
            raise ValueError("Invalid value for `type_hint`, must not be `None`")

        self._type_hint = type_hint

    @property
    def unique_key(self):
        """
        Gets the unique_key of this Subscription.
        The unique key for the item

        :return: The unique_key of this Subscription.
        :rtype: str
        """
        return self._unique_key

    @unique_key.setter
    def unique_key(self, unique_key):
        """
        Sets the unique_key of this Subscription.
        The unique key for the item

        :param unique_key: The unique_key of this Subscription.
        :type: str
        """

        self._unique_key = unique_key

    @property
    def updated_date(self):
        """
        Gets the updated_date of this Subscription.
        The date the item was last updated, unix timestamp in seconds

        :return: The updated_date of this Subscription.
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """
        Sets the updated_date of this Subscription.
        The date the item was last updated, unix timestamp in seconds

        :param updated_date: The updated_date of this Subscription.
        :type: int
        """

        self._updated_date = updated_date

    @property
    def displayable(self):
        """
        Gets the displayable of this Subscription.
        Whether or not the item is currently displayable.  Default = true

        :return: The displayable of this Subscription.
        :rtype: bool
        """
        return self._displayable

    @displayable.setter
    def displayable(self, displayable):
        """
        Sets the displayable of this Subscription.
        Whether or not the item is currently displayable.  Default = true

        :param displayable: The displayable of this Subscription.
        :type: bool
        """

        self._displayable = displayable

    @property
    def geo_country_list(self):
        """
        Gets the geo_country_list of this Subscription.
        A list of country ID to include in the blacklist/whitelist geo policy

        :return: The geo_country_list of this Subscription.
        :rtype: list[str]
        """
        return self._geo_country_list

    @geo_country_list.setter
    def geo_country_list(self, geo_country_list):
        """
        Sets the geo_country_list of this Subscription.
        A list of country ID to include in the blacklist/whitelist geo policy

        :param geo_country_list: The geo_country_list of this Subscription.
        :type: list[str]
        """

        self._geo_country_list = geo_country_list

    @property
    def geo_policy_type(self):
        """
        Gets the geo_policy_type of this Subscription.
        Whether to use the geo_country_list as a black list or white list for item geographical availability

        :return: The geo_policy_type of this Subscription.
        :rtype: str
        """
        return self._geo_policy_type

    @geo_policy_type.setter
    def geo_policy_type(self, geo_policy_type):
        """
        Sets the geo_policy_type of this Subscription.
        Whether to use the geo_country_list as a black list or white list for item geographical availability

        :param geo_policy_type: The geo_policy_type of this Subscription.
        :type: str
        """
        allowed_values = ["whitelist", "blacklist"]
        if geo_policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `geo_policy_type` ({0}), must be one of {1}"
                .format(geo_policy_type, allowed_values)
            )

        self._geo_policy_type = geo_policy_type

    @property
    def shipping_tier(self):
        """
        Gets the shipping_tier of this Subscription.
        Provides the abstract shipping needs if this item is physical and can be shipped.  A value of zero means no shipping needed.  Default = 0

        :return: The shipping_tier of this Subscription.
        :rtype: int
        """
        return self._shipping_tier

    @shipping_tier.setter
    def shipping_tier(self, shipping_tier):
        """
        Sets the shipping_tier of this Subscription.
        Provides the abstract shipping needs if this item is physical and can be shipped.  A value of zero means no shipping needed.  Default = 0

        :param shipping_tier: The shipping_tier of this Subscription.
        :type: int
        """

        self._shipping_tier = shipping_tier

    @property
    def skus(self):
        """
        Gets the skus of this Subscription.
        The skus for the item. Each defines a unique configuration for the item to be purchased (Large-Blue, Small-Green, etc). These are what is ultimately selected in the store and added to the cart

        :return: The skus of this Subscription.
        :rtype: list[Sku]
        """
        return self._skus

    @skus.setter
    def skus(self, skus):
        """
        Sets the skus of this Subscription.
        The skus for the item. Each defines a unique configuration for the item to be purchased (Large-Blue, Small-Green, etc). These are what is ultimately selected in the store and added to the cart

        :param skus: The skus of this Subscription.
        :type: list[Sku]
        """
        if skus is None:
            raise ValueError("Invalid value for `skus`, must not be `None`")

        self._skus = skus

    @property
    def store_end(self):
        """
        Gets the store_end of this Subscription.
        The date the item will leave the store, unix timestamp in seconds.  If set to null, item will never leave the store

        :return: The store_end of this Subscription.
        :rtype: int
        """
        return self._store_end

    @store_end.setter
    def store_end(self, store_end):
        """
        Sets the store_end of this Subscription.
        The date the item will leave the store, unix timestamp in seconds.  If set to null, item will never leave the store

        :param store_end: The store_end of this Subscription.
        :type: int
        """

        self._store_end = store_end

    @property
    def store_start(self):
        """
        Gets the store_start of this Subscription.
        The date the item will appear in the store, unix timestamp in seconds.  If set to null, item will appear in store immediately

        :return: The store_start of this Subscription.
        :rtype: int
        """
        return self._store_start

    @store_start.setter
    def store_start(self, store_start):
        """
        Sets the store_start of this Subscription.
        The date the item will appear in the store, unix timestamp in seconds.  If set to null, item will appear in store immediately

        :param store_start: The store_start of this Subscription.
        :type: int
        """

        self._store_start = store_start

    @property
    def vendor_id(self):
        """
        Gets the vendor_id of this Subscription.
        The vendor who provides the item

        :return: The vendor_id of this Subscription.
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """
        Sets the vendor_id of this Subscription.
        The vendor who provides the item

        :param vendor_id: The vendor_id of this Subscription.
        :type: int
        """
        if vendor_id is None:
            raise ValueError("Invalid value for `vendor_id`, must not be `None`")

        self._vendor_id = vendor_id

    @property
    def availability(self):
        """
        Gets the availability of this Subscription.

        :return: The availability of this Subscription.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """
        Sets the availability of this Subscription.

        :param availability: The availability of this Subscription.
        :type: str
        """
        allowed_values = ["all", "new_subscribers"]
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"
                .format(availability, allowed_values)
            )

        self._availability = availability

    @property
    def consolidation_day_of_month(self):
        """
        Gets the consolidation_day_of_month of this Subscription.

        :return: The consolidation_day_of_month of this Subscription.
        :rtype: int
        """
        return self._consolidation_day_of_month

    @consolidation_day_of_month.setter
    def consolidation_day_of_month(self, consolidation_day_of_month):
        """
        Sets the consolidation_day_of_month of this Subscription.

        :param consolidation_day_of_month: The consolidation_day_of_month of this Subscription.
        :type: int
        """

        self._consolidation_day_of_month = consolidation_day_of_month

    @property
    def subscription_plans(self):
        """
        Gets the subscription_plans of this Subscription.

        :return: The subscription_plans of this Subscription.
        :rtype: list[SubscriptionPlan]
        """
        return self._subscription_plans

    @subscription_plans.setter
    def subscription_plans(self, subscription_plans):
        """
        Sets the subscription_plans of this Subscription.

        :param subscription_plans: The subscription_plans of this Subscription.
        :type: list[SubscriptionPlan]
        """

        self._subscription_plans = subscription_plans

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Subscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
