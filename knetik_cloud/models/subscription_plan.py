# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SubscriptionPlan(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_properties': 'dict(str, ModelProperty)',
        'availability': 'str',
        'bill_grace_days': 'int',
        'consolidated': 'bool',
        'first_bill': 'int',
        'first_bill_unit_of_time': 'str',
        'id': 'str',
        'late_payment_sku': 'str',
        'locked': 'bool',
        'max_auto_renew': 'int',
        'max_bill_attempts': 'int',
        'migration_plan': 'str',
        'minimum_term': 'int',
        'name': 'str',
        'primary_sku': 'str',
        'reactivation_sku': 'str',
        'recurring_sku': 'str',
        'renew_period': 'int',
        'renew_period_unit_of_time': 'str',
        'subscription_id': 'int'
    }

    attribute_map = {
        'additional_properties': 'additional_properties',
        'availability': 'availability',
        'bill_grace_days': 'bill_grace_days',
        'consolidated': 'consolidated',
        'first_bill': 'first_bill',
        'first_bill_unit_of_time': 'first_bill_unit_of_time',
        'id': 'id',
        'late_payment_sku': 'late_payment_sku',
        'locked': 'locked',
        'max_auto_renew': 'max_auto_renew',
        'max_bill_attempts': 'max_bill_attempts',
        'migration_plan': 'migration_plan',
        'minimum_term': 'minimum_term',
        'name': 'name',
        'primary_sku': 'primary_sku',
        'reactivation_sku': 'reactivation_sku',
        'recurring_sku': 'recurring_sku',
        'renew_period': 'renew_period',
        'renew_period_unit_of_time': 'renew_period_unit_of_time',
        'subscription_id': 'subscription_id'
    }

    def __init__(self, additional_properties=None, availability=None, bill_grace_days=None, consolidated=None, first_bill=None, first_bill_unit_of_time=None, id=None, late_payment_sku=None, locked=None, max_auto_renew=None, max_bill_attempts=None, migration_plan=None, minimum_term=None, name=None, primary_sku=None, reactivation_sku=None, recurring_sku=None, renew_period=None, renew_period_unit_of_time=None, subscription_id=None):
        """
        SubscriptionPlan - a model defined in Swagger
        """

        self._additional_properties = None
        self._availability = None
        self._bill_grace_days = None
        self._consolidated = None
        self._first_bill = None
        self._first_bill_unit_of_time = None
        self._id = None
        self._late_payment_sku = None
        self._locked = None
        self._max_auto_renew = None
        self._max_bill_attempts = None
        self._migration_plan = None
        self._minimum_term = None
        self._name = None
        self._primary_sku = None
        self._reactivation_sku = None
        self._recurring_sku = None
        self._renew_period = None
        self._renew_period_unit_of_time = None
        self._subscription_id = None
        self.discriminator = None

        if additional_properties is not None:
          self.additional_properties = additional_properties
        if availability is not None:
          self.availability = availability
        if bill_grace_days is not None:
          self.bill_grace_days = bill_grace_days
        if consolidated is not None:
          self.consolidated = consolidated
        if first_bill is not None:
          self.first_bill = first_bill
        if first_bill_unit_of_time is not None:
          self.first_bill_unit_of_time = first_bill_unit_of_time
        if id is not None:
          self.id = id
        if late_payment_sku is not None:
          self.late_payment_sku = late_payment_sku
        if locked is not None:
          self.locked = locked
        if max_auto_renew is not None:
          self.max_auto_renew = max_auto_renew
        if max_bill_attempts is not None:
          self.max_bill_attempts = max_bill_attempts
        if migration_plan is not None:
          self.migration_plan = migration_plan
        if minimum_term is not None:
          self.minimum_term = minimum_term
        if name is not None:
          self.name = name
        if primary_sku is not None:
          self.primary_sku = primary_sku
        if reactivation_sku is not None:
          self.reactivation_sku = reactivation_sku
        if recurring_sku is not None:
          self.recurring_sku = recurring_sku
        if renew_period is not None:
          self.renew_period = renew_period
        if renew_period_unit_of_time is not None:
          self.renew_period_unit_of_time = renew_period_unit_of_time
        if subscription_id is not None:
          self.subscription_id = subscription_id

    @property
    def additional_properties(self):
        """
        Gets the additional_properties of this SubscriptionPlan.

        :return: The additional_properties of this SubscriptionPlan.
        :rtype: dict(str, ModelProperty)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """
        Sets the additional_properties of this SubscriptionPlan.

        :param additional_properties: The additional_properties of this SubscriptionPlan.
        :type: dict(str, ModelProperty)
        """

        self._additional_properties = additional_properties

    @property
    def availability(self):
        """
        Gets the availability of this SubscriptionPlan.

        :return: The availability of this SubscriptionPlan.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """
        Sets the availability of this SubscriptionPlan.

        :param availability: The availability of this SubscriptionPlan.
        :type: str
        """
        allowed_values = ["all", "new_subscribers"]
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"
                .format(availability, allowed_values)
            )

        self._availability = availability

    @property
    def bill_grace_days(self):
        """
        Gets the bill_grace_days of this SubscriptionPlan.

        :return: The bill_grace_days of this SubscriptionPlan.
        :rtype: int
        """
        return self._bill_grace_days

    @bill_grace_days.setter
    def bill_grace_days(self, bill_grace_days):
        """
        Sets the bill_grace_days of this SubscriptionPlan.

        :param bill_grace_days: The bill_grace_days of this SubscriptionPlan.
        :type: int
        """

        self._bill_grace_days = bill_grace_days

    @property
    def consolidated(self):
        """
        Gets the consolidated of this SubscriptionPlan.

        :return: The consolidated of this SubscriptionPlan.
        :rtype: bool
        """
        return self._consolidated

    @consolidated.setter
    def consolidated(self, consolidated):
        """
        Sets the consolidated of this SubscriptionPlan.

        :param consolidated: The consolidated of this SubscriptionPlan.
        :type: bool
        """

        self._consolidated = consolidated

    @property
    def first_bill(self):
        """
        Gets the first_bill of this SubscriptionPlan.

        :return: The first_bill of this SubscriptionPlan.
        :rtype: int
        """
        return self._first_bill

    @first_bill.setter
    def first_bill(self, first_bill):
        """
        Sets the first_bill of this SubscriptionPlan.

        :param first_bill: The first_bill of this SubscriptionPlan.
        :type: int
        """

        self._first_bill = first_bill

    @property
    def first_bill_unit_of_time(self):
        """
        Gets the first_bill_unit_of_time of this SubscriptionPlan.

        :return: The first_bill_unit_of_time of this SubscriptionPlan.
        :rtype: str
        """
        return self._first_bill_unit_of_time

    @first_bill_unit_of_time.setter
    def first_bill_unit_of_time(self, first_bill_unit_of_time):
        """
        Sets the first_bill_unit_of_time of this SubscriptionPlan.

        :param first_bill_unit_of_time: The first_bill_unit_of_time of this SubscriptionPlan.
        :type: str
        """
        allowed_values = ["millisecond", "second", "minute", "hour", "day", "week", "month", "year"]
        if first_bill_unit_of_time not in allowed_values:
            raise ValueError(
                "Invalid value for `first_bill_unit_of_time` ({0}), must be one of {1}"
                .format(first_bill_unit_of_time, allowed_values)
            )

        self._first_bill_unit_of_time = first_bill_unit_of_time

    @property
    def id(self):
        """
        Gets the id of this SubscriptionPlan.

        :return: The id of this SubscriptionPlan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SubscriptionPlan.

        :param id: The id of this SubscriptionPlan.
        :type: str
        """

        self._id = id

    @property
    def late_payment_sku(self):
        """
        Gets the late_payment_sku of this SubscriptionPlan.

        :return: The late_payment_sku of this SubscriptionPlan.
        :rtype: str
        """
        return self._late_payment_sku

    @late_payment_sku.setter
    def late_payment_sku(self, late_payment_sku):
        """
        Sets the late_payment_sku of this SubscriptionPlan.

        :param late_payment_sku: The late_payment_sku of this SubscriptionPlan.
        :type: str
        """

        self._late_payment_sku = late_payment_sku

    @property
    def locked(self):
        """
        Gets the locked of this SubscriptionPlan.

        :return: The locked of this SubscriptionPlan.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """
        Sets the locked of this SubscriptionPlan.

        :param locked: The locked of this SubscriptionPlan.
        :type: bool
        """

        self._locked = locked

    @property
    def max_auto_renew(self):
        """
        Gets the max_auto_renew of this SubscriptionPlan.

        :return: The max_auto_renew of this SubscriptionPlan.
        :rtype: int
        """
        return self._max_auto_renew

    @max_auto_renew.setter
    def max_auto_renew(self, max_auto_renew):
        """
        Sets the max_auto_renew of this SubscriptionPlan.

        :param max_auto_renew: The max_auto_renew of this SubscriptionPlan.
        :type: int
        """

        self._max_auto_renew = max_auto_renew

    @property
    def max_bill_attempts(self):
        """
        Gets the max_bill_attempts of this SubscriptionPlan.

        :return: The max_bill_attempts of this SubscriptionPlan.
        :rtype: int
        """
        return self._max_bill_attempts

    @max_bill_attempts.setter
    def max_bill_attempts(self, max_bill_attempts):
        """
        Sets the max_bill_attempts of this SubscriptionPlan.

        :param max_bill_attempts: The max_bill_attempts of this SubscriptionPlan.
        :type: int
        """

        self._max_bill_attempts = max_bill_attempts

    @property
    def migration_plan(self):
        """
        Gets the migration_plan of this SubscriptionPlan.

        :return: The migration_plan of this SubscriptionPlan.
        :rtype: str
        """
        return self._migration_plan

    @migration_plan.setter
    def migration_plan(self, migration_plan):
        """
        Sets the migration_plan of this SubscriptionPlan.

        :param migration_plan: The migration_plan of this SubscriptionPlan.
        :type: str
        """

        self._migration_plan = migration_plan

    @property
    def minimum_term(self):
        """
        Gets the minimum_term of this SubscriptionPlan.

        :return: The minimum_term of this SubscriptionPlan.
        :rtype: int
        """
        return self._minimum_term

    @minimum_term.setter
    def minimum_term(self, minimum_term):
        """
        Sets the minimum_term of this SubscriptionPlan.

        :param minimum_term: The minimum_term of this SubscriptionPlan.
        :type: int
        """

        self._minimum_term = minimum_term

    @property
    def name(self):
        """
        Gets the name of this SubscriptionPlan.

        :return: The name of this SubscriptionPlan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SubscriptionPlan.

        :param name: The name of this SubscriptionPlan.
        :type: str
        """

        self._name = name

    @property
    def primary_sku(self):
        """
        Gets the primary_sku of this SubscriptionPlan.

        :return: The primary_sku of this SubscriptionPlan.
        :rtype: str
        """
        return self._primary_sku

    @primary_sku.setter
    def primary_sku(self, primary_sku):
        """
        Sets the primary_sku of this SubscriptionPlan.

        :param primary_sku: The primary_sku of this SubscriptionPlan.
        :type: str
        """

        self._primary_sku = primary_sku

    @property
    def reactivation_sku(self):
        """
        Gets the reactivation_sku of this SubscriptionPlan.

        :return: The reactivation_sku of this SubscriptionPlan.
        :rtype: str
        """
        return self._reactivation_sku

    @reactivation_sku.setter
    def reactivation_sku(self, reactivation_sku):
        """
        Sets the reactivation_sku of this SubscriptionPlan.

        :param reactivation_sku: The reactivation_sku of this SubscriptionPlan.
        :type: str
        """

        self._reactivation_sku = reactivation_sku

    @property
    def recurring_sku(self):
        """
        Gets the recurring_sku of this SubscriptionPlan.

        :return: The recurring_sku of this SubscriptionPlan.
        :rtype: str
        """
        return self._recurring_sku

    @recurring_sku.setter
    def recurring_sku(self, recurring_sku):
        """
        Sets the recurring_sku of this SubscriptionPlan.

        :param recurring_sku: The recurring_sku of this SubscriptionPlan.
        :type: str
        """

        self._recurring_sku = recurring_sku

    @property
    def renew_period(self):
        """
        Gets the renew_period of this SubscriptionPlan.

        :return: The renew_period of this SubscriptionPlan.
        :rtype: int
        """
        return self._renew_period

    @renew_period.setter
    def renew_period(self, renew_period):
        """
        Sets the renew_period of this SubscriptionPlan.

        :param renew_period: The renew_period of this SubscriptionPlan.
        :type: int
        """

        self._renew_period = renew_period

    @property
    def renew_period_unit_of_time(self):
        """
        Gets the renew_period_unit_of_time of this SubscriptionPlan.

        :return: The renew_period_unit_of_time of this SubscriptionPlan.
        :rtype: str
        """
        return self._renew_period_unit_of_time

    @renew_period_unit_of_time.setter
    def renew_period_unit_of_time(self, renew_period_unit_of_time):
        """
        Sets the renew_period_unit_of_time of this SubscriptionPlan.

        :param renew_period_unit_of_time: The renew_period_unit_of_time of this SubscriptionPlan.
        :type: str
        """
        allowed_values = ["millisecond", "second", "minute", "hour", "day", "week", "month", "year"]
        if renew_period_unit_of_time not in allowed_values:
            raise ValueError(
                "Invalid value for `renew_period_unit_of_time` ({0}), must be one of {1}"
                .format(renew_period_unit_of_time, allowed_values)
            )

        self._renew_period_unit_of_time = renew_period_unit_of_time

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this SubscriptionPlan.

        :return: The subscription_id of this SubscriptionPlan.
        :rtype: int
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this SubscriptionPlan.

        :param subscription_id: The subscription_id of this SubscriptionPlan.
        :type: int
        """

        self._subscription_id = subscription_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SubscriptionPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
