# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TierResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_properties': 'dict(str, ModelProperty)',
        'name': 'str',
        'required_progress': 'int'
    }

    attribute_map = {
        'additional_properties': 'additional_properties',
        'name': 'name',
        'required_progress': 'required_progress'
    }

    def __init__(self, additional_properties=None, name=None, required_progress=None):
        """
        TierResource - a model defined in Swagger
        """

        self._additional_properties = None
        self._name = None
        self._required_progress = None
        self.discriminator = None

        if additional_properties is not None:
          self.additional_properties = additional_properties
        if name is not None:
          self.name = name
        self.required_progress = required_progress

    @property
    def additional_properties(self):
        """
        Gets the additional_properties of this TierResource.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type

        :return: The additional_properties of this TierResource.
        :rtype: dict(str, ModelProperty)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """
        Sets the additional_properties of this TierResource.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type

        :param additional_properties: The additional_properties of this TierResource.
        :type: dict(str, ModelProperty)
        """

        self._additional_properties = additional_properties

    @property
    def name(self):
        """
        Gets the name of this TierResource.
        The name of the tier

        :return: The name of this TierResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TierResource.
        The name of the tier

        :param name: The name of this TierResource.
        :type: str
        """

        self._name = name

    @property
    def required_progress(self):
        """
        Gets the required_progress of this TierResource.
        The required progress for the tier

        :return: The required_progress of this TierResource.
        :rtype: int
        """
        return self._required_progress

    @required_progress.setter
    def required_progress(self, required_progress):
        """
        Sets the required_progress of this TierResource.
        The required progress for the tier

        :param required_progress: The required_progress of this TierResource.
        :type: int
        """
        if required_progress is None:
            raise ValueError("Invalid value for `required_progress`, must not be `None`")

        self._required_progress = required_progress

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TierResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
