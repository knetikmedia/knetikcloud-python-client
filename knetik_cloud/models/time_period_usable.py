# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TimePeriodUsable(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_use': 'int',
        'time_length': 'int',
        'unit_of_time': 'str'
    }

    attribute_map = {
        'max_use': 'max_use',
        'time_length': 'time_length',
        'unit_of_time': 'unit_of_time'
    }

    def __init__(self, max_use=None, time_length=None, unit_of_time=None):
        """
        TimePeriodUsable - a model defined in Swagger
        """

        self._max_use = None
        self._time_length = None
        self._unit_of_time = None
        self.discriminator = None

        if max_use is not None:
          self.max_use = max_use
        if time_length is not None:
          self.time_length = time_length
        if unit_of_time is not None:
          self.unit_of_time = unit_of_time

    @property
    def max_use(self):
        """
        Gets the max_use of this TimePeriodUsable.
        The amount of times it can be used

        :return: The max_use of this TimePeriodUsable.
        :rtype: int
        """
        return self._max_use

    @max_use.setter
    def max_use(self, max_use):
        """
        Sets the max_use of this TimePeriodUsable.
        The amount of times it can be used

        :param max_use: The max_use of this TimePeriodUsable.
        :type: int
        """

        self._max_use = max_use

    @property
    def time_length(self):
        """
        Gets the time_length of this TimePeriodUsable.
        The length of time

        :return: The time_length of this TimePeriodUsable.
        :rtype: int
        """
        return self._time_length

    @time_length.setter
    def time_length(self, time_length):
        """
        Sets the time_length of this TimePeriodUsable.
        The length of time

        :param time_length: The time_length of this TimePeriodUsable.
        :type: int
        """

        self._time_length = time_length

    @property
    def unit_of_time(self):
        """
        Gets the unit_of_time of this TimePeriodUsable.
        The unit of time

        :return: The unit_of_time of this TimePeriodUsable.
        :rtype: str
        """
        return self._unit_of_time

    @unit_of_time.setter
    def unit_of_time(self, unit_of_time):
        """
        Sets the unit_of_time of this TimePeriodUsable.
        The unit of time

        :param unit_of_time: The unit_of_time of this TimePeriodUsable.
        :type: str
        """

        self._unit_of_time = unit_of_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TimePeriodUsable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
