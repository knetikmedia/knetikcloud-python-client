# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TopicSubscriber(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disabled': 'bool',
        'email': 'str',
        'join_date': 'int',
        'mobile_number': 'str',
        'topic_id': 'str',
        'topic_subscriber_map': 'object',
        'user_id': 'int',
        'username': 'str'
    }

    attribute_map = {
        'disabled': 'disabled',
        'email': 'email',
        'join_date': 'join_date',
        'mobile_number': 'mobile_number',
        'topic_id': 'topic_id',
        'topic_subscriber_map': 'topic_subscriber_map',
        'user_id': 'user_id',
        'username': 'username'
    }

    def __init__(self, disabled=None, email=None, join_date=None, mobile_number=None, topic_id=None, topic_subscriber_map=None, user_id=None, username=None):
        """
        TopicSubscriber - a model defined in Swagger
        """

        self._disabled = None
        self._email = None
        self._join_date = None
        self._mobile_number = None
        self._topic_id = None
        self._topic_subscriber_map = None
        self._user_id = None
        self._username = None
        self.discriminator = None

        if disabled is not None:
          self.disabled = disabled
        if email is not None:
          self.email = email
        if join_date is not None:
          self.join_date = join_date
        if mobile_number is not None:
          self.mobile_number = mobile_number
        if topic_id is not None:
          self.topic_id = topic_id
        if topic_subscriber_map is not None:
          self.topic_subscriber_map = topic_subscriber_map
        if user_id is not None:
          self.user_id = user_id
        if username is not None:
          self.username = username

    @property
    def disabled(self):
        """
        Gets the disabled of this TopicSubscriber.

        :return: The disabled of this TopicSubscriber.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """
        Sets the disabled of this TopicSubscriber.

        :param disabled: The disabled of this TopicSubscriber.
        :type: bool
        """

        self._disabled = disabled

    @property
    def email(self):
        """
        Gets the email of this TopicSubscriber.

        :return: The email of this TopicSubscriber.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this TopicSubscriber.

        :param email: The email of this TopicSubscriber.
        :type: str
        """

        self._email = email

    @property
    def join_date(self):
        """
        Gets the join_date of this TopicSubscriber.

        :return: The join_date of this TopicSubscriber.
        :rtype: int
        """
        return self._join_date

    @join_date.setter
    def join_date(self, join_date):
        """
        Sets the join_date of this TopicSubscriber.

        :param join_date: The join_date of this TopicSubscriber.
        :type: int
        """

        self._join_date = join_date

    @property
    def mobile_number(self):
        """
        Gets the mobile_number of this TopicSubscriber.

        :return: The mobile_number of this TopicSubscriber.
        :rtype: str
        """
        return self._mobile_number

    @mobile_number.setter
    def mobile_number(self, mobile_number):
        """
        Sets the mobile_number of this TopicSubscriber.

        :param mobile_number: The mobile_number of this TopicSubscriber.
        :type: str
        """

        self._mobile_number = mobile_number

    @property
    def topic_id(self):
        """
        Gets the topic_id of this TopicSubscriber.

        :return: The topic_id of this TopicSubscriber.
        :rtype: str
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id):
        """
        Sets the topic_id of this TopicSubscriber.

        :param topic_id: The topic_id of this TopicSubscriber.
        :type: str
        """

        self._topic_id = topic_id

    @property
    def topic_subscriber_map(self):
        """
        Gets the topic_subscriber_map of this TopicSubscriber.

        :return: The topic_subscriber_map of this TopicSubscriber.
        :rtype: object
        """
        return self._topic_subscriber_map

    @topic_subscriber_map.setter
    def topic_subscriber_map(self, topic_subscriber_map):
        """
        Sets the topic_subscriber_map of this TopicSubscriber.

        :param topic_subscriber_map: The topic_subscriber_map of this TopicSubscriber.
        :type: object
        """

        self._topic_subscriber_map = topic_subscriber_map

    @property
    def user_id(self):
        """
        Gets the user_id of this TopicSubscriber.

        :return: The user_id of this TopicSubscriber.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this TopicSubscriber.

        :param user_id: The user_id of this TopicSubscriber.
        :type: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """
        Gets the username of this TopicSubscriber.

        :return: The username of this TopicSubscriber.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this TopicSubscriber.

        :param username: The username of this TopicSubscriber.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TopicSubscriber):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
