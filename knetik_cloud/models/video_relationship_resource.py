# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VideoRelationshipResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'SimpleReferenceResourcelong',
        'id': 'int',
        'relationship_details': 'str',
        'to': 'SimpleReferenceResourcelong'
    }

    attribute_map = {
        '_from': 'from',
        'id': 'id',
        'relationship_details': 'relationship_details',
        'to': 'to'
    }

    def __init__(self, _from=None, id=None, relationship_details=None, to=None):
        """
        VideoRelationshipResource - a model defined in Swagger
        """

        self.__from = None
        self._id = None
        self._relationship_details = None
        self._to = None

        if _from is not None:
          self._from = _from
        if id is not None:
          self.id = id
        self.relationship_details = relationship_details
        self.to = to

    @property
    def _from(self):
        """
        Gets the _from of this VideoRelationshipResource.
        The owner of the relationship

        :return: The _from of this VideoRelationshipResource.
        :rtype: SimpleReferenceResourcelong
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this VideoRelationshipResource.
        The owner of the relationship

        :param _from: The _from of this VideoRelationshipResource.
        :type: SimpleReferenceResourcelong
        """

        self.__from = _from

    @property
    def id(self):
        """
        Gets the id of this VideoRelationshipResource.
        The id of the relationship

        :return: The id of this VideoRelationshipResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VideoRelationshipResource.
        The id of the relationship

        :param id: The id of this VideoRelationshipResource.
        :type: int
        """

        self._id = id

    @property
    def relationship_details(self):
        """
        Gets the relationship_details of this VideoRelationshipResource.
        Details about the relationship such as type or other information. Max length 10 characters

        :return: The relationship_details of this VideoRelationshipResource.
        :rtype: str
        """
        return self._relationship_details

    @relationship_details.setter
    def relationship_details(self, relationship_details):
        """
        Sets the relationship_details of this VideoRelationshipResource.
        Details about the relationship such as type or other information. Max length 10 characters

        :param relationship_details: The relationship_details of this VideoRelationshipResource.
        :type: str
        """
        if relationship_details is None:
            raise ValueError("Invalid value for `relationship_details`, must not be `None`")

        self._relationship_details = relationship_details

    @property
    def to(self):
        """
        Gets the to of this VideoRelationshipResource.
        The target of the relationship.

        :return: The to of this VideoRelationshipResource.
        :rtype: SimpleReferenceResourcelong
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this VideoRelationshipResource.
        The target of the relationship.

        :param to: The to of this VideoRelationshipResource.
        :type: SimpleReferenceResourcelong
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VideoRelationshipResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
