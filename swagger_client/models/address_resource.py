# coding: utf-8

"""
    Knetik Platform API Documentation Latest

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com

    OpenAPI spec version: Latest
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AddressResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, address1=None, address2=None, city=None, country_code=None, postal_code=None, state_code=None):
        """
        AddressResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address1': 'str',
            'address2': 'str',
            'city': 'str',
            'country_code': 'str',
            'postal_code': 'str',
            'state_code': 'str'
        }

        self.attribute_map = {
            'address1': 'address1',
            'address2': 'address2',
            'city': 'city',
            'country_code': 'country_code',
            'postal_code': 'postal_code',
            'state_code': 'state_code'
        }

        self._address1 = address1
        self._address2 = address2
        self._city = city
        self._country_code = country_code
        self._postal_code = postal_code
        self._state_code = state_code

    @property
    def address1(self):
        """
        Gets the address1 of this AddressResource.
        The first line of the address

        :return: The address1 of this AddressResource.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """
        Sets the address1 of this AddressResource.
        The first line of the address

        :param address1: The address1 of this AddressResource.
        :type: str
        """
        if address1 is None:
            raise ValueError("Invalid value for `address1`, must not be `None`")

        self._address1 = address1

    @property
    def address2(self):
        """
        Gets the address2 of this AddressResource.
        A second line of the address

        :return: The address2 of this AddressResource.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """
        Sets the address2 of this AddressResource.
        A second line of the address

        :param address2: The address2 of this AddressResource.
        :type: str
        """

        self._address2 = address2

    @property
    def city(self):
        """
        Gets the city of this AddressResource.
        The city

        :return: The city of this AddressResource.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this AddressResource.
        The city

        :param city: The city of this AddressResource.
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def country_code(self):
        """
        Gets the country_code of this AddressResource.
        The iso3 code for the country

        :return: The country_code of this AddressResource.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this AddressResource.
        The iso3 code for the country

        :param country_code: The country_code of this AddressResource.
        :type: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def postal_code(self):
        """
        Gets the postal_code of this AddressResource.
        The postal code

        :return: The postal_code of this AddressResource.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this AddressResource.
        The postal code

        :param postal_code: The postal_code of this AddressResource.
        :type: str
        """

        self._postal_code = postal_code

    @property
    def state_code(self):
        """
        Gets the state_code of this AddressResource.
        The code for the state. Required if the country has states/provinces/equivalent

        :return: The state_code of this AddressResource.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """
        Sets the state_code of this AddressResource.
        The code for the state. Required if the country has states/provinces/equivalent

        :param state_code: The state_code of this AddressResource.
        :type: str
        """

        self._state_code = state_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
