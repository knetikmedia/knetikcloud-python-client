# coding: utf-8

"""
    Knetik Platform API Documentation Latest

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: Latest
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AmazonS3Activity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, action=None, created_date=None, filename=None, id=None, object_key=None, url=None, user_id=None):
        """
        AmazonS3Activity - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'action': 'str',
            'created_date': 'int',
            'filename': 'str',
            'id': 'int',
            'object_key': 'str',
            'url': 'str',
            'user_id': 'int'
        }

        self.attribute_map = {
            'action': 'action',
            'created_date': 'created_date',
            'filename': 'filename',
            'id': 'id',
            'object_key': 'object_key',
            'url': 'url',
            'user_id': 'user_id'
        }

        self._action = action
        self._created_date = created_date
        self._filename = filename
        self._id = id
        self._object_key = object_key
        self._url = url
        self._user_id = user_id

    @property
    def action(self):
        """
        Gets the action of this AmazonS3Activity.
        S3 action (i.e., 'PUT') associated with the activity

        :return: The action of this AmazonS3Activity.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this AmazonS3Activity.
        S3 action (i.e., 'PUT') associated with the activity

        :param action: The action of this AmazonS3Activity.
        :type: str
        """

        self._action = action

    @property
    def created_date(self):
        """
        Gets the created_date of this AmazonS3Activity.
        Date the resource was created in S3

        :return: The created_date of this AmazonS3Activity.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this AmazonS3Activity.
        Date the resource was created in S3

        :param created_date: The created_date of this AmazonS3Activity.
        :type: int
        """

        self._created_date = created_date

    @property
    def filename(self):
        """
        Gets the filename of this AmazonS3Activity.
        Name of the file being processed as a resource in S3

        :return: The filename of this AmazonS3Activity.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """
        Sets the filename of this AmazonS3Activity.
        Name of the file being processed as a resource in S3

        :param filename: The filename of this AmazonS3Activity.
        :type: str
        """

        self._filename = filename

    @property
    def id(self):
        """
        Gets the id of this AmazonS3Activity.
        Unique id of the S3 activity

        :return: The id of this AmazonS3Activity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AmazonS3Activity.
        Unique id of the S3 activity

        :param id: The id of this AmazonS3Activity.
        :type: int
        """

        self._id = id

    @property
    def object_key(self):
        """
        Gets the object_key of this AmazonS3Activity.
        S3 object key for the resource

        :return: The object_key of this AmazonS3Activity.
        :rtype: str
        """
        return self._object_key

    @object_key.setter
    def object_key(self, object_key):
        """
        Sets the object_key of this AmazonS3Activity.
        S3 object key for the resource

        :param object_key: The object_key of this AmazonS3Activity.
        :type: str
        """

        self._object_key = object_key

    @property
    def url(self):
        """
        Gets the url of this AmazonS3Activity.
        URL for accessing the S3 resource

        :return: The url of this AmazonS3Activity.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this AmazonS3Activity.
        URL for accessing the S3 resource

        :param url: The url of this AmazonS3Activity.
        :type: str
        """

        self._url = url

    @property
    def user_id(self):
        """
        Gets the user_id of this AmazonS3Activity.
        The id of the user that created this S3 activity

        :return: The user_id of this AmazonS3Activity.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this AmazonS3Activity.
        The id of the user that created this S3 activity

        :param user_id: The user_id of this AmazonS3Activity.
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
