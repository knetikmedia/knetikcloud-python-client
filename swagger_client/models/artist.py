# coding: utf-8

"""
    Knetik Platform API Documentation Latest

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com

    OpenAPI spec version: Latest
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Artist(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, additional_properties=None, born=None, contribution_count=None, created=None, died=None, id=None, long_description=None, name=None, priority=None, properties_string=None, short_description=None, template=None, updated=None):
        """
        Artist - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'additional_properties': 'dict(str, ModelProperty)',
            'born': 'int',
            'contribution_count': 'int',
            'created': 'int',
            'died': 'int',
            'id': 'int',
            'long_description': 'str',
            'name': 'str',
            'priority': 'int',
            'properties_string': 'str',
            'short_description': 'str',
            'template': 'str',
            'updated': 'int'
        }

        self.attribute_map = {
            'additional_properties': 'additional_properties',
            'born': 'born',
            'contribution_count': 'contribution_count',
            'created': 'created',
            'died': 'died',
            'id': 'id',
            'long_description': 'long_description',
            'name': 'name',
            'priority': 'priority',
            'properties_string': 'properties_string',
            'short_description': 'short_description',
            'template': 'template',
            'updated': 'updated'
        }

        self._additional_properties = additional_properties
        self._born = born
        self._contribution_count = contribution_count
        self._created = created
        self._died = died
        self._id = id
        self._long_description = long_description
        self._name = name
        self._priority = priority
        self._properties_string = properties_string
        self._short_description = short_description
        self._template = template
        self._updated = updated

    @property
    def additional_properties(self):
        """
        Gets the additional_properties of this Artist.

        :return: The additional_properties of this Artist.
        :rtype: dict(str, ModelProperty)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """
        Sets the additional_properties of this Artist.

        :param additional_properties: The additional_properties of this Artist.
        :type: dict(str, ModelProperty)
        """

        self._additional_properties = additional_properties

    @property
    def born(self):
        """
        Gets the born of this Artist.

        :return: The born of this Artist.
        :rtype: int
        """
        return self._born

    @born.setter
    def born(self, born):
        """
        Sets the born of this Artist.

        :param born: The born of this Artist.
        :type: int
        """

        self._born = born

    @property
    def contribution_count(self):
        """
        Gets the contribution_count of this Artist.

        :return: The contribution_count of this Artist.
        :rtype: int
        """
        return self._contribution_count

    @contribution_count.setter
    def contribution_count(self, contribution_count):
        """
        Sets the contribution_count of this Artist.

        :param contribution_count: The contribution_count of this Artist.
        :type: int
        """

        self._contribution_count = contribution_count

    @property
    def created(self):
        """
        Gets the created of this Artist.

        :return: The created of this Artist.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Artist.

        :param created: The created of this Artist.
        :type: int
        """

        self._created = created

    @property
    def died(self):
        """
        Gets the died of this Artist.

        :return: The died of this Artist.
        :rtype: int
        """
        return self._died

    @died.setter
    def died(self, died):
        """
        Sets the died of this Artist.

        :param died: The died of this Artist.
        :type: int
        """

        self._died = died

    @property
    def id(self):
        """
        Gets the id of this Artist.

        :return: The id of this Artist.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Artist.

        :param id: The id of this Artist.
        :type: int
        """

        self._id = id

    @property
    def long_description(self):
        """
        Gets the long_description of this Artist.

        :return: The long_description of this Artist.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """
        Sets the long_description of this Artist.

        :param long_description: The long_description of this Artist.
        :type: str
        """

        self._long_description = long_description

    @property
    def name(self):
        """
        Gets the name of this Artist.

        :return: The name of this Artist.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Artist.

        :param name: The name of this Artist.
        :type: str
        """

        self._name = name

    @property
    def priority(self):
        """
        Gets the priority of this Artist.

        :return: The priority of this Artist.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this Artist.

        :param priority: The priority of this Artist.
        :type: int
        """

        self._priority = priority

    @property
    def properties_string(self):
        """
        Gets the properties_string of this Artist.

        :return: The properties_string of this Artist.
        :rtype: str
        """
        return self._properties_string

    @properties_string.setter
    def properties_string(self, properties_string):
        """
        Sets the properties_string of this Artist.

        :param properties_string: The properties_string of this Artist.
        :type: str
        """

        self._properties_string = properties_string

    @property
    def short_description(self):
        """
        Gets the short_description of this Artist.

        :return: The short_description of this Artist.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """
        Sets the short_description of this Artist.

        :param short_description: The short_description of this Artist.
        :type: str
        """

        self._short_description = short_description

    @property
    def template(self):
        """
        Gets the template of this Artist.

        :return: The template of this Artist.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this Artist.

        :param template: The template of this Artist.
        :type: str
        """

        self._template = template

    @property
    def updated(self):
        """
        Gets the updated of this Artist.

        :return: The updated of this Artist.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Artist.

        :param updated: The updated of this Artist.
        :type: int
        """

        self._updated = updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
