# coding: utf-8

"""
    Knetik Platform API Documentation Latest

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com

    OpenAPI spec version: Latest
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BreEventLog(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, customer=None, event_id=None, event_name=None, event_start_date=None, id=None, parameters=None, rules=None):
        """
        BreEventLog - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'customer': 'str',
            'event_id': 'int',
            'event_name': 'str',
            'event_start_date': 'int',
            'id': 'str',
            'parameters': 'object',
            'rules': 'list[BreRuleLog]'
        }

        self.attribute_map = {
            'customer': 'customer',
            'event_id': 'event_id',
            'event_name': 'event_name',
            'event_start_date': 'event_start_date',
            'id': 'id',
            'parameters': 'parameters',
            'rules': 'rules'
        }

        self._customer = customer
        self._event_id = event_id
        self._event_name = event_name
        self._event_start_date = event_start_date
        self._id = id
        self._parameters = parameters
        self._rules = rules

    @property
    def customer(self):
        """
        Gets the customer of this BreEventLog.
        The customer of the BRE event log

        :return: The customer of this BreEventLog.
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """
        Sets the customer of this BreEventLog.
        The customer of the BRE event log

        :param customer: The customer of this BreEventLog.
        :type: str
        """

        self._customer = customer

    @property
    def event_id(self):
        """
        Gets the event_id of this BreEventLog.
        The event id of the BRE event log

        :return: The event_id of this BreEventLog.
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """
        Sets the event_id of this BreEventLog.
        The event id of the BRE event log

        :param event_id: The event_id of this BreEventLog.
        :type: int
        """

        self._event_id = event_id

    @property
    def event_name(self):
        """
        Gets the event_name of this BreEventLog.
        The event name of the BRE event log

        :return: The event_name of this BreEventLog.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """
        Sets the event_name of this BreEventLog.
        The event name of the BRE event log

        :param event_name: The event_name of this BreEventLog.
        :type: str
        """

        self._event_name = event_name

    @property
    def event_start_date(self):
        """
        Gets the event_start_date of this BreEventLog.
        The event start date of the BRE event log

        :return: The event_start_date of this BreEventLog.
        :rtype: int
        """
        return self._event_start_date

    @event_start_date.setter
    def event_start_date(self, event_start_date):
        """
        Sets the event_start_date of this BreEventLog.
        The event start date of the BRE event log

        :param event_start_date: The event_start_date of this BreEventLog.
        :type: int
        """

        self._event_start_date = event_start_date

    @property
    def id(self):
        """
        Gets the id of this BreEventLog.
        The id of the BRE event log

        :return: The id of this BreEventLog.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BreEventLog.
        The id of the BRE event log

        :param id: The id of this BreEventLog.
        :type: str
        """

        self._id = id

    @property
    def parameters(self):
        """
        Gets the parameters of this BreEventLog.
        The event paramters of the BRE event log

        :return: The parameters of this BreEventLog.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this BreEventLog.
        The event paramters of the BRE event log

        :param parameters: The parameters of this BreEventLog.
        :type: object
        """

        self._parameters = parameters

    @property
    def rules(self):
        """
        Gets the rules of this BreEventLog.
        The rules of the BRE event log

        :return: The rules of this BreEventLog.
        :rtype: list[BreRuleLog]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """
        Sets the rules of this BreEventLog.
        The rules of the BRE event log

        :param rules: The rules of this BreEventLog.
        :type: list[BreRuleLog]
        """

        self._rules = rules

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
