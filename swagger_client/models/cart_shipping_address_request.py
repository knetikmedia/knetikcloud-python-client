# coding: utf-8

"""
    Knetik Platform API Documentation Latest

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com

    OpenAPI spec version: Latest
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CartShippingAddressRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, city=None, country_code_iso3=None, email=None, first_name=None, last_name=None, name_prefix=None, order_notes=None, phone_number=None, postal_state_code=None, shipping_address_line1=None, shipping_address_line2=None, zip=None):
        """
        CartShippingAddressRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'city': 'str',
            'country_code_iso3': 'str',
            'email': 'str',
            'first_name': 'str',
            'last_name': 'str',
            'name_prefix': 'str',
            'order_notes': 'str',
            'phone_number': 'str',
            'postal_state_code': 'str',
            'shipping_address_line1': 'str',
            'shipping_address_line2': 'str',
            'zip': 'str'
        }

        self.attribute_map = {
            'city': 'city',
            'country_code_iso3': 'country_code_iso3',
            'email': 'email',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'name_prefix': 'name_prefix',
            'order_notes': 'order_notes',
            'phone_number': 'phone_number',
            'postal_state_code': 'postal_state_code',
            'shipping_address_line1': 'shipping_address_line1',
            'shipping_address_line2': 'shipping_address_line2',
            'zip': 'zip'
        }

        self._city = city
        self._country_code_iso3 = country_code_iso3
        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._name_prefix = name_prefix
        self._order_notes = order_notes
        self._phone_number = phone_number
        self._postal_state_code = postal_state_code
        self._shipping_address_line1 = shipping_address_line1
        self._shipping_address_line2 = shipping_address_line2
        self._zip = zip

    @property
    def city(self):
        """
        Gets the city of this CartShippingAddressRequest.
        The city of the user

        :return: The city of this CartShippingAddressRequest.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this CartShippingAddressRequest.
        The city of the user

        :param city: The city of this CartShippingAddressRequest.
        :type: str
        """

        self._city = city

    @property
    def country_code_iso3(self):
        """
        Gets the country_code_iso3 of this CartShippingAddressRequest.
        The country code of the user

        :return: The country_code_iso3 of this CartShippingAddressRequest.
        :rtype: str
        """
        return self._country_code_iso3

    @country_code_iso3.setter
    def country_code_iso3(self, country_code_iso3):
        """
        Sets the country_code_iso3 of this CartShippingAddressRequest.
        The country code of the user

        :param country_code_iso3: The country_code_iso3 of this CartShippingAddressRequest.
        :type: str
        """

        self._country_code_iso3 = country_code_iso3

    @property
    def email(self):
        """
        Gets the email of this CartShippingAddressRequest.
        The email of the user

        :return: The email of this CartShippingAddressRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this CartShippingAddressRequest.
        The email of the user

        :param email: The email of this CartShippingAddressRequest.
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this CartShippingAddressRequest.
        The first name of the user

        :return: The first_name of this CartShippingAddressRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this CartShippingAddressRequest.
        The first name of the user

        :param first_name: The first_name of this CartShippingAddressRequest.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this CartShippingAddressRequest.
        The last name of the user

        :return: The last_name of this CartShippingAddressRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this CartShippingAddressRequest.
        The last name of the user

        :param last_name: The last_name of this CartShippingAddressRequest.
        :type: str
        """

        self._last_name = last_name

    @property
    def name_prefix(self):
        """
        Gets the name_prefix of this CartShippingAddressRequest.

        :return: The name_prefix of this CartShippingAddressRequest.
        :rtype: str
        """
        return self._name_prefix

    @name_prefix.setter
    def name_prefix(self, name_prefix):
        """
        Sets the name_prefix of this CartShippingAddressRequest.

        :param name_prefix: The name_prefix of this CartShippingAddressRequest.
        :type: str
        """

        self._name_prefix = name_prefix

    @property
    def order_notes(self):
        """
        Gets the order_notes of this CartShippingAddressRequest.
        The order notes the user

        :return: The order_notes of this CartShippingAddressRequest.
        :rtype: str
        """
        return self._order_notes

    @order_notes.setter
    def order_notes(self, order_notes):
        """
        Sets the order_notes of this CartShippingAddressRequest.
        The order notes the user

        :param order_notes: The order_notes of this CartShippingAddressRequest.
        :type: str
        """

        self._order_notes = order_notes

    @property
    def phone_number(self):
        """
        Gets the phone_number of this CartShippingAddressRequest.
        The phone number of the user

        :return: The phone_number of this CartShippingAddressRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this CartShippingAddressRequest.
        The phone number of the user

        :param phone_number: The phone_number of this CartShippingAddressRequest.
        :type: str
        """

        self._phone_number = phone_number

    @property
    def postal_state_code(self):
        """
        Gets the postal_state_code of this CartShippingAddressRequest.
        The postal state code of the user

        :return: The postal_state_code of this CartShippingAddressRequest.
        :rtype: str
        """
        return self._postal_state_code

    @postal_state_code.setter
    def postal_state_code(self, postal_state_code):
        """
        Sets the postal_state_code of this CartShippingAddressRequest.
        The postal state code of the user

        :param postal_state_code: The postal_state_code of this CartShippingAddressRequest.
        :type: str
        """

        self._postal_state_code = postal_state_code

    @property
    def shipping_address_line1(self):
        """
        Gets the shipping_address_line1 of this CartShippingAddressRequest.
        The shipping address of the user, first line

        :return: The shipping_address_line1 of this CartShippingAddressRequest.
        :rtype: str
        """
        return self._shipping_address_line1

    @shipping_address_line1.setter
    def shipping_address_line1(self, shipping_address_line1):
        """
        Sets the shipping_address_line1 of this CartShippingAddressRequest.
        The shipping address of the user, first line

        :param shipping_address_line1: The shipping_address_line1 of this CartShippingAddressRequest.
        :type: str
        """

        self._shipping_address_line1 = shipping_address_line1

    @property
    def shipping_address_line2(self):
        """
        Gets the shipping_address_line2 of this CartShippingAddressRequest.
        The shipping address of the user, second line

        :return: The shipping_address_line2 of this CartShippingAddressRequest.
        :rtype: str
        """
        return self._shipping_address_line2

    @shipping_address_line2.setter
    def shipping_address_line2(self, shipping_address_line2):
        """
        Sets the shipping_address_line2 of this CartShippingAddressRequest.
        The shipping address of the user, second line

        :param shipping_address_line2: The shipping_address_line2 of this CartShippingAddressRequest.
        :type: str
        """

        self._shipping_address_line2 = shipping_address_line2

    @property
    def zip(self):
        """
        Gets the zip of this CartShippingAddressRequest.
        The zipcode of the user

        :return: The zip of this CartShippingAddressRequest.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """
        Sets the zip of this CartShippingAddressRequest.
        The zipcode of the user

        :param zip: The zip of this CartShippingAddressRequest.
        :type: str
        """

        self._zip = zip

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
