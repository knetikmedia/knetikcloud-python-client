# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CategoryResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, active=None, additional_properties=None, id=None, name=None, template=None):
        """
        CategoryResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'active': 'bool',
            'additional_properties': 'dict(str, ModelProperty)',
            'id': 'str',
            'name': 'str',
            'template': 'str'
        }

        self.attribute_map = {
            'active': 'active',
            'additional_properties': 'additional_properties',
            'id': 'id',
            'name': 'name',
            'template': 'template'
        }

        self._active = active
        self._additional_properties = additional_properties
        self._id = id
        self._name = name
        self._template = template

    @property
    def active(self):
        """
        Gets the active of this CategoryResource.
        Whether the category is currently active. If not, it and its questions will be filtered out.

        :return: The active of this CategoryResource.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this CategoryResource.
        Whether the category is currently active. If not, it and its questions will be filtered out.

        :param active: The active of this CategoryResource.
        :type: bool
        """

        self._active = active

    @property
    def additional_properties(self):
        """
        Gets the additional_properties of this CategoryResource.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type

        :return: The additional_properties of this CategoryResource.
        :rtype: dict(str, ModelProperty)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """
        Sets the additional_properties of this CategoryResource.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type

        :param additional_properties: The additional_properties of this CategoryResource.
        :type: dict(str, ModelProperty)
        """

        self._additional_properties = additional_properties

    @property
    def id(self):
        """
        Gets the id of this CategoryResource.
        The unique ID for this category

        :return: The id of this CategoryResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CategoryResource.
        The unique ID for this category

        :param id: The id of this CategoryResource.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this CategoryResource.
        The name of this category. Cannot be blank

        :return: The name of this CategoryResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CategoryResource.
        The name of this category. Cannot be blank

        :param name: The name of this CategoryResource.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def template(self):
        """
        Gets the template of this CategoryResource.
        A category template this category is validated against (private). May be null and no validation of additional_properties will be done

        :return: The template of this CategoryResource.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this CategoryResource.
        A category template this category is validated against (private). May be null and no validation of additional_properties will be done

        :param template: The template of this CategoryResource.
        :type: str
        """

        self._template = template

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CategoryResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
