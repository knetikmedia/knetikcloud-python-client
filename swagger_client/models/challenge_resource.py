# coding: utf-8

"""
    Knetik Platform API Documentation Latest

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: Latest
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ChallengeResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, activities=None, additional_properties=None, campaign_id=None, copy_of=None, created_date=None, end_date=None, id=None, leaderboard_strategy=None, long_description=None, name=None, next_event_date=None, reward_lag_minutes=None, reward_set=None, schedule=None, short_description=None, start_date=None, template=None, updated_date=None):
        """
        ChallengeResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'activities': 'int',
            'additional_properties': 'dict(str, ModelProperty)',
            'campaign_id': 'int',
            'copy_of': 'int',
            'created_date': 'int',
            'end_date': 'int',
            'id': 'int',
            'leaderboard_strategy': 'str',
            'long_description': 'str',
            'name': 'str',
            'next_event_date': 'int',
            'reward_lag_minutes': 'int',
            'reward_set': 'RewardSetResource',
            'schedule': 'Schedule',
            'short_description': 'str',
            'start_date': 'int',
            'template': 'str',
            'updated_date': 'int'
        }

        self.attribute_map = {
            'activities': 'activities',
            'additional_properties': 'additional_properties',
            'campaign_id': 'campaign_id',
            'copy_of': 'copy_of',
            'created_date': 'created_date',
            'end_date': 'end_date',
            'id': 'id',
            'leaderboard_strategy': 'leaderboard_strategy',
            'long_description': 'long_description',
            'name': 'name',
            'next_event_date': 'next_event_date',
            'reward_lag_minutes': 'reward_lag_minutes',
            'reward_set': 'reward_set',
            'schedule': 'schedule',
            'short_description': 'short_description',
            'start_date': 'start_date',
            'template': 'template',
            'updated_date': 'updated_date'
        }

        self._activities = activities
        self._additional_properties = additional_properties
        self._campaign_id = campaign_id
        self._copy_of = copy_of
        self._created_date = created_date
        self._end_date = end_date
        self._id = id
        self._leaderboard_strategy = leaderboard_strategy
        self._long_description = long_description
        self._name = name
        self._next_event_date = next_event_date
        self._reward_lag_minutes = reward_lag_minutes
        self._reward_set = reward_set
        self._schedule = schedule
        self._short_description = short_description
        self._start_date = start_date
        self._template = template
        self._updated_date = updated_date

    @property
    def activities(self):
        """
        Gets the activities of this ChallengeResource.
        The number of activities allowed to this challenge

        :return: The activities of this ChallengeResource.
        :rtype: int
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """
        Sets the activities of this ChallengeResource.
        The number of activities allowed to this challenge

        :param activities: The activities of this ChallengeResource.
        :type: int
        """

        self._activities = activities

    @property
    def additional_properties(self):
        """
        Gets the additional_properties of this ChallengeResource.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type

        :return: The additional_properties of this ChallengeResource.
        :rtype: dict(str, ModelProperty)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """
        Sets the additional_properties of this ChallengeResource.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type

        :param additional_properties: The additional_properties of this ChallengeResource.
        :type: dict(str, ModelProperty)
        """

        self._additional_properties = additional_properties

    @property
    def campaign_id(self):
        """
        Gets the campaign_id of this ChallengeResource.
        The id of the campaign this challenge is a part of. The challenge must be tied to an active campaign before it will spawn events

        :return: The campaign_id of this ChallengeResource.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """
        Sets the campaign_id of this ChallengeResource.
        The id of the campaign this challenge is a part of. The challenge must be tied to an active campaign before it will spawn events

        :param campaign_id: The campaign_id of this ChallengeResource.
        :type: int
        """

        self._campaign_id = campaign_id

    @property
    def copy_of(self):
        """
        Gets the copy_of of this ChallengeResource.
        The ID of the original challenge it was copied from

        :return: The copy_of of this ChallengeResource.
        :rtype: int
        """
        return self._copy_of

    @copy_of.setter
    def copy_of(self, copy_of):
        """
        Sets the copy_of of this ChallengeResource.
        The ID of the original challenge it was copied from

        :param copy_of: The copy_of of this ChallengeResource.
        :type: int
        """

        self._copy_of = copy_of

    @property
    def created_date(self):
        """
        Gets the created_date of this ChallengeResource.
        The date/time this resource was created in seconds since unix epoch

        :return: The created_date of this ChallengeResource.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this ChallengeResource.
        The date/time this resource was created in seconds since unix epoch

        :param created_date: The created_date of this ChallengeResource.
        :type: int
        """

        self._created_date = created_date

    @property
    def end_date(self):
        """
        Gets the end_date of this ChallengeResource.
        The end date of this challenge in seconds since epoch. required if part of a campaign

        :return: The end_date of this ChallengeResource.
        :rtype: int
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this ChallengeResource.
        The end date of this challenge in seconds since epoch. required if part of a campaign

        :param end_date: The end_date of this ChallengeResource.
        :type: int
        """

        self._end_date = end_date

    @property
    def id(self):
        """
        Gets the id of this ChallengeResource.
        The unique ID for that resource

        :return: The id of this ChallengeResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ChallengeResource.
        The unique ID for that resource

        :param id: The id of this ChallengeResource.
        :type: int
        """

        self._id = id

    @property
    def leaderboard_strategy(self):
        """
        Gets the leaderboard_strategy of this ChallengeResource.
        The strategy for calculating the leaderboard. Defaults to highest score. Value MUST come from the list of available strategies from the Leaderboard Service.

        :return: The leaderboard_strategy of this ChallengeResource.
        :rtype: str
        """
        return self._leaderboard_strategy

    @leaderboard_strategy.setter
    def leaderboard_strategy(self, leaderboard_strategy):
        """
        Sets the leaderboard_strategy of this ChallengeResource.
        The strategy for calculating the leaderboard. Defaults to highest score. Value MUST come from the list of available strategies from the Leaderboard Service.

        :param leaderboard_strategy: The leaderboard_strategy of this ChallengeResource.
        :type: str
        """

        self._leaderboard_strategy = leaderboard_strategy

    @property
    def long_description(self):
        """
        Gets the long_description of this ChallengeResource.
        The user friendly name of that resource. Defaults to blank string

        :return: The long_description of this ChallengeResource.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """
        Sets the long_description of this ChallengeResource.
        The user friendly name of that resource. Defaults to blank string

        :param long_description: The long_description of this ChallengeResource.
        :type: str
        """

        self._long_description = long_description

    @property
    def name(self):
        """
        Gets the name of this ChallengeResource.
        The user friendly name of that resource

        :return: The name of this ChallengeResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ChallengeResource.
        The user friendly name of that resource

        :param name: The name of this ChallengeResource.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def next_event_date(self):
        """
        Gets the next_event_date of this ChallengeResource.
        The next date this challenge will be occur in seconds since epoch

        :return: The next_event_date of this ChallengeResource.
        :rtype: int
        """
        return self._next_event_date

    @next_event_date.setter
    def next_event_date(self, next_event_date):
        """
        Sets the next_event_date of this ChallengeResource.
        The next date this challenge will be occur in seconds since epoch

        :param next_event_date: The next_event_date of this ChallengeResource.
        :type: int
        """

        self._next_event_date = next_event_date

    @property
    def reward_lag_minutes(self):
        """
        Gets the reward_lag_minutes of this ChallengeResource.
        The number of minutes minimum to wait at the end of this challenge before running rewards, to allow activities to complete

        :return: The reward_lag_minutes of this ChallengeResource.
        :rtype: int
        """
        return self._reward_lag_minutes

    @reward_lag_minutes.setter
    def reward_lag_minutes(self, reward_lag_minutes):
        """
        Sets the reward_lag_minutes of this ChallengeResource.
        The number of minutes minimum to wait at the end of this challenge before running rewards, to allow activities to complete

        :param reward_lag_minutes: The reward_lag_minutes of this ChallengeResource.
        :type: int
        """

        self._reward_lag_minutes = reward_lag_minutes

    @property
    def reward_set(self):
        """
        Gets the reward_set of this ChallengeResource.
        The rewards to give at the end of the challenge. When creating/updating only id is used. Reward set must be pre-existing

        :return: The reward_set of this ChallengeResource.
        :rtype: RewardSetResource
        """
        return self._reward_set

    @reward_set.setter
    def reward_set(self, reward_set):
        """
        Sets the reward_set of this ChallengeResource.
        The rewards to give at the end of the challenge. When creating/updating only id is used. Reward set must be pre-existing

        :param reward_set: The reward_set of this ChallengeResource.
        :type: RewardSetResource
        """

        self._reward_set = reward_set

    @property
    def schedule(self):
        """
        Gets the schedule of this ChallengeResource.
        The repeat schedule for the challenge

        :return: The schedule of this ChallengeResource.
        :rtype: Schedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this ChallengeResource.
        The repeat schedule for the challenge

        :param schedule: The schedule of this ChallengeResource.
        :type: Schedule
        """

        self._schedule = schedule

    @property
    def short_description(self):
        """
        Gets the short_description of this ChallengeResource.
        The user friendly name of that resource. Defaults to blank string

        :return: The short_description of this ChallengeResource.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """
        Sets the short_description of this ChallengeResource.
        The user friendly name of that resource. Defaults to blank string

        :param short_description: The short_description of this ChallengeResource.
        :type: str
        """

        self._short_description = short_description

    @property
    def start_date(self):
        """
        Gets the start_date of this ChallengeResource.
        The start date of this challenge in seconds since epoch. required if part of a campaign

        :return: The start_date of this ChallengeResource.
        :rtype: int
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this ChallengeResource.
        The start date of this challenge in seconds since epoch. required if part of a campaign

        :param start_date: The start_date of this ChallengeResource.
        :type: int
        """

        self._start_date = start_date

    @property
    def template(self):
        """
        Gets the template of this ChallengeResource.
        A challenge template this challenge is validated against (private). May be null and no validation of additional_properties will be done

        :return: The template of this ChallengeResource.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this ChallengeResource.
        A challenge template this challenge is validated against (private). May be null and no validation of additional_properties will be done

        :param template: The template of this ChallengeResource.
        :type: str
        """

        self._template = template

    @property
    def updated_date(self):
        """
        Gets the updated_date of this ChallengeResource.
        The date/time this resource was last updated in seconds since unix epoch

        :return: The updated_date of this ChallengeResource.
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """
        Sets the updated_date of this ChallengeResource.
        The date/time this resource was last updated in seconds since unix epoch

        :param updated_date: The updated_date of this ChallengeResource.
        :type: int
        """

        self._updated_date = updated_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
