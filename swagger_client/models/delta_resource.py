# coding: utf-8

"""
    Knetik Platform API Documentation Latest

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: Latest
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeltaResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, category_id=None, media_type=None, question_id=None, state=None, tags=None, updated_date=None):
        """
        DeltaResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'category_id': 'str',
            'media_type': 'str',
            'question_id': 'str',
            'state': 'str',
            'tags': 'list[str]',
            'updated_date': 'int'
        }

        self.attribute_map = {
            'category_id': 'category_id',
            'media_type': 'media_type',
            'question_id': 'question_id',
            'state': 'state',
            'tags': 'tags',
            'updated_date': 'updated_date'
        }

        self._category_id = category_id
        self._media_type = media_type
        self._question_id = question_id
        self._state = state
        self._tags = tags
        self._updated_date = updated_date

    @property
    def category_id(self):
        """
        Gets the category_id of this DeltaResource.
        The id of the category for question

        :return: The category_id of this DeltaResource.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this DeltaResource.
        The id of the category for question

        :param category_id: The category_id of this DeltaResource.
        :type: str
        """

        self._category_id = category_id

    @property
    def media_type(self):
        """
        Gets the media_type of this DeltaResource.
        The media type of the question

        :return: The media_type of this DeltaResource.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """
        Sets the media_type of this DeltaResource.
        The media type of the question

        :param media_type: The media_type of this DeltaResource.
        :type: str
        """

        self._media_type = media_type

    @property
    def question_id(self):
        """
        Gets the question_id of this DeltaResource.
        The id of the question

        :return: The question_id of this DeltaResource.
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """
        Sets the question_id of this DeltaResource.
        The id of the question

        :param question_id: The question_id of this DeltaResource.
        :type: str
        """

        self._question_id = question_id

    @property
    def state(self):
        """
        Gets the state of this DeltaResource.
        Whether the question was updated or removed

        :return: The state of this DeltaResource.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this DeltaResource.
        Whether the question was updated or removed

        :param state: The state of this DeltaResource.
        :type: str
        """
        allowed_values = ["UPDATED", "REMOVED"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tags(self):
        """
        Gets the tags of this DeltaResource.
        The tags for the question

        :return: The tags of this DeltaResource.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this DeltaResource.
        The tags for the question

        :param tags: The tags of this DeltaResource.
        :type: list[str]
        """

        self._tags = tags

    @property
    def updated_date(self):
        """
        Gets the updated_date of this DeltaResource.
        The date this question was last updated in seconds since unix epoch

        :return: The updated_date of this DeltaResource.
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """
        Sets the updated_date of this DeltaResource.
        The date this question was last updated in seconds since unix epoch

        :param updated_date: The updated_date of this DeltaResource.
        :type: int
        """

        self._updated_date = updated_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
