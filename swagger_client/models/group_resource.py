# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GroupResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, additional_properties=None, description=None, member_count=None, message_of_the_day=None, name=None, parent=None, status=None, sub_member_count=None, template=None, unique_name=None):
        """
        GroupResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'additional_properties': 'dict(str, ModelProperty)',
            'description': 'str',
            'member_count': 'int',
            'message_of_the_day': 'str',
            'name': 'str',
            'parent': 'str',
            'status': 'str',
            'sub_member_count': 'int',
            'template': 'str',
            'unique_name': 'str'
        }

        self.attribute_map = {
            'additional_properties': 'additional_properties',
            'description': 'description',
            'member_count': 'member_count',
            'message_of_the_day': 'message_of_the_day',
            'name': 'name',
            'parent': 'parent',
            'status': 'status',
            'sub_member_count': 'sub_member_count',
            'template': 'template',
            'unique_name': 'unique_name'
        }

        self._additional_properties = additional_properties
        self._description = description
        self._member_count = member_count
        self._message_of_the_day = message_of_the_day
        self._name = name
        self._parent = parent
        self._status = status
        self._sub_member_count = sub_member_count
        self._template = template
        self._unique_name = unique_name

    @property
    def additional_properties(self):
        """
        Gets the additional_properties of this GroupResource.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type

        :return: The additional_properties of this GroupResource.
        :rtype: dict(str, ModelProperty)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """
        Sets the additional_properties of this GroupResource.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type

        :param additional_properties: The additional_properties of this GroupResource.
        :type: dict(str, ModelProperty)
        """

        self._additional_properties = additional_properties

    @property
    def description(self):
        """
        Gets the description of this GroupResource.
        A description of the group. Max 250 characters

        :return: The description of this GroupResource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GroupResource.
        A description of the group. Max 250 characters

        :param description: The description of this GroupResource.
        :type: str
        """

        self._description = description

    @property
    def member_count(self):
        """
        Gets the member_count of this GroupResource.
        The number of users in the group

        :return: The member_count of this GroupResource.
        :rtype: int
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """
        Sets the member_count of this GroupResource.
        The number of users in the group

        :param member_count: The member_count of this GroupResource.
        :type: int
        """

        self._member_count = member_count

    @property
    def message_of_the_day(self):
        """
        Gets the message_of_the_day of this GroupResource.
        A message of the day for members of the group

        :return: The message_of_the_day of this GroupResource.
        :rtype: str
        """
        return self._message_of_the_day

    @message_of_the_day.setter
    def message_of_the_day(self, message_of_the_day):
        """
        Sets the message_of_the_day of this GroupResource.
        A message of the day for members of the group

        :param message_of_the_day: The message_of_the_day of this GroupResource.
        :type: str
        """

        self._message_of_the_day = message_of_the_day

    @property
    def name(self):
        """
        Gets the name of this GroupResource.
        The name of the group. Max 50 characters

        :return: The name of this GroupResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GroupResource.
        The name of the group. Max 50 characters

        :param name: The name of this GroupResource.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent(self):
        """
        Gets the parent of this GroupResource.
        The unique name of another group that this group is a subset of

        :return: The parent of this GroupResource.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this GroupResource.
        The unique name of another group that this group is a subset of

        :param parent: The parent of this GroupResource.
        :type: str
        """

        self._parent = parent

    @property
    def status(self):
        """
        Gets the status of this GroupResource.
        The status which describes whether other users can freely join the group or not

        :return: The status of this GroupResource.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this GroupResource.
        The status which describes whether other users can freely join the group or not

        :param status: The status of this GroupResource.
        :type: str
        """
        allowed_values = ["open", "closed"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sub_member_count(self):
        """
        Gets the sub_member_count of this GroupResource.
        The number of users in child groups

        :return: The sub_member_count of this GroupResource.
        :rtype: int
        """
        return self._sub_member_count

    @sub_member_count.setter
    def sub_member_count(self, sub_member_count):
        """
        Sets the sub_member_count of this GroupResource.
        The number of users in child groups

        :param sub_member_count: The sub_member_count of this GroupResource.
        :type: int
        """

        self._sub_member_count = sub_member_count

    @property
    def template(self):
        """
        Gets the template of this GroupResource.
        A group template this group is validated against. May be null and no validation of additional_properties will be done

        :return: The template of this GroupResource.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this GroupResource.
        A group template this group is validated against. May be null and no validation of additional_properties will be done

        :param template: The template of this GroupResource.
        :type: str
        """

        self._template = template

    @property
    def unique_name(self):
        """
        Gets the unique_name of this GroupResource.
        Unique name used in url and references. Uppercase, lowercase, numbers and hyphens only. Max 50 characters. Cannot be altered once created

        :return: The unique_name of this GroupResource.
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """
        Sets the unique_name of this GroupResource.
        Unique name used in url and references. Uppercase, lowercase, numbers and hyphens only. Max 50 characters. Cannot be altered once created

        :param unique_name: The unique_name of this GroupResource.
        :type: str
        """
        if unique_name is None:
            raise ValueError("Invalid value for `unique_name`, must not be `None`")

        self._unique_name = unique_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GroupResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
