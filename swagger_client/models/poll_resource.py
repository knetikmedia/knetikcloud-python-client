# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PollResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, active=None, additional_properties=None, answers=None, category=None, created_date=None, id=None, tags=None, template=None, text=None, type=None, updated_date=None):
        """
        PollResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'active': 'bool',
            'additional_properties': 'dict(str, ModelProperty)',
            'answers': 'list[PollAnswerResource]',
            'category': 'NestedCategory',
            'created_date': 'int',
            'id': 'str',
            'tags': 'list[str]',
            'template': 'str',
            'text': 'str',
            'type': 'str',
            'updated_date': 'int'
        }

        self.attribute_map = {
            'active': 'active',
            'additional_properties': 'additional_properties',
            'answers': 'answers',
            'category': 'category',
            'created_date': 'created_date',
            'id': 'id',
            'tags': 'tags',
            'template': 'template',
            'text': 'text',
            'type': 'type',
            'updated_date': 'updated_date'
        }

        self._active = active
        self._additional_properties = additional_properties
        self._answers = answers
        self._category = category
        self._created_date = created_date
        self._id = id
        self._tags = tags
        self._template = template
        self._text = text
        self._type = type
        self._updated_date = updated_date

    @property
    def active(self):
        """
        Gets the active of this PollResource.
        Whether the poll is active

        :return: The active of this PollResource.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this PollResource.
        Whether the poll is active

        :param active: The active of this PollResource.
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def additional_properties(self):
        """
        Gets the additional_properties of this PollResource.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type

        :return: The additional_properties of this PollResource.
        :rtype: dict(str, ModelProperty)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """
        Sets the additional_properties of this PollResource.
        A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type

        :param additional_properties: The additional_properties of this PollResource.
        :type: dict(str, ModelProperty)
        """

        self._additional_properties = additional_properties

    @property
    def answers(self):
        """
        Gets the answers of this PollResource.
        The answers to the poll

        :return: The answers of this PollResource.
        :rtype: list[PollAnswerResource]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """
        Sets the answers of this PollResource.
        The answers to the poll

        :param answers: The answers of this PollResource.
        :type: list[PollAnswerResource]
        """
        if answers is None:
            raise ValueError("Invalid value for `answers`, must not be `None`")

        self._answers = answers

    @property
    def category(self):
        """
        Gets the category of this PollResource.
        The category for the poll

        :return: The category of this PollResource.
        :rtype: NestedCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this PollResource.
        The category for the poll

        :param category: The category of this PollResource.
        :type: NestedCategory
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def created_date(self):
        """
        Gets the created_date of this PollResource.
        The date/time this resource was created in seconds since unix epoch

        :return: The created_date of this PollResource.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this PollResource.
        The date/time this resource was created in seconds since unix epoch

        :param created_date: The created_date of this PollResource.
        :type: int
        """

        self._created_date = created_date

    @property
    def id(self):
        """
        Gets the id of this PollResource.
        The id of the poll

        :return: The id of this PollResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PollResource.
        The id of the poll

        :param id: The id of this PollResource.
        :type: str
        """

        self._id = id

    @property
    def tags(self):
        """
        Gets the tags of this PollResource.
        The tags for the poll

        :return: The tags of this PollResource.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this PollResource.
        The tags for the poll

        :param tags: The tags of this PollResource.
        :type: list[str]
        """

        self._tags = tags

    @property
    def template(self):
        """
        Gets the template of this PollResource.
        A poll template this poll is validated against (private). May be null and no validation of additional_properties will be done

        :return: The template of this PollResource.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this PollResource.
        A poll template this poll is validated against (private). May be null and no validation of additional_properties will be done

        :param template: The template of this PollResource.
        :type: str
        """

        self._template = template

    @property
    def text(self):
        """
        Gets the text of this PollResource.
        The text of the poll

        :return: The text of this PollResource.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this PollResource.
        The text of the poll

        :param text: The text of this PollResource.
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def type(self):
        """
        Gets the type of this PollResource.
        The media type of the poll

        :return: The type of this PollResource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PollResource.
        The media type of the poll

        :param type: The type of this PollResource.
        :type: str
        """
        allowed_values = ["TEXT", "IMAGE", "VIDEO", "AUDIO"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_date(self):
        """
        Gets the updated_date of this PollResource.
        The date/time this resource was last updated in seconds since unix epoch

        :return: The updated_date of this PollResource.
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """
        Sets the updated_date of this PollResource.
        The date/time this resource was last updated in seconds since unix epoch

        :param updated_date: The updated_date of this PollResource.
        :type: int
        """

        self._updated_date = updated_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PollResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
