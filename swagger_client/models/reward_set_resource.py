# coding: utf-8

"""
    Knetik Platform API Documentation Latest

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com

    OpenAPI spec version: Latest
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RewardSetResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_date=None, currency_rewards=None, id=None, item_rewards=None, long_description=None, max_placing=None, name=None, short_description=None, unique_key=None, updated_date=None):
        """
        RewardSetResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_date': 'int',
            'currency_rewards': 'list[RewardCurrencyResource]',
            'id': 'int',
            'item_rewards': 'list[RewardItemResource]',
            'long_description': 'str',
            'max_placing': 'int',
            'name': 'str',
            'short_description': 'str',
            'unique_key': 'str',
            'updated_date': 'int'
        }

        self.attribute_map = {
            'created_date': 'created_date',
            'currency_rewards': 'currency_rewards',
            'id': 'id',
            'item_rewards': 'item_rewards',
            'long_description': 'long_description',
            'max_placing': 'max_placing',
            'name': 'name',
            'short_description': 'short_description',
            'unique_key': 'unique_key',
            'updated_date': 'updated_date'
        }

        self._created_date = created_date
        self._currency_rewards = currency_rewards
        self._id = id
        self._item_rewards = item_rewards
        self._long_description = long_description
        self._max_placing = max_placing
        self._name = name
        self._short_description = short_description
        self._unique_key = unique_key
        self._updated_date = updated_date

    @property
    def created_date(self):
        """
        Gets the created_date of this RewardSetResource.
        The date/time this resource was created in seconds since unix epoch

        :return: The created_date of this RewardSetResource.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this RewardSetResource.
        The date/time this resource was created in seconds since unix epoch

        :param created_date: The created_date of this RewardSetResource.
        :type: int
        """

        self._created_date = created_date

    @property
    def currency_rewards(self):
        """
        Gets the currency_rewards of this RewardSetResource.
        The currency to give as rewards

        :return: The currency_rewards of this RewardSetResource.
        :rtype: list[RewardCurrencyResource]
        """
        return self._currency_rewards

    @currency_rewards.setter
    def currency_rewards(self, currency_rewards):
        """
        Sets the currency_rewards of this RewardSetResource.
        The currency to give as rewards

        :param currency_rewards: The currency_rewards of this RewardSetResource.
        :type: list[RewardCurrencyResource]
        """

        self._currency_rewards = currency_rewards

    @property
    def id(self):
        """
        Gets the id of this RewardSetResource.
        The assigned unique ID for this reward set

        :return: The id of this RewardSetResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RewardSetResource.
        The assigned unique ID for this reward set

        :param id: The id of this RewardSetResource.
        :type: int
        """

        self._id = id

    @property
    def item_rewards(self):
        """
        Gets the item_rewards of this RewardSetResource.
        The items to give as rewards

        :return: The item_rewards of this RewardSetResource.
        :rtype: list[RewardItemResource]
        """
        return self._item_rewards

    @item_rewards.setter
    def item_rewards(self, item_rewards):
        """
        Sets the item_rewards of this RewardSetResource.
        The items to give as rewards

        :param item_rewards: The item_rewards of this RewardSetResource.
        :type: list[RewardItemResource]
        """

        self._item_rewards = item_rewards

    @property
    def long_description(self):
        """
        Gets the long_description of this RewardSetResource.
        A longer describe the reward set, usually included in details

        :return: The long_description of this RewardSetResource.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """
        Sets the long_description of this RewardSetResource.
        A longer describe the reward set, usually included in details

        :param long_description: The long_description of this RewardSetResource.
        :type: str
        """

        self._long_description = long_description

    @property
    def max_placing(self):
        """
        Gets the max_placing of this RewardSetResource.
        The maximum placing that will receive a reward

        :return: The max_placing of this RewardSetResource.
        :rtype: int
        """
        return self._max_placing

    @max_placing.setter
    def max_placing(self, max_placing):
        """
        Sets the max_placing of this RewardSetResource.
        The maximum placing that will receive a reward

        :param max_placing: The max_placing of this RewardSetResource.
        :type: int
        """

        self._max_placing = max_placing

    @property
    def name(self):
        """
        Gets the name of this RewardSetResource.
        The user friendly name for this reward set

        :return: The name of this RewardSetResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RewardSetResource.
        The user friendly name for this reward set

        :param name: The name of this RewardSetResource.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def short_description(self):
        """
        Gets the short_description of this RewardSetResource.
        A short paragraph to describe the reward set, usually included in listings.  Max 255 characters

        :return: The short_description of this RewardSetResource.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """
        Sets the short_description of this RewardSetResource.
        A short paragraph to describe the reward set, usually included in listings.  Max 255 characters

        :param short_description: The short_description of this RewardSetResource.
        :type: str
        """

        self._short_description = short_description

    @property
    def unique_key(self):
        """
        Gets the unique_key of this RewardSetResource.
        A provided unique key for this reward set

        :return: The unique_key of this RewardSetResource.
        :rtype: str
        """
        return self._unique_key

    @unique_key.setter
    def unique_key(self, unique_key):
        """
        Sets the unique_key of this RewardSetResource.
        A provided unique key for this reward set

        :param unique_key: The unique_key of this RewardSetResource.
        :type: str
        """

        self._unique_key = unique_key

    @property
    def updated_date(self):
        """
        Gets the updated_date of this RewardSetResource.
        The date/time this resource was last updated in seconds since unix epoch

        :return: The updated_date of this RewardSetResource.
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """
        Sets the updated_date of this RewardSetResource.
        The date/time this resource was last updated in seconds since unix epoch

        :param updated_date: The updated_date of this RewardSetResource.
        :type: int
        """

        self._updated_date = updated_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
