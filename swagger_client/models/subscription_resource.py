# coding: utf-8

"""
    Knetik Platform API Documentation Latest

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: Latest
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SubscriptionResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, additional_properties=None, availability=None, category=None, consolidation_day_of_month=None, created_date=None, geo_country_list=None, geo_policy_type=None, id=None, long_description=None, name=None, plans=None, short_description=None, sort=None, store_end=None, store_start=None, tags=None, template=None, unique_key=None, updated_date=None, vendor_id=None):
        """
        SubscriptionResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'additional_properties': 'dict(str, ModelProperty)',
            'availability': 'str',
            'category': 'str',
            'consolidation_day_of_month': 'int',
            'created_date': 'int',
            'geo_country_list': 'list[str]',
            'geo_policy_type': 'str',
            'id': 'int',
            'long_description': 'str',
            'name': 'str',
            'plans': 'list[SubscriptionPlanResource]',
            'short_description': 'str',
            'sort': 'int',
            'store_end': 'int',
            'store_start': 'int',
            'tags': 'list[str]',
            'template': 'str',
            'unique_key': 'str',
            'updated_date': 'int',
            'vendor_id': 'int'
        }

        self.attribute_map = {
            'additional_properties': 'additional_properties',
            'availability': 'availability',
            'category': 'category',
            'consolidation_day_of_month': 'consolidation_day_of_month',
            'created_date': 'created_date',
            'geo_country_list': 'geo_country_list',
            'geo_policy_type': 'geo_policy_type',
            'id': 'id',
            'long_description': 'long_description',
            'name': 'name',
            'plans': 'plans',
            'short_description': 'short_description',
            'sort': 'sort',
            'store_end': 'store_end',
            'store_start': 'store_start',
            'tags': 'tags',
            'template': 'template',
            'unique_key': 'unique_key',
            'updated_date': 'updated_date',
            'vendor_id': 'vendor_id'
        }

        self._additional_properties = additional_properties
        self._availability = availability
        self._category = category
        self._consolidation_day_of_month = consolidation_day_of_month
        self._created_date = created_date
        self._geo_country_list = geo_country_list
        self._geo_policy_type = geo_policy_type
        self._id = id
        self._long_description = long_description
        self._name = name
        self._plans = plans
        self._short_description = short_description
        self._sort = sort
        self._store_end = store_end
        self._store_start = store_start
        self._tags = tags
        self._template = template
        self._unique_key = unique_key
        self._updated_date = updated_date
        self._vendor_id = vendor_id

    @property
    def additional_properties(self):
        """
        Gets the additional_properties of this SubscriptionResource.
        A map of item additional properties, keyed on the property name. Must match the names and types defined in the template for this item type.

        :return: The additional_properties of this SubscriptionResource.
        :rtype: dict(str, ModelProperty)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """
        Sets the additional_properties of this SubscriptionResource.
        A map of item additional properties, keyed on the property name. Must match the names and types defined in the template for this item type.

        :param additional_properties: The additional_properties of this SubscriptionResource.
        :type: dict(str, ModelProperty)
        """

        self._additional_properties = additional_properties

    @property
    def availability(self):
        """
        Gets the availability of this SubscriptionResource.
        Who can purchase this subscription

        :return: The availability of this SubscriptionResource.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """
        Sets the availability of this SubscriptionResource.
        Who can purchase this subscription

        :param availability: The availability of this SubscriptionResource.
        :type: str
        """
        allowed_values = ["all", "new_subscribers"]
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"
                .format(availability, allowed_values)
            )

        self._availability = availability

    @property
    def category(self):
        """
        Gets the category of this SubscriptionResource.
        A category for filtering items

        :return: The category of this SubscriptionResource.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this SubscriptionResource.
        A category for filtering items

        :param category: The category of this SubscriptionResource.
        :type: str
        """

        self._category = category

    @property
    def consolidation_day_of_month(self):
        """
        Gets the consolidation_day_of_month of this SubscriptionResource.
        The day of the month 1..31 this subscription will renew

        :return: The consolidation_day_of_month of this SubscriptionResource.
        :rtype: int
        """
        return self._consolidation_day_of_month

    @consolidation_day_of_month.setter
    def consolidation_day_of_month(self, consolidation_day_of_month):
        """
        Sets the consolidation_day_of_month of this SubscriptionResource.
        The day of the month 1..31 this subscription will renew

        :param consolidation_day_of_month: The consolidation_day_of_month of this SubscriptionResource.
        :type: int
        """

        self._consolidation_day_of_month = consolidation_day_of_month

    @property
    def created_date(self):
        """
        Gets the created_date of this SubscriptionResource.
        The date the item was created, unix timestamp in seconds

        :return: The created_date of this SubscriptionResource.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this SubscriptionResource.
        The date the item was created, unix timestamp in seconds

        :param created_date: The created_date of this SubscriptionResource.
        :type: int
        """

        self._created_date = created_date

    @property
    def geo_country_list(self):
        """
        Gets the geo_country_list of this SubscriptionResource.
        A list of country iso3 codes to include in the blacklist/whitelist geo policy

        :return: The geo_country_list of this SubscriptionResource.
        :rtype: list[str]
        """
        return self._geo_country_list

    @geo_country_list.setter
    def geo_country_list(self, geo_country_list):
        """
        Sets the geo_country_list of this SubscriptionResource.
        A list of country iso3 codes to include in the blacklist/whitelist geo policy

        :param geo_country_list: The geo_country_list of this SubscriptionResource.
        :type: list[str]
        """

        self._geo_country_list = geo_country_list

    @property
    def geo_policy_type(self):
        """
        Gets the geo_policy_type of this SubscriptionResource.
        Whether to use the geo_country_list as a black list or white list for item geographical availability

        :return: The geo_policy_type of this SubscriptionResource.
        :rtype: str
        """
        return self._geo_policy_type

    @geo_policy_type.setter
    def geo_policy_type(self, geo_policy_type):
        """
        Sets the geo_policy_type of this SubscriptionResource.
        Whether to use the geo_country_list as a black list or white list for item geographical availability

        :param geo_policy_type: The geo_policy_type of this SubscriptionResource.
        :type: str
        """
        allowed_values = ["whitelist", "blacklist"]
        if geo_policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `geo_policy_type` ({0}), must be one of {1}"
                .format(geo_policy_type, allowed_values)
            )

        self._geo_policy_type = geo_policy_type

    @property
    def id(self):
        """
        Gets the id of this SubscriptionResource.
        The id of the item

        :return: The id of this SubscriptionResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SubscriptionResource.
        The id of the item

        :param id: The id of this SubscriptionResource.
        :type: int
        """

        self._id = id

    @property
    def long_description(self):
        """
        Gets the long_description of this SubscriptionResource.
        A long description of the subscription

        :return: The long_description of this SubscriptionResource.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """
        Sets the long_description of this SubscriptionResource.
        A long description of the subscription

        :param long_description: The long_description of this SubscriptionResource.
        :type: str
        """

        self._long_description = long_description

    @property
    def name(self):
        """
        Gets the name of this SubscriptionResource.
        The name of the item

        :return: The name of this SubscriptionResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SubscriptionResource.
        The name of the item

        :param name: The name of this SubscriptionResource.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def plans(self):
        """
        Gets the plans of this SubscriptionResource.
        The billing options for this subscription

        :return: The plans of this SubscriptionResource.
        :rtype: list[SubscriptionPlanResource]
        """
        return self._plans

    @plans.setter
    def plans(self, plans):
        """
        Sets the plans of this SubscriptionResource.
        The billing options for this subscription

        :param plans: The plans of this SubscriptionResource.
        :type: list[SubscriptionPlanResource]
        """

        self._plans = plans

    @property
    def short_description(self):
        """
        Gets the short_description of this SubscriptionResource.
        A short description of the subscription.  Max 255 characters

        :return: The short_description of this SubscriptionResource.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """
        Sets the short_description of this SubscriptionResource.
        A short description of the subscription.  Max 255 characters

        :param short_description: The short_description of this SubscriptionResource.
        :type: str
        """

        self._short_description = short_description

    @property
    def sort(self):
        """
        Gets the sort of this SubscriptionResource.
        A number to use in sorting items.  Default 500

        :return: The sort of this SubscriptionResource.
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """
        Sets the sort of this SubscriptionResource.
        A number to use in sorting items.  Default 500

        :param sort: The sort of this SubscriptionResource.
        :type: int
        """

        self._sort = sort

    @property
    def store_end(self):
        """
        Gets the store_end of this SubscriptionResource.
        Used to schedule removal from store.  Null means the subscription will never be removed

        :return: The store_end of this SubscriptionResource.
        :rtype: int
        """
        return self._store_end

    @store_end.setter
    def store_end(self, store_end):
        """
        Sets the store_end of this SubscriptionResource.
        Used to schedule removal from store.  Null means the subscription will never be removed

        :param store_end: The store_end of this SubscriptionResource.
        :type: int
        """

        self._store_end = store_end

    @property
    def store_start(self):
        """
        Gets the store_start of this SubscriptionResource.
        Used to schedule appearance in store.  Null means the subscription will appear now

        :return: The store_start of this SubscriptionResource.
        :rtype: int
        """
        return self._store_start

    @store_start.setter
    def store_start(self, store_start):
        """
        Sets the store_start of this SubscriptionResource.
        Used to schedule appearance in store.  Null means the subscription will appear now

        :param store_start: The store_start of this SubscriptionResource.
        :type: int
        """

        self._store_start = store_start

    @property
    def tags(self):
        """
        Gets the tags of this SubscriptionResource.
        List of tags used for filtering items

        :return: The tags of this SubscriptionResource.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this SubscriptionResource.
        List of tags used for filtering items

        :param tags: The tags of this SubscriptionResource.
        :type: list[str]
        """

        self._tags = tags

    @property
    def template(self):
        """
        Gets the template of this SubscriptionResource.
        An item template this item is validated against. May be null and no validation of additional properties will be done.

        :return: The template of this SubscriptionResource.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this SubscriptionResource.
        An item template this item is validated against. May be null and no validation of additional properties will be done.

        :param template: The template of this SubscriptionResource.
        :type: str
        """

        self._template = template

    @property
    def unique_key(self):
        """
        Gets the unique_key of this SubscriptionResource.
        The unique key for the item

        :return: The unique_key of this SubscriptionResource.
        :rtype: str
        """
        return self._unique_key

    @unique_key.setter
    def unique_key(self, unique_key):
        """
        Sets the unique_key of this SubscriptionResource.
        The unique key for the item

        :param unique_key: The unique_key of this SubscriptionResource.
        :type: str
        """

        self._unique_key = unique_key

    @property
    def updated_date(self):
        """
        Gets the updated_date of this SubscriptionResource.
        The date the item was last updated

        :return: The updated_date of this SubscriptionResource.
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """
        Sets the updated_date of this SubscriptionResource.
        The date the item was last updated

        :param updated_date: The updated_date of this SubscriptionResource.
        :type: int
        """

        self._updated_date = updated_date

    @property
    def vendor_id(self):
        """
        Gets the vendor_id of this SubscriptionResource.
        The vendor who provides the item

        :return: The vendor_id of this SubscriptionResource.
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """
        Sets the vendor_id of this SubscriptionResource.
        The vendor who provides the item

        :param vendor_id: The vendor_id of this SubscriptionResource.
        :type: int
        """
        if vendor_id is None:
            raise ValueError("Invalid value for `vendor_id`, must not be `None`")

        self._vendor_id = vendor_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
