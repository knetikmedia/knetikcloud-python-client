# coding: utf-8

"""
    Knetik Platform API Documentation Latest

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: Latest
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TemplateSMSResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, _from=None, localizer=None, recipients=None, template_key=None, template_vars=None):
        """
        TemplateSMSResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            '_from': 'str',
            'localizer': 'Localizer',
            'recipients': 'list[int]',
            'template_key': 'str',
            'template_vars': 'list[str]'
        }

        self.attribute_map = {
            '_from': 'from',
            'localizer': 'localizer',
            'recipients': 'recipients',
            'template_key': 'template_key',
            'template_vars': 'template_vars'
        }

        self.__from = _from
        self._localizer = localizer
        self._recipients = recipients
        self._template_key = template_key
        self._template_vars = template_vars

    @property
    def _from(self):
        """
        Gets the _from of this TemplateSMSResource.
        The phone number to attribute the outgoing message to. Optional if the config text.out_number is set.

        :return: The _from of this TemplateSMSResource.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this TemplateSMSResource.
        The phone number to attribute the outgoing message to. Optional if the config text.out_number is set.

        :param _from: The _from of this TemplateSMSResource.
        :type: str
        """

        self.__from = _from

    @property
    def localizer(self):
        """
        Gets the localizer of this TemplateSMSResource.

        :return: The localizer of this TemplateSMSResource.
        :rtype: Localizer
        """
        return self._localizer

    @localizer.setter
    def localizer(self, localizer):
        """
        Sets the localizer of this TemplateSMSResource.

        :param localizer: The localizer of this TemplateSMSResource.
        :type: Localizer
        """

        self._localizer = localizer

    @property
    def recipients(self):
        """
        Gets the recipients of this TemplateSMSResource.
        A list of user ids to send the message to.

        :return: The recipients of this TemplateSMSResource.
        :rtype: list[int]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """
        Sets the recipients of this TemplateSMSResource.
        A list of user ids to send the message to.

        :param recipients: The recipients of this TemplateSMSResource.
        :type: list[int]
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")

        self._recipients = recipients

    @property
    def template_key(self):
        """
        Gets the template_key of this TemplateSMSResource.
        The key for the template.

        :return: The template_key of this TemplateSMSResource.
        :rtype: str
        """
        return self._template_key

    @template_key.setter
    def template_key(self, template_key):
        """
        Sets the template_key of this TemplateSMSResource.
        The key for the template.

        :param template_key: The template_key of this TemplateSMSResource.
        :type: str
        """
        if template_key is None:
            raise ValueError("Invalid value for `template_key`, must not be `None`")

        self._template_key = template_key

    @property
    def template_vars(self):
        """
        Gets the template_vars of this TemplateSMSResource.
        A list of values to fill in the template. Order matters.

        :return: The template_vars of this TemplateSMSResource.
        :rtype: list[str]
        """
        return self._template_vars

    @template_vars.setter
    def template_vars(self, template_vars):
        """
        Sets the template_vars of this TemplateSMSResource.
        A list of values to fill in the template. Order matters.

        :param template_vars: The template_vars of this TemplateSMSResource.
        :type: list[str]
        """

        self._template_vars = template_vars

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
