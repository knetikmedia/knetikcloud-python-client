# coding: utf-8

"""
    Knetik Platform API Documentation Latest

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: Latest
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserItemLogResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, info=None, item=None, log_date=None, type=None, user=None, user_inventory=None):
        """
        UserItemLogResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'info': 'str',
            'item': 'SimpleReferenceResourceint',
            'log_date': 'int',
            'type': 'str',
            'user': 'SimpleUserResource',
            'user_inventory': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'info': 'info',
            'item': 'item',
            'log_date': 'log_date',
            'type': 'type',
            'user': 'user',
            'user_inventory': 'user_inventory'
        }

        self._id = id
        self._info = info
        self._item = item
        self._log_date = log_date
        self._type = type
        self._user = user
        self._user_inventory = user_inventory

    @property
    def id(self):
        """
        Gets the id of this UserItemLogResource.
        The log entry id

        :return: The id of this UserItemLogResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UserItemLogResource.
        The log entry id

        :param id: The id of this UserItemLogResource.
        :type: int
        """

        self._id = id

    @property
    def info(self):
        """
        Gets the info of this UserItemLogResource.
        Additional information defined by the type

        :return: The info of this UserItemLogResource.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this UserItemLogResource.
        Additional information defined by the type

        :param info: The info of this UserItemLogResource.
        :type: str
        """

        self._info = info

    @property
    def item(self):
        """
        Gets the item of this UserItemLogResource.
        The item interacted with

        :return: The item of this UserItemLogResource.
        :rtype: SimpleReferenceResourceint
        """
        return self._item

    @item.setter
    def item(self, item):
        """
        Sets the item of this UserItemLogResource.
        The item interacted with

        :param item: The item of this UserItemLogResource.
        :type: SimpleReferenceResourceint
        """

        self._item = item

    @property
    def log_date(self):
        """
        Gets the log_date of this UserItemLogResource.
        The date/time this event occurred in seconds since epoch

        :return: The log_date of this UserItemLogResource.
        :rtype: int
        """
        return self._log_date

    @log_date.setter
    def log_date(self, log_date):
        """
        Sets the log_date of this UserItemLogResource.
        The date/time this event occurred in seconds since epoch

        :param log_date: The log_date of this UserItemLogResource.
        :type: int
        """

        self._log_date = log_date

    @property
    def type(self):
        """
        Gets the type of this UserItemLogResource.
        The type of event

        :return: The type of this UserItemLogResource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this UserItemLogResource.
        The type of event

        :param type: The type of this UserItemLogResource.
        :type: str
        """

        self._type = type

    @property
    def user(self):
        """
        Gets the user of this UserItemLogResource.
        The user making the interaction

        :return: The user of this UserItemLogResource.
        :rtype: SimpleUserResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this UserItemLogResource.
        The user making the interaction

        :param user: The user of this UserItemLogResource.
        :type: SimpleUserResource
        """

        self._user = user

    @property
    def user_inventory(self):
        """
        Gets the user_inventory of this UserItemLogResource.
        The id of the inventory entry this event is related to, if any

        :return: The user_inventory of this UserItemLogResource.
        :rtype: int
        """
        return self._user_inventory

    @user_inventory.setter
    def user_inventory(self, user_inventory):
        """
        Sets the user_inventory of this UserItemLogResource.
        The id of the inventory entry this event is related to, if any

        :param user_inventory: The user_inventory of this UserItemLogResource.
        :type: int
        """

        self._user_inventory = user_inventory

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
