# coding: utf-8

"""
    Knetik Platform API Documentation Latest

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: Latest
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserLevelingResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, last_tier_name=None, last_tier_progress=None, level_name=None, next_tier_name=None, next_tier_progress=None, progress=None, tier_names=None, user_id=None):
        """
        UserLevelingResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'last_tier_name': 'str',
            'last_tier_progress': 'int',
            'level_name': 'str',
            'next_tier_name': 'str',
            'next_tier_progress': 'int',
            'progress': 'int',
            'tier_names': 'list[str]',
            'user_id': 'int'
        }

        self.attribute_map = {
            'last_tier_name': 'last_tier_name',
            'last_tier_progress': 'last_tier_progress',
            'level_name': 'level_name',
            'next_tier_name': 'next_tier_name',
            'next_tier_progress': 'next_tier_progress',
            'progress': 'progress',
            'tier_names': 'tier_names',
            'user_id': 'user_id'
        }

        self._last_tier_name = last_tier_name
        self._last_tier_progress = last_tier_progress
        self._level_name = level_name
        self._next_tier_name = next_tier_name
        self._next_tier_progress = next_tier_progress
        self._progress = progress
        self._tier_names = tier_names
        self._user_id = user_id

    @property
    def last_tier_name(self):
        """
        Gets the last_tier_name of this UserLevelingResource.
        The name of the last tier the user has qualified for

        :return: The last_tier_name of this UserLevelingResource.
        :rtype: str
        """
        return self._last_tier_name

    @last_tier_name.setter
    def last_tier_name(self, last_tier_name):
        """
        Sets the last_tier_name of this UserLevelingResource.
        The name of the last tier the user has qualified for

        :param last_tier_name: The last_tier_name of this UserLevelingResource.
        :type: str
        """
        if last_tier_name is None:
            raise ValueError("Invalid value for `last_tier_name`, must not be `None`")

        self._last_tier_name = last_tier_name

    @property
    def last_tier_progress(self):
        """
        Gets the last_tier_progress of this UserLevelingResource.
        The progress level of the last tier the user has qualified for

        :return: The last_tier_progress of this UserLevelingResource.
        :rtype: int
        """
        return self._last_tier_progress

    @last_tier_progress.setter
    def last_tier_progress(self, last_tier_progress):
        """
        Sets the last_tier_progress of this UserLevelingResource.
        The progress level of the last tier the user has qualified for

        :param last_tier_progress: The last_tier_progress of this UserLevelingResource.
        :type: int
        """
        if last_tier_progress is None:
            raise ValueError("Invalid value for `last_tier_progress`, must not be `None`")

        self._last_tier_progress = last_tier_progress

    @property
    def level_name(self):
        """
        Gets the level_name of this UserLevelingResource.
        The name of the level schema

        :return: The level_name of this UserLevelingResource.
        :rtype: str
        """
        return self._level_name

    @level_name.setter
    def level_name(self, level_name):
        """
        Sets the level_name of this UserLevelingResource.
        The name of the level schema

        :param level_name: The level_name of this UserLevelingResource.
        :type: str
        """
        if level_name is None:
            raise ValueError("Invalid value for `level_name`, must not be `None`")

        self._level_name = level_name

    @property
    def next_tier_name(self):
        """
        Gets the next_tier_name of this UserLevelingResource.
        The name of the next tier the user can qualify for

        :return: The next_tier_name of this UserLevelingResource.
        :rtype: str
        """
        return self._next_tier_name

    @next_tier_name.setter
    def next_tier_name(self, next_tier_name):
        """
        Sets the next_tier_name of this UserLevelingResource.
        The name of the next tier the user can qualify for

        :param next_tier_name: The next_tier_name of this UserLevelingResource.
        :type: str
        """
        if next_tier_name is None:
            raise ValueError("Invalid value for `next_tier_name`, must not be `None`")

        self._next_tier_name = next_tier_name

    @property
    def next_tier_progress(self):
        """
        Gets the next_tier_progress of this UserLevelingResource.
        The progress needed to qualify for the next tier

        :return: The next_tier_progress of this UserLevelingResource.
        :rtype: int
        """
        return self._next_tier_progress

    @next_tier_progress.setter
    def next_tier_progress(self, next_tier_progress):
        """
        Sets the next_tier_progress of this UserLevelingResource.
        The progress needed to qualify for the next tier

        :param next_tier_progress: The next_tier_progress of this UserLevelingResource.
        :type: int
        """
        if next_tier_progress is None:
            raise ValueError("Invalid value for `next_tier_progress`, must not be `None`")

        self._next_tier_progress = next_tier_progress

    @property
    def progress(self):
        """
        Gets the progress of this UserLevelingResource.
        The amount of progress the user has

        :return: The progress of this UserLevelingResource.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """
        Sets the progress of this UserLevelingResource.
        The amount of progress the user has

        :param progress: The progress of this UserLevelingResource.
        :type: int
        """
        if progress is None:
            raise ValueError("Invalid value for `progress`, must not be `None`")

        self._progress = progress

    @property
    def tier_names(self):
        """
        Gets the tier_names of this UserLevelingResource.
        The names of the tiers the user has qualified for

        :return: The tier_names of this UserLevelingResource.
        :rtype: list[str]
        """
        return self._tier_names

    @tier_names.setter
    def tier_names(self, tier_names):
        """
        Sets the tier_names of this UserLevelingResource.
        The names of the tiers the user has qualified for

        :param tier_names: The tier_names of this UserLevelingResource.
        :type: list[str]
        """
        if tier_names is None:
            raise ValueError("Invalid value for `tier_names`, must not be `None`")

        self._tier_names = tier_names

    @property
    def user_id(self):
        """
        Gets the user_id of this UserLevelingResource.
        The ID of the user

        :return: The user_id of this UserLevelingResource.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this UserLevelingResource.
        The ID of the user

        :param user_id: The user_id of this UserLevelingResource.
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
