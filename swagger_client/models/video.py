# coding: utf-8

"""
    Knetik Platform API Documentation latest 

    This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com

    OpenAPI spec version: latest 
    Contact: support@knetik.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Video(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, active=None, author=None, authored=None, banned=None, category_id=None, category_name=None, contributors=None, created=None, embed=None, extension=None, height=None, id=None, length=None, location=None, long_description=None, mime_type=None, name=None, priority=None, privacy=None, published=None, short_description=None, size=None, tags=None, thumbnail=None, updated=None, uploader=None, views=None, whitelist=None, width=None):
        """
        Video - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'active': 'bool',
            'author': 'Artist',
            'authored': 'int',
            'banned': 'bool',
            'category_id': 'str',
            'category_name': 'str',
            'contributors': 'CollectionVideoContribution',
            'created': 'int',
            'embed': 'str',
            'extension': 'str',
            'height': 'int',
            'id': 'int',
            'length': 'int',
            'location': 'str',
            'long_description': 'str',
            'mime_type': 'str',
            'name': 'str',
            'priority': 'int',
            'privacy': 'str',
            'published': 'bool',
            'short_description': 'str',
            'size': 'int',
            'tags': 'list[VideoTag]',
            'thumbnail': 'str',
            'updated': 'int',
            'uploader': 'User',
            'views': 'int',
            'whitelist': 'list[User]',
            'width': 'int'
        }

        self.attribute_map = {
            'active': 'active',
            'author': 'author',
            'authored': 'authored',
            'banned': 'banned',
            'category_id': 'category_id',
            'category_name': 'category_name',
            'contributors': 'contributors',
            'created': 'created',
            'embed': 'embed',
            'extension': 'extension',
            'height': 'height',
            'id': 'id',
            'length': 'length',
            'location': 'location',
            'long_description': 'long_description',
            'mime_type': 'mime_type',
            'name': 'name',
            'priority': 'priority',
            'privacy': 'privacy',
            'published': 'published',
            'short_description': 'short_description',
            'size': 'size',
            'tags': 'tags',
            'thumbnail': 'thumbnail',
            'updated': 'updated',
            'uploader': 'uploader',
            'views': 'views',
            'whitelist': 'whitelist',
            'width': 'width'
        }

        self._active = active
        self._author = author
        self._authored = authored
        self._banned = banned
        self._category_id = category_id
        self._category_name = category_name
        self._contributors = contributors
        self._created = created
        self._embed = embed
        self._extension = extension
        self._height = height
        self._id = id
        self._length = length
        self._location = location
        self._long_description = long_description
        self._mime_type = mime_type
        self._name = name
        self._priority = priority
        self._privacy = privacy
        self._published = published
        self._short_description = short_description
        self._size = size
        self._tags = tags
        self._thumbnail = thumbnail
        self._updated = updated
        self._uploader = uploader
        self._views = views
        self._whitelist = whitelist
        self._width = width

    @property
    def active(self):
        """
        Gets the active of this Video.

        :return: The active of this Video.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this Video.

        :param active: The active of this Video.
        :type: bool
        """

        self._active = active

    @property
    def author(self):
        """
        Gets the author of this Video.

        :return: The author of this Video.
        :rtype: Artist
        """
        return self._author

    @author.setter
    def author(self, author):
        """
        Sets the author of this Video.

        :param author: The author of this Video.
        :type: Artist
        """

        self._author = author

    @property
    def authored(self):
        """
        Gets the authored of this Video.

        :return: The authored of this Video.
        :rtype: int
        """
        return self._authored

    @authored.setter
    def authored(self, authored):
        """
        Sets the authored of this Video.

        :param authored: The authored of this Video.
        :type: int
        """

        self._authored = authored

    @property
    def banned(self):
        """
        Gets the banned of this Video.

        :return: The banned of this Video.
        :rtype: bool
        """
        return self._banned

    @banned.setter
    def banned(self, banned):
        """
        Sets the banned of this Video.

        :param banned: The banned of this Video.
        :type: bool
        """

        self._banned = banned

    @property
    def category_id(self):
        """
        Gets the category_id of this Video.

        :return: The category_id of this Video.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this Video.

        :param category_id: The category_id of this Video.
        :type: str
        """

        self._category_id = category_id

    @property
    def category_name(self):
        """
        Gets the category_name of this Video.

        :return: The category_name of this Video.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """
        Sets the category_name of this Video.

        :param category_name: The category_name of this Video.
        :type: str
        """

        self._category_name = category_name

    @property
    def contributors(self):
        """
        Gets the contributors of this Video.

        :return: The contributors of this Video.
        :rtype: CollectionVideoContribution
        """
        return self._contributors

    @contributors.setter
    def contributors(self, contributors):
        """
        Sets the contributors of this Video.

        :param contributors: The contributors of this Video.
        :type: CollectionVideoContribution
        """

        self._contributors = contributors

    @property
    def created(self):
        """
        Gets the created of this Video.

        :return: The created of this Video.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Video.

        :param created: The created of this Video.
        :type: int
        """

        self._created = created

    @property
    def embed(self):
        """
        Gets the embed of this Video.

        :return: The embed of this Video.
        :rtype: str
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """
        Sets the embed of this Video.

        :param embed: The embed of this Video.
        :type: str
        """

        self._embed = embed

    @property
    def extension(self):
        """
        Gets the extension of this Video.

        :return: The extension of this Video.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """
        Sets the extension of this Video.

        :param extension: The extension of this Video.
        :type: str
        """

        self._extension = extension

    @property
    def height(self):
        """
        Gets the height of this Video.

        :return: The height of this Video.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this Video.

        :param height: The height of this Video.
        :type: int
        """

        self._height = height

    @property
    def id(self):
        """
        Gets the id of this Video.

        :return: The id of this Video.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Video.

        :param id: The id of this Video.
        :type: int
        """

        self._id = id

    @property
    def length(self):
        """
        Gets the length of this Video.

        :return: The length of this Video.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this Video.

        :param length: The length of this Video.
        :type: int
        """

        self._length = length

    @property
    def location(self):
        """
        Gets the location of this Video.

        :return: The location of this Video.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this Video.

        :param location: The location of this Video.
        :type: str
        """

        self._location = location

    @property
    def long_description(self):
        """
        Gets the long_description of this Video.

        :return: The long_description of this Video.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """
        Sets the long_description of this Video.

        :param long_description: The long_description of this Video.
        :type: str
        """

        self._long_description = long_description

    @property
    def mime_type(self):
        """
        Gets the mime_type of this Video.

        :return: The mime_type of this Video.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """
        Sets the mime_type of this Video.

        :param mime_type: The mime_type of this Video.
        :type: str
        """

        self._mime_type = mime_type

    @property
    def name(self):
        """
        Gets the name of this Video.

        :return: The name of this Video.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Video.

        :param name: The name of this Video.
        :type: str
        """

        self._name = name

    @property
    def priority(self):
        """
        Gets the priority of this Video.

        :return: The priority of this Video.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this Video.

        :param priority: The priority of this Video.
        :type: int
        """

        self._priority = priority

    @property
    def privacy(self):
        """
        Gets the privacy of this Video.

        :return: The privacy of this Video.
        :rtype: str
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """
        Sets the privacy of this Video.

        :param privacy: The privacy of this Video.
        :type: str
        """
        allowed_values = ["private", "friends", "public"]
        if privacy not in allowed_values:
            raise ValueError(
                "Invalid value for `privacy` ({0}), must be one of {1}"
                .format(privacy, allowed_values)
            )

        self._privacy = privacy

    @property
    def published(self):
        """
        Gets the published of this Video.

        :return: The published of this Video.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """
        Sets the published of this Video.

        :param published: The published of this Video.
        :type: bool
        """

        self._published = published

    @property
    def short_description(self):
        """
        Gets the short_description of this Video.

        :return: The short_description of this Video.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """
        Sets the short_description of this Video.

        :param short_description: The short_description of this Video.
        :type: str
        """

        self._short_description = short_description

    @property
    def size(self):
        """
        Gets the size of this Video.

        :return: The size of this Video.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this Video.

        :param size: The size of this Video.
        :type: int
        """

        self._size = size

    @property
    def tags(self):
        """
        Gets the tags of this Video.

        :return: The tags of this Video.
        :rtype: list[VideoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Video.

        :param tags: The tags of this Video.
        :type: list[VideoTag]
        """

        self._tags = tags

    @property
    def thumbnail(self):
        """
        Gets the thumbnail of this Video.

        :return: The thumbnail of this Video.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """
        Sets the thumbnail of this Video.

        :param thumbnail: The thumbnail of this Video.
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def updated(self):
        """
        Gets the updated of this Video.

        :return: The updated of this Video.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Video.

        :param updated: The updated of this Video.
        :type: int
        """

        self._updated = updated

    @property
    def uploader(self):
        """
        Gets the uploader of this Video.

        :return: The uploader of this Video.
        :rtype: User
        """
        return self._uploader

    @uploader.setter
    def uploader(self, uploader):
        """
        Sets the uploader of this Video.

        :param uploader: The uploader of this Video.
        :type: User
        """

        self._uploader = uploader

    @property
    def views(self):
        """
        Gets the views of this Video.

        :return: The views of this Video.
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views):
        """
        Sets the views of this Video.

        :param views: The views of this Video.
        :type: int
        """

        self._views = views

    @property
    def whitelist(self):
        """
        Gets the whitelist of this Video.

        :return: The whitelist of this Video.
        :rtype: list[User]
        """
        return self._whitelist

    @whitelist.setter
    def whitelist(self, whitelist):
        """
        Sets the whitelist of this Video.

        :param whitelist: The whitelist of this Video.
        :type: list[User]
        """

        self._whitelist = whitelist

    @property
    def width(self):
        """
        Gets the width of this Video.

        :return: The width of this Video.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this Video.

        :param width: The width of this Video.
        :type: int
        """

        self._width = width

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Video):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
